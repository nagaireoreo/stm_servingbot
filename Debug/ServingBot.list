
ServingBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012058  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08012228  08012228  00022228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d0c  08012d0c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012d0c  08012d0c  00022d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d14  08012d14  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012d14  08012d14  00022d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012d1c  08012d1c  00022d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08012d24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200001e0  08012f04  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08012f04  00030634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00058586  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006756  00000000  00000000  00088796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f0  00000000  00000000  0008eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002250  00000000  00000000  000912e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b35c  00000000  00000000  00093530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207ec  00000000  00000000  000be88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b7b  00000000  00000000  000df078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd8c  00000000  00000000  001d5c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012210 	.word	0x08012210

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08012210 	.word	0x08012210

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN6BNO055C1Ev>:

#include <stdio.h>
#include <string.h>

// UARTがおかしくなる現象が発生，ハブを抜き差ししたら直った　2021/7/10
BNO055::BNO055()
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
{

}
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_ZN6BNO0554InitE17I2C_HandleTypeDefh>:

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
	Init(i2c_module, device_address);
}

void BNO055::Init(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8001042:	b084      	sub	sp, #16
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	f107 001c 	add.w	r0, r7, #28
 8001050:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3304      	adds	r3, #4
 8001058:	f107 011c 	add.w	r1, r7, #28
 800105c:	2254      	movs	r2, #84	; 0x54
 800105e:	4618      	mov	r0, r3
 8001060:	f00c f884 	bl	800d16c <memcpy>
	device_address_ = device_address;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800106a:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08}; // 0x3d:オペレーションモード  0x08:8byte取得
 800106c:	f640 033d 	movw	r3, #2109	; 0x83d
 8001070:	81bb      	strh	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001072:	b672      	cpsid	i
}
 8001074:	bf00      	nop
	__disable_irq(); // 割込み禁止
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8001076:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800107a:	b29b      	uxth	r3, r3
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b299      	uxth	r1, r3
 8001080:	f107 020c 	add.w	r2, r7, #12
 8001084:	f107 001c 	add.w	r0, r7, #28
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2302      	movs	r3, #2
 800108e:	f006 fffd 	bl	800808c <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001092:	b662      	cpsie	i
}
 8001094:	bf00      	nop
	__enable_irq(); // 割込み再開
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a0:	b004      	add	sp, #16
 80010a2:	4770      	bx	lr

080010a4 <_ZN6BNO05512GetYawRadianEv>:

float BNO055::GetYawRadian()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	EULAR e = GetEular();
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8b7 	bl	8001220 <_ZN6BNO0558GetEularEv>
 80010b2:	eef0 6a40 	vmov.f32	s13, s0
 80010b6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ba:	eef0 7a41 	vmov.f32	s15, s2
 80010be:	edc7 6a03 	vstr	s13, [r7, #12]
 80010c2:	ed87 7a04 	vstr	s14, [r7, #16]
 80010c6:	edc7 7a05 	vstr	s15, [r7, #20]
	return e.z;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	ee07 3a90 	vmov	s15, r3
}
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <_ZN6BNO05513GetQuaternionEv>:

QUATERNION BNO055::GetQuaternion(){
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b099      	sub	sp, #100	; 0x64
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20; // クォータニオンの開始アドレス
 80010e4:	2320      	movs	r3, #32
 80010e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
}
 80010ec:	bf00      	nop
	uint8_t bno_receivedata[16];
	short quat[4];
	__disable_irq(); // 割込み禁止
	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 1000);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1d18      	adds	r0, r3, #4
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b299      	uxth	r1, r3
 80010fc:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	f006 ffc0 	bl	800808c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100); // 8byte取得する
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	1d18      	adds	r0, r3, #4
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	b299      	uxth	r1, r3
 800111a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2308      	movs	r3, #8
 8001124:	f007 f8b0 	bl	8008288 <HAL_I2C_Master_Receive>
  __ASM volatile ("cpsie i" : : : "memory");
 8001128:	b662      	cpsie	i
}
 800112a:	bf00      	nop
	__enable_irq(); // 割込み再開

	// MSB[0], LSB[0], MSB[1], ~ の順番でレジスタに格納されてる
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 800112c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8001140:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8001154:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 800117c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001218 <_ZN6BNO05513GetQuaternionEv+0x13c>
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	edc7 7a07 	vstr	s15, [r7, #28]
 8001194:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001218 <_ZN6BNO05513GetQuaternionEv+0x13c>
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	edc7 7a08 	vstr	s15, [r7, #32]
 80011ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001218 <_ZN6BNO05513GetQuaternionEv+0x13c>
 80011bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80011c4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001218 <_ZN6BNO05513GetQuaternionEv+0x13c>
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 80011dc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80011ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f2:	ee06 0a10 	vmov	s12, r0
 80011f6:	ee06 1a90 	vmov	s13, r1
 80011fa:	ee07 2a10 	vmov	s14, r2
 80011fe:	ee07 3a90 	vmov	s15, r3
}
 8001202:	eeb0 0a46 	vmov.f32	s0, s12
 8001206:	eef0 0a66 	vmov.f32	s1, s13
 800120a:	eeb0 1a47 	vmov.f32	s2, s14
 800120e:	eef0 1a67 	vmov.f32	s3, s15
 8001212:	375c      	adds	r7, #92	; 0x5c
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	46800000 	.word	0x46800000
 800121c:	00000000 	.word	0x00000000

08001220 <_ZN6BNO0558GetEularEv>:

	EULAR e = { quat[0],  quat[1],  quat[2] };
	return e;
}
*/
EULAR BNO055::GetEular(){
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b09a      	sub	sp, #104	; 0x68
 8001224:	af00      	add	r7, sp, #0
 8001226:	6178      	str	r0, [r7, #20]

	QUATERNION q = GetQuaternion();
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff ff57 	bl	80010dc <_ZN6BNO05513GetQuaternionEv>
 800122e:	eeb0 6a40 	vmov.f32	s12, s0
 8001232:	eef0 6a60 	vmov.f32	s13, s1
 8001236:	eeb0 7a41 	vmov.f32	s14, s2
 800123a:	eef0 7a61 	vmov.f32	s15, s3
 800123e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001242:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001246:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800124a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800124e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001252:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800125e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	ee17 0a90 	vmov	r0, s15
 800126e:	f7ff f98b 	bl	8000588 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	f7ff f829 	bl	80002cc <__adddf3>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 8001282:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001286:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800128a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001292:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f971 	bl	8000588 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	f7ff f80f 	bl	80002cc <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	f04f 0000 	mov.w	r0, #0
 80012b6:	4960      	ldr	r1, [pc, #384]	; (8001438 <_ZN6BNO0558GetEularEv+0x218>)
 80012b8:	f7ff f806 	bl	80002c8 <__aeabi_dsub>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 80012c4:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 80012c8:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80012cc:	f00a fc98 	bl	800bc00 <atan2>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fca6 	bl	8000c28 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 80012e0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80012e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80012f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fc:	ee17 0a90 	vmov	r0, s15
 8001300:	f7ff f942 	bl	8000588 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	f7fe ffe0 	bl	80002cc <__adddf3>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001314:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001318:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b45      	ldr	r3, [pc, #276]	; (8001438 <_ZN6BNO0558GetEularEv+0x218>)
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff fc0d 	bl	8000b44 <__aeabi_dcmpge>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00e      	beq.n	800134e <_ZN6BNO0558GetEularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001330:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001334:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001430 <_ZN6BNO0558GetEularEv+0x210>
 8001338:	f00a fb94 	bl	800ba64 <copysign>
 800133c:	ec53 2b10 	vmov	r2, r3, d0
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc70 	bl	8000c28 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e00b      	b.n	8001366 <_ZN6BNO0558GetEularEv+0x146>
	else
		e.y = asin(sinp);
 800134e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001352:	f00a fc1b 	bl	800bb8c <asin>
 8001356:	ec53 2b10 	vmov	r2, r3, d0
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc63 	bl	8000c28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 8001366:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800136a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001376:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff f8ff 	bl	8000588 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	f7fe ff9d 	bl	80002cc <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 800139a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800139e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80013aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	ee17 0a90 	vmov	r0, s15
 80013ba:	f7ff f8e5 	bl	8000588 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	f7fe ff83 	bl	80002cc <__adddf3>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f04f 0000 	mov.w	r0, #0
 80013ce:	491a      	ldr	r1, [pc, #104]	; (8001438 <_ZN6BNO0558GetEularEv+0x218>)
 80013d0:	f7fe ff7a 	bl	80002c8 <__aeabi_dsub>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 80013dc:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 80013e0:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80013e4:	f00a fc0c 	bl	800bc00 <atan2>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fc1a 	bl	8000c28 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	623b      	str	r3, [r7, #32]

	return e;
 80013f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013fc:	f107 0218 	add.w	r2, r7, #24
 8001400:	ca07      	ldmia	r2, {r0, r1, r2}
 8001402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001406:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800140a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800140c:	ee06 1a90 	vmov	s13, r1
 8001410:	ee07 2a10 	vmov	s14, r2
 8001414:	ee07 3a90 	vmov	s15, r3
}
 8001418:	eeb0 0a66 	vmov.f32	s0, s13
 800141c:	eef0 0a47 	vmov.f32	s1, s14
 8001420:	eeb0 1a67 	vmov.f32	s2, s15
 8001424:	3768      	adds	r7, #104	; 0x68
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	54411744 	.word	0x54411744
 8001434:	3ff921fb 	.word	0x3ff921fb
 8001438:	3ff00000 	.word	0x3ff00000

0800143c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	ed87 0a01 	vstr	s0, [r7, #4]
 800145e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001462:	f00a fb11 	bl	800ba88 <cosf>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
 800147e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001482:	f00a fb41 	bl	800bb08 <sinf>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_Z8Clippingfff>:
// @param1[in]	: 範囲の下限
// @param1[in]	: 範囲の上限
// @return			: 指定の範囲内にクリップされた値
//---------------------------------------------------------------------------------------------------------------------
float Clipping(float val, float lower_bound, float upper_bound)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a03 	vstr	s0, [r7, #12]
 800149e:	edc7 0a02 	vstr	s1, [r7, #8]
 80014a2:	ed87 1a01 	vstr	s2, [r7, #4]
    if(val < lower_bound) {
 80014a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d502      	bpl.n	80014be <_Z8Clippingfff+0x2a>
        val = lower_bound;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e00a      	b.n	80014d4 <_Z8Clippingfff+0x40>
    } else if(upper_bound < val) {
 80014be:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d501      	bpl.n	80014d4 <_Z8Clippingfff+0x40>
        val = upper_bound;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
    }
    return val;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	ee07 3a90 	vmov	s15, r3
}
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f9e0 	bl	80018b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffeb 	bl	80014e8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	0000      	movs	r0, r0
	...

08001520 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff>:
// @param1[in]	: 並進レート（最大値）
// @param2[in]	: 回転レート（最大値）
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void ConvertBodyVel2WheelVelManuaRate(float p_x, float p_y, float p_th, float* p_vel_front, float* p_vel_left_back, float* p_vel_right_back, float translate_rate, float rotate_rate)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0a07 	vstr	s0, [r7, #28]
 800152a:	edc7 0a06 	vstr	s1, [r7, #24]
 800152e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001532:	6138      	str	r0, [r7, #16]
 8001534:	60f9      	str	r1, [r7, #12]
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	edc7 1a01 	vstr	s3, [r7, #4]
 800153c:	ed87 2a00 	vstr	s4, [r7]
	// ジョイスティックが円形じゃなくて四角の場合，角度＆単位円に変換する必要ある
	float x 	 = Clipping(p_x,         -1.0, 1.0);
 8001540:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001544:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001548:	ed97 0a07 	vldr	s0, [r7, #28]
 800154c:	f7ff ffa2 	bl	8001494 <_Z8Clippingfff>
 8001550:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float y	     = Clipping(p_y,         -1.0, 1.0);
 8001554:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001558:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800155c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001560:	f7ff ff98 	bl	8001494 <_Z8Clippingfff>
 8001564:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float th	 = Clipping(p_th,        -1.0, 1.0);
 8001568:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800156c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001570:	ed97 0a05 	vldr	s0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <_Z8Clippingfff>
 8001578:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	x   *= translate_rate;
 800157c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001580:	edd7 7a01 	vldr	s15, [r7, #4]
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	y   *= translate_rate;
 800158c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001590:	edd7 7a01 	vldr	s15, [r7, #4]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	th *= rotate_rate;
 800159c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015a0:	edd7 7a00 	vldr	s15, [r7]
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    // 車輪Frontがy軸に正
    //*p_vel_front			= -1.0*p_vx -            0.0 *p_vy - L*p_omega;
    //*p_vel_left_back 	=  0.5*p_vx -  0.8660254*p_vy - L*p_omega;
    //*p_vel_right_back =  0.5*p_vx + 0.8660254*p_vy - L*p_omega;
	// 車輪Frontがx軸に正
    *p_vel_front        =           0 * x +  1.0 * y  + th;
 80015ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015b0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80016e0 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff+0x1c0>
 80015b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b8:	ee17 0a90 	vmov	r0, s15
 80015bc:	f7fe ffe4 	bl	8000588 <__aeabi_f2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c6:	f7fe ffdf 	bl	8000588 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4620      	mov	r0, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	f7fe fe7b 	bl	80002cc <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015e0:	f7fe ffd2 	bl	8000588 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe fe6e 	bl	80002cc <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb16 	bl	8000c28 <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	601a      	str	r2, [r3, #0]
    *p_vel_left_back    =  -0.8660254 * x -  0.5 * y  + th;
 8001602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001604:	f7fe ffc0 	bl	8000588 <__aeabi_f2d>
 8001608:	a331      	add	r3, pc, #196	; (adr r3, 80016d0 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff+0x1b0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f813 	bl	8000638 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	461d      	mov	r5, r3
 800161a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800161c:	f7fe ffb4 	bl	8000588 <__aeabi_f2d>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff+0x1c4>)
 8001626:	f7ff f807 	bl	8000638 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe fe49 	bl	80002c8 <__aeabi_dsub>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fe3e 	bl	80002cc <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fae6 	bl	8000c28 <__aeabi_d2f>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	601a      	str	r2, [r3, #0]
    *p_vel_right_back   =   0.8660254 * x -  0.5 * y  + th;
 8001662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001664:	f7fe ff90 	bl	8000588 <__aeabi_f2d>
 8001668:	a31b      	add	r3, pc, #108	; (adr r3, 80016d8 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff+0x1b8>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffe3 	bl	8000638 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4614      	mov	r4, r2
 8001678:	461d      	mov	r5, r3
 800167a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800167c:	f7fe ff84 	bl	8000588 <__aeabi_f2d>
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff+0x1c4>)
 8001686:	f7fe ffd7 	bl	8000638 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe fe19 	bl	80002c8 <__aeabi_dsub>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4614      	mov	r4, r2
 800169c:	461d      	mov	r5, r3
 800169e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a0:	f7fe ff72 	bl	8000588 <__aeabi_f2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	f7fe fe0e 	bl	80002cc <__adddf3>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fab6 	bl	8000c28 <__aeabi_d2f>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	e6502b91 	.word	0xe6502b91
 80016d4:	bfebb67a 	.word	0xbfebb67a
 80016d8:	e6502b91 	.word	0xe6502b91
 80016dc:	3febb67a 	.word	0x3febb67a
 80016e0:	00000000 	.word	0x00000000
 80016e4:	3fe00000 	.word	0x3fe00000

080016e8 <_Z8RotationfffPfS_>:
// @param4[out]: 変換後のx
// @param5[out]: 変換後のy
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Rotation(float p_origin_x, float p_origin_y, float p_body_angle, float* p_result_x, float* p_result_y)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	ed2d 8b02 	vpush	{d8}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80016f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80016fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80016fe:	60b8      	str	r0, [r7, #8]
 8001700:	6079      	str	r1, [r7, #4]
    *p_result_x = p_origin_x * cos(p_body_angle) - p_origin_y * sin(p_body_angle);
 8001702:	ed97 0a03 	vldr	s0, [r7, #12]
 8001706:	f7ff fea5 	bl	8001454 <_ZSt3cosf>
 800170a:	eeb0 7a40 	vmov.f32	s14, s0
 800170e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001712:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001716:	ed97 0a03 	vldr	s0, [r7, #12]
 800171a:	f7ff feab 	bl	8001474 <_ZSt3sinf>
 800171e:	eeb0 7a40 	vmov.f32	s14, s0
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	edc3 7a00 	vstr	s15, [r3]
    *p_result_y = p_origin_x * sin(p_body_angle) + p_origin_y * cos(p_body_angle);
 8001734:	ed97 0a03 	vldr	s0, [r7, #12]
 8001738:	f7ff fe9c 	bl	8001474 <_ZSt3sinf>
 800173c:	eeb0 7a40 	vmov.f32	s14, s0
 8001740:	edd7 7a05 	vldr	s15, [r7, #20]
 8001744:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001748:	ed97 0a03 	vldr	s0, [r7, #12]
 800174c:	f7ff fe82 	bl	8001454 <_ZSt3cosf>
 8001750:	eeb0 7a40 	vmov.f32	s14, s0
 8001754:	edd7 7a04 	vldr	s15, [r7, #16]
 8001758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	edc3 7a00 	vstr	s15, [r3]
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	ecbd 8b02 	vpop	{d8}
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base() = default;
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f8ab 	bl	80018d8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector() = default;
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffeb 	bl	8001772 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>:
// @param2[in]	: 指定の分割文字1
// @param3[in]	: 指定の分割文字2
// @return			: 分割された文字列の配列
//---------------------------------------------------------------------------------------------------------------------
vector<string> SplitString2Token(string p_str, char p_token1, char p_token2)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	; 0x30
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	460b      	mov	r3, r1
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	4613      	mov	r3, r2
 80017bc:	71bb      	strb	r3, [r7, #6]
	// 分割された文字列
	vector<string> splited_strings;
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ffe4 	bl	800178c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
	// 格納用文字列
	string splitting_string;
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4618      	mov	r0, r3
 80017ca:	f009 ffbe 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

	for(int idx=0; idx<p_str.size(); idx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f009 ffe6 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80017d8:	4602      	mov	r2, r0
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	429a      	cmp	r2, r3
 80017de:	bf8c      	ite	hi
 80017e0:	2301      	movhi	r3, #1
 80017e2:	2300      	movls	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d045      	beq.n	8001876 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xce>
	{
		// 指定の分割文字なら
		if(p_str[idx] == p_token1 || p_str[idx] == p_token2)
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	4619      	mov	r1, r3
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f009 ffda 	bl	800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80017f4:	4603      	mov	r3, r0
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d009      	beq.n	8001812 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x6a>
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f009 ffd0 	bl	800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001808:	4603      	mov	r3, r0
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	79ba      	ldrb	r2, [r7, #6]
 800180e:	429a      	cmp	r2, r3
 8001810:	d101      	bne.n	8001816 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x6e>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x70>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d019      	beq.n	8001850 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xa8>
		{
			if(splitting_string.size() < 1)
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4618      	mov	r0, r3
 8001822:	f009 ffbf 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11a      	bne.n	800186c <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xc4>
			{
				continue;
			}
			splited_strings.push_back(splitting_string);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f85b 	bl	80018f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
			splitting_string = "";
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x10c>)
 8001848:	4618      	mov	r0, r3
 800184a:	f00a f862 	bl	800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 800184e:	e00e      	b.n	800186e <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xc6>
		}
		// 指定の分割文字は含めない
		else
		{
			splitting_string += p_str[idx];
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	68b8      	ldr	r0, [r7, #8]
 8001856:	f009 ffa7 	bl	800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800185a:	4603      	mov	r3, r0
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f009 ffc1 	bl	800b7ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
 800186a:	e000      	b.n	800186e <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xc6>
				continue;
 800186c:	bf00      	nop
	for(int idx=0; idx<p_str.size(); idx++)
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3301      	adds	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001874:	e7ad      	b.n	80017d2 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x2a>
		}
	}
	// 最後が分割じゃないとき，中途半端に残ったものも入れる
	if(splitting_string.size() > 0)
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4618      	mov	r0, r3
 800187c:	f009 ff92 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf14      	ite	ne
 8001886:	2301      	movne	r3, #1
 8001888:	2300      	moveq	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0xf4>
	{
		splited_strings.push_back(splitting_string);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f82e 	bl	80018f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
	}

	return splited_strings;
 800189c:	bf00      	nop
	string splitting_string;
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 ff72 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return splited_strings;
 80018a8:	bf00      	nop
}
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	3730      	adds	r7, #48	; 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08012228 	.word	0x08012228

080018b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f83f 	bl	8001944 <_ZNSaIfEC1Ev>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f847 	bl	800195c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f8a2 	bl	8001a2a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f8aa 	bl	8001a42 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	d00d      	beq.n	800192a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	f000 f8d3 	bl	8001ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f103 0218 	add.w	r2, r3, #24
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001928:	e008      	b.n	800193c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f8dc 	bl	8001ae8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001930:	4603      	mov	r3, r0
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f8fe 	bl	8001b38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9bb 	bl	8001cc8 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
	{ }
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	if (__p)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f99e 	bl	8001cde <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f994 	bl	8001cfc <_ZSt8_DestroyIPfEvT_S1_>
    }
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1d1a      	adds	r2, r3, #4
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f991 	bl	8001d16 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>:
      _S_use_relocate()
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f805 	bl	8001a14 <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001a0a:	4603      	mov	r3, r0
      }
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001a1c:	2301      	movs	r3, #1
      }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa37 	bl	8001ea6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
	{ }
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
	if (__p)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fa1a 	bl	8001ebc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fa10 	bl	8001eda <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa10 	bl	8001ef4 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fa15 	bl	8001f0a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fa1d 	bl	8001f3a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f805 	bl	8001b20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001b16:	4603      	mov	r3, r0
      }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001b28:	2301      	movs	r3, #1
      }
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fa06 	bl	8001f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8001b4e:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fa43 	bl	8001fe8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	f107 0214 	add.w	r2, r7, #20
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fa49 	bl	8002008 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8001b76:	4603      	mov	r3, r0
 8001b78:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fa5c 	bl	800203c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8001b84:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001b8a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	189d      	adds	r5, r3, r2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f9a9 	bl	8001ef4 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff ff8a 	bl	8001ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001bb2:	f7ff ffaa 	bl	8001b0a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d027      	beq.n	8001c0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fa63 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5f 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001bd2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bda:	f000 fa43 	bl	8002064 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8001bde:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	3318      	adds	r3, #24
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fa4e 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff4a 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001bfc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	4620      	mov	r0, r4
 8001c04:	f000 fa2e 	bl	8002064 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8001c08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c0a:	e026      	b.n	8001c5a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fa3b 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff37 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001c22:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4621      	mov	r1, r4
 8001c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c2a:	f000 fa3a 	bl	80020a2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	3318      	adds	r3, #24
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fa26 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff22 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001c4c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	4620      	mov	r0, r4
 8001c54:	f000 fa25 	bl	80020a2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001c58:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001c5a:	f7ff ff56 	bl	8001b0a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff0f 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	6a39      	ldr	r1, [r7, #32]
 8001c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c7a:	f7ff ff14 	bl	8001aa6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001c7e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	10db      	asrs	r3, r3, #3
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001c90:	461a      	mov	r2, r3
 8001c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c94:	f7ff fee9 	bl	8001a6a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]
    }
 8001cb8:	bf00      	nop
 8001cba:	3730      	adds	r7, #48	; 0x30
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	0801222c 	.word	0x0801222c
 8001cc4:	aaaaaaab 	.word	0xaaaaaaab

08001cc8 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f9fd 	bl	80020ee <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f9fd 	bl	8002108 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001d36:	b590      	push	{r4, r7, lr}
 8001d38:	b087      	sub	sp, #28
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f9eb 	bl	800211e <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8001d48:	4604      	mov	r4, r0
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f9f8 	bl	8002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	1ae2      	subs	r2, r4, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	bf34      	ite	cc
 8001d5a:	2301      	movcc	r3, #1
 8001d5c:	2300      	movcs	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f009 fc26 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f9e8 	bl	8002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8001d70:	4604      	mov	r4, r0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f9e4 	bl	8002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	f107 0208 	add.w	r2, r7, #8
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f9ea 	bl	8002160 <_ZSt3maxIjERKT_S2_S2_>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4423      	add	r3, r4
 8001d92:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f9d3 	bl	8002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d306      	bcc.n	8001db0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f9bb 	bl	800211e <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d904      	bls.n	8001dba <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f9b4 	bl	800211e <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8001db6:	4603      	mov	r3, r0
 8001db8:	e000      	b.n	8001dbc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8001dba:	697b      	ldr	r3, [r7, #20]
      }
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff9e 	bl	8001d16 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f835 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8001df4:	4603      	mov	r3, r0
 8001df6:	681c      	ldr	r4, [r3, #0]
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f000 f830 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1ae3      	subs	r3, r4, r3
 8001e04:	109b      	asrs	r3, r3, #2
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}

08001e0e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f9b0 	bl	8002188 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	e000      	b.n	8001e2e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8001e2c:	2300      	movs	r3, #0
      }
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b089      	sub	sp, #36	; 0x24
 8001e3a:	af02      	add	r7, sp, #8
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001e44:	f88d 4000 	strb.w	r4, [sp]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f9a9 	bl	80021a6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8001e54:	4603      	mov	r3, r0
      }
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}

08001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f9a1 	bl	80021ca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8001e88:	4604      	mov	r4, r0
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f000 f99d 	bl	80021ca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8001e90:	4601      	mov	r1, r0
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4620      	mov	r0, r4
 8001e98:	f000 f9a6 	bl	80021e8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8001e9c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}

08001ea6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f99c 	bl	800220a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f99c 	bl	8002224 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001f0a:	b590      	push	{r4, r7, lr}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffec 	bl	8001ef4 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4619      	mov	r1, r3
 8001f22:	2018      	movs	r0, #24
 8001f24:	f7ff fa8a 	bl	800143c <_ZnwjPv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f009 fd47 	bl	800b9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}

08001f3a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001f5a:	b590      	push	{r4, r7, lr}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f974 	bl	8002254 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f982 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	1ae2      	subs	r2, r4, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	bf34      	ite	cc
 8001f7e:	2301      	movcc	r3, #1
 8001f80:	2300      	movcs	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f009 fb14 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f972 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8001f94:	4604      	mov	r4, r0
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f96e 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	f107 0208 	add.w	r2, r7, #8
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f8d8 	bl	8002160 <_ZSt3maxIjERKT_S2_S2_>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4423      	add	r3, r4
 8001fb6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f95d 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d306      	bcc.n	8001fd4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f944 	bl	8002254 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d904      	bls.n	8001fde <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f93d 	bl	8002254 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	e000      	b.n	8001fe0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8001fde:	697b      	ldr	r3, [r7, #20]
      }
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}

08001fe8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff9e 	bl	8001f3a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f83a 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8002018:	4603      	mov	r3, r0
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f000 f835 	bl	800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8002022:	4603      	mov	r3, r0
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1ae3      	subs	r3, r4, r3
 8002028:	10db      	asrs	r3, r3, #3
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	aaaaaaab 	.word	0xaaaaaaab

0800203c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f927 	bl	80022a4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8002056:	4603      	mov	r3, r0
 8002058:	e000      	b.n	800205c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800205a:	2300      	movs	r3, #0
      }
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002072:	f88d 4000 	strb.w	r4, [sp]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f920 	bl	80022c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8002082:	4603      	mov	r3, r0
      }
 8002084:	4618      	mov	r0, r3
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}

0800208c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f918 	bl	80022e6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 80020b6:	4604      	mov	r4, r0
 80020b8:	68b8      	ldr	r0, [r7, #8]
 80020ba:	f000 f914 	bl	80022e6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 80020be:	4601      	mov	r1, r0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4620      	mov	r0, r4
 80020c6:	f000 f91d 	bl	8002304 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 80020ca:	4603      	mov	r3, r0
    }
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}

080020d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f920 	bl	8002326 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80020fa:	68b8      	ldr	r0, [r7, #8]
 80020fc:	f009 fa40 	bl	800b580 <_ZdlPv>
      }
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f922 	bl	8002372 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800212e:	4603      	mov	r3, r0
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f904 	bl	800233e <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8002136:	4603      	mov	r3, r0
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	109b      	asrs	r3, r3, #2
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d201      	bcs.n	800217a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	e000      	b.n	800217c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800217a:	687b      	ldr	r3, [r7, #4]
    }
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002192:	2200      	movs	r2, #0
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8f6 	bl	8002388 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f902 	bl	80023c4 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80021c0:	4603      	mov	r3, r0
      }
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f910 	bl	80023fe <_ZNSt13move_iteratorIPfEC1ES0_>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f90e 	bl	800241c <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8002200:	4603      	mov	r3, r0
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f009 f9b2 	bl	800b580 <_ZdlPv>
      }
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d00a      	beq.n	800224c <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f902 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f909 	bl	8002456 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3318      	adds	r3, #24
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e7f0      	b.n	800222e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f920 	bl	80024a4 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8002264:	4603      	mov	r3, r0
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f900 	bl	800246c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 800226c:	4603      	mov	r3, r0
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	10db      	asrs	r3, r3, #3
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	aaaaaaab 	.word	0xaaaaaaab

080022a4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80022ae:	2200      	movs	r2, #0
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f901 	bl	80024ba <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f910 	bl	80024fc <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80022dc:	4603      	mov	r3, r0
      }
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f91e 	bl	8002536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f91c 	bl	8002554 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800231c:	4603      	mov	r3, r0
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f009 fa2b 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002346:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800234a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f913 	bl	8002578 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8002352:	4603      	mov	r3, r0
 8002354:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002356:	f107 0208 	add.w	r2, r7, #8
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f915 	bl	8002590 <_ZSt3minIjERKT_S2_S2_>
 8002366:	4603      	mov	r3, r0
 8002368:	681b      	ldr	r3, [r3, #0]
      }
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f90f 	bl	80025b8 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800239a:	4602      	mov	r2, r0
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4293      	cmp	r3, r2
 80023a0:	bf8c      	ite	hi
 80023a2:	2301      	movhi	r3, #1
 80023a4:	2300      	movls	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80023ac:	f009 f8fd 	bl	800b5aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f009 f8e5 	bl	800b584 <_Znwj>
 80023ba:	4603      	mov	r3, r0
      }
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8fc 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 80023d8:	4604      	mov	r4, r0
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	f000 f8f8 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 80023e0:	4605      	mov	r5, r0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8f4 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 80023e8:	4602      	mov	r2, r0
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4629      	mov	r1, r5
 80023ee:	4620      	mov	r0, r4
 80023f0:	f000 f8f9 	bl	80025e6 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80023f4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}

080023fe <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002428:	2301      	movs	r3, #1
 800242a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f8f6 	bl	8002622 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8002436:	4603      	mov	r3, r0
    }
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f009 f994 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 8002476:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8e2 	bl	8002642 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800247e:	4603      	mov	r3, r0
 8002480:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002482:	f107 0208 	add.w	r2, r7, #8
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f87f 	bl	8002590 <_ZSt3minIjERKT_S2_S2_>
 8002492:	4603      	mov	r3, r0
 8002494:	681b      	ldr	r3, [r3, #0]
      }
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	05555555 	.word	0x05555555

080024a4 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f8c8 	bl	800265c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf8c      	ite	hi
 80024d4:	2301      	movhi	r3, #1
 80024d6:	2300      	movls	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80024de:	f009 f864 	bl	800b5aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f009 f849 	bl	800b584 <_Znwj>
 80024f2:	4603      	mov	r3, r0
      }
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f8b4 	bl	8002678 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 8002510:	4604      	mov	r4, r0
 8002512:	68b8      	ldr	r0, [r7, #8]
 8002514:	f000 f8b0 	bl	8002678 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 8002518:	4605      	mov	r5, r0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8ac 	bl	8002678 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4629      	mov	r1, r5
 8002526:	4620      	mov	r0, r4
 8002528:	f000 f8b1 	bl	800268e <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800252c:	4603      	mov	r3, r0
    }
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bdb0      	pop	{r4, r5, r7, pc}

08002536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f8b6 	bl	80026da <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800256e:	4603      	mov	r3, r0
    }
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f819 	bl	80025b8 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8002586:	4603      	mov	r3, r0
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d201      	bcs.n	80025aa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	e000      	b.n	80025ac <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80025aa:	687b      	ldr	r3, [r7, #4]
    }
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80025c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_ZSt12__niter_baseIPfET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	109b      	asrs	r3, r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	dd06      	ble.n	8002612 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	461a      	mov	r2, r3
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f00a fdbb 	bl	800d188 <memmove>
      return __result + __count;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
    }
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f880 	bl	8002738 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f806 	bl	800265c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8002650:	4603      	mov	r3, r0
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x18>)
      }
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	05555555 	.word	0x05555555

08002678 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __niter_base(_Iterator __it)
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d013      	beq.n	80026d0 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff fec9 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80026ae:	4604      	mov	r4, r0
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff fec5 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80026b6:	4603      	mov	r3, r0
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 f853 	bl	8002768 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3318      	adds	r3, #24
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3318      	adds	r3, #24
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e7e7      	b.n	80026a0 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x12>
      return __cur;
 80026d0:	697b      	ldr	r3, [r7, #20]
    }
 80026d2:	4618      	mov	r0, r3
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80026da:	b590      	push	{r4, r7, lr}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f852 	bl	800279e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f7ff fe9d 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8002706:	4604      	mov	r4, r0
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f868 	bl	80027e2 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f000 f86f 	bl	80027fa <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f84d 	bl	80027c0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3318      	adds	r3, #24
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e7dd      	b.n	80026ea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800272e:	697b      	ldr	r3, [r7, #20]
	}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f86f 	bl	8002828 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800274a:	4604      	mov	r4, r0
 800274c:	68b8      	ldr	r0, [r7, #8]
 800274e:	f000 f86b 	bl	8002828 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002752:	4603      	mov	r3, r0
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4619      	mov	r1, r3
 8002758:	4620      	mov	r0, r4
 800275a:	f000 f876 	bl	800284a <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800275e:	4603      	mov	r3, r0
    }
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}

08002768 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002774:	68b8      	ldr	r0, [r7, #8]
 8002776:	f000 f88b 	bl	8002890 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f890 	bl	80028a6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002786:	68b8      	ldr	r0, [r7, #8]
 8002788:	f7ff fe5a 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800278c:	4603      	mov	r3, r0
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fc9f 	bl	80020d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f88e 	bl	80028cc <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	++_M_current;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f103 0218 	add.w	r2, r3, #24
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]
	return *this;
 80027d4:	687b      	ldr	r3, [r7, #4]
      }
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80027fa:	b590      	push	{r4, r7, lr}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	f000 f877 	bl	80028f8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800280a:	4604      	mov	r4, r0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4619      	mov	r1, r3
 8002810:	2018      	movs	r0, #24
 8002812:	f7fe fe13 	bl	800143c <_ZnwjPv>
 8002816:	4603      	mov	r3, r0
 8002818:	4621      	mov	r1, r4
 800281a:	4618      	mov	r0, r3
 800281c:	f008 ff9c 	bl	800b758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f86b 	bl	800290e <_ZNKSt13move_iteratorIPfE4baseEv>
 8002838:	4603      	mov	r3, r0
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f873 	bl	8002926 <_ZSt12__miter_baseIPfET_S1_>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800284a:	b5b0      	push	{r4, r5, r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff feba 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 800285c:	4604      	mov	r4, r0
 800285e:	68b8      	ldr	r0, [r7, #8]
 8002860:	f7ff feb6 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 8002864:	4605      	mov	r5, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff feb1 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4629      	mov	r1, r5
 8002874:	4620      	mov	r0, r4
 8002876:	f000 f861 	bl	800293c <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 800287a:	4602      	mov	r2, r0
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f86d 	bl	8002960 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8002886:	4603      	mov	r3, r0
    }
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bdb0      	pop	{r4, r5, r7, pc}

08002890 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f820 	bl	80028f8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f85a 	bl	8002978 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f866 	bl	80029a8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80028dc:	4604      	mov	r4, r0
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f000 f862 	bl	80029a8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	429c      	cmp	r4, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZSt12__miter_baseIPfET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f835 	bl	80029c0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8002956:	4603      	mov	r3, r0
    }
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
    { return __res; }
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffb7 	bl	80028f8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800298a:	4604      	mov	r4, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4619      	mov	r1, r3
 8002990:	2018      	movs	r0, #24
 8002992:	f7fe fd53 	bl	800143c <_ZnwjPv>
 8002996:	4603      	mov	r3, r0
 8002998:	4621      	mov	r1, r4
 800299a:	4618      	mov	r0, r3
 800299c:	f008 fedc 	bl	800b758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	109b      	asrs	r3, r3, #2
 80029d4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f00a fbcf 	bl	800d188 <memmove>
	  return __result + _Num;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
	}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_CAN_RxFifo0MsgPendingCallback>:
//
// @param1[out]	: CANハンドル
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	cnt++;
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	4a57      	ldr	r2, [pc, #348]	; (8002b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002a0c:	6013      	str	r3, [r2, #0]
	if(cnt%100 != 0){return;}
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8002a14:	fb83 1302 	smull	r1, r3, r3, r2
 8002a18:	1159      	asrs	r1, r3, #5
 8002a1a:	17d3      	asrs	r3, r2, #31
 8002a1c:	1acb      	subs	r3, r1, r3
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 809a 	bne.w	8002b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	f107 0214 	add.w	r2, r7, #20
 8002a34:	2100      	movs	r1, #0
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f004 f82a 	bl	8006a90 <HAL_CAN_GetRxMessage>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808a 	beq.w	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
    {
    	readed_can_id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e000      	b.n	8002a5a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002a5c:	6013      	str	r3, [r2, #0]
    	readed_can_dlc = RxHeader.DLC;                                                     // DLC
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	4a44      	ldr	r2, [pc, #272]	; (8002b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8002a62:	6013      	str	r3, [r2, #0]

        if(readed_can_id == 517)
 8002a64:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f240 2205 	movw	r2, #517	; 0x205
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d118      	bne.n	8002aa2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
        {
			id517_readed_can_data[0] = RxData[0]; // 格納する
 8002a70:	7b3a      	ldrb	r2, [r7, #12]
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a74:	701a      	strb	r2, [r3, #0]
			id517_readed_can_data[1] = RxData[1];
 8002a76:	7b7a      	ldrb	r2, [r7, #13]
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a7a:	705a      	strb	r2, [r3, #1]
			id517_readed_can_data[2] = RxData[2];
 8002a7c:	7bba      	ldrb	r2, [r7, #14]
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a80:	709a      	strb	r2, [r3, #2]
			id517_readed_can_data[3] = RxData[3];
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a86:	70da      	strb	r2, [r3, #3]
			id517_readed_can_data[4] = RxData[4];
 8002a88:	7c3a      	ldrb	r2, [r7, #16]
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a8c:	711a      	strb	r2, [r3, #4]
			id517_readed_can_data[5] = RxData[5];
 8002a8e:	7c7a      	ldrb	r2, [r7, #17]
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a92:	715a      	strb	r2, [r3, #5]
			id517_readed_can_data[6] = RxData[6];
 8002a94:	7cba      	ldrb	r2, [r7, #18]
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a98:	719a      	strb	r2, [r3, #6]
			id517_readed_can_data[7] = RxData[7];
 8002a9a:	7cfa      	ldrb	r2, [r7, #19]
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8002a9e:	71da      	strb	r2, [r3, #7]
 8002aa0:	e03b      	b.n	8002b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
        }
        else if(readed_can_id == 518)
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f240 2206 	movw	r2, #518	; 0x206
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d118      	bne.n	8002ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
        {
			id518_readed_can_data[0] = RxData[0]; // 格納する
 8002aae:	7b3a      	ldrb	r2, [r7, #12]
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002ab2:	701a      	strb	r2, [r3, #0]
			id518_readed_can_data[1] = RxData[1];
 8002ab4:	7b7a      	ldrb	r2, [r7, #13]
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002ab8:	705a      	strb	r2, [r3, #1]
			id518_readed_can_data[2] = RxData[2];
 8002aba:	7bba      	ldrb	r2, [r7, #14]
 8002abc:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002abe:	709a      	strb	r2, [r3, #2]
			id518_readed_can_data[3] = RxData[3];
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002ac4:	70da      	strb	r2, [r3, #3]
			id518_readed_can_data[4] = RxData[4];
 8002ac6:	7c3a      	ldrb	r2, [r7, #16]
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002aca:	711a      	strb	r2, [r3, #4]
			id518_readed_can_data[5] = RxData[5];
 8002acc:	7c7a      	ldrb	r2, [r7, #17]
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002ad0:	715a      	strb	r2, [r3, #5]
			id518_readed_can_data[6] = RxData[6];
 8002ad2:	7cba      	ldrb	r2, [r7, #18]
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002ad6:	719a      	strb	r2, [r3, #6]
			id518_readed_can_data[7] = RxData[7];
 8002ad8:	7cfa      	ldrb	r2, [r7, #19]
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8002adc:	71da      	strb	r2, [r3, #7]
 8002ade:	e01c      	b.n	8002b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
        }
        else if(readed_can_id == 520)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8002ae8:	d117      	bne.n	8002b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
        {
			id519_readed_can_data[0] = RxData[0]; // 格納する
 8002aea:	7b3a      	ldrb	r2, [r7, #12]
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002aee:	701a      	strb	r2, [r3, #0]
			id519_readed_can_data[1] = RxData[1];
 8002af0:	7b7a      	ldrb	r2, [r7, #13]
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002af4:	705a      	strb	r2, [r3, #1]
			id519_readed_can_data[2] = RxData[2];
 8002af6:	7bba      	ldrb	r2, [r7, #14]
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002afa:	709a      	strb	r2, [r3, #2]
			id519_readed_can_data[3] = RxData[3];
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002b00:	70da      	strb	r2, [r3, #3]
			id519_readed_can_data[4] = RxData[4];
 8002b02:	7c3a      	ldrb	r2, [r7, #16]
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002b06:	711a      	strb	r2, [r3, #4]
			id519_readed_can_data[5] = RxData[5];
 8002b08:	7c7a      	ldrb	r2, [r7, #17]
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002b0c:	715a      	strb	r2, [r3, #5]
			id519_readed_can_data[6] = RxData[6];
 8002b0e:	7cba      	ldrb	r2, [r7, #18]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002b12:	719a      	strb	r2, [r3, #6]
			id519_readed_can_data[7] = RxData[7];
 8002b14:	7cfa      	ldrb	r2, [r7, #19]
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8002b18:	71da      	strb	r2, [r3, #7]
        }


        if(readed_can_id == 517){ id_1_cnt++;}
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f240 2205 	movw	r2, #517	; 0x205
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d105      	bne.n	8002b32 <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e017      	b.n	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        else if(readed_can_id == 518){ id_2_cnt++;}
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f240 2206 	movw	r2, #518	; 0x206
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d105      	bne.n	8002b4a <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e00b      	b.n	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        else if(readed_can_id == 520){ id_3_cnt++;}
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8002b52:	d106      	bne.n	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e000      	b.n	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
	if(cnt%100 != 0){return;}
 8002b60:	bf00      	nop
    }
}
 8002b62:	3730      	adds	r7, #48	; 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000021c 	.word	0x2000021c
 8002b6c:	51eb851f 	.word	0x51eb851f
 8002b70:	200001fc 	.word	0x200001fc
 8002b74:	20000200 	.word	0x20000200
 8002b78:	20000204 	.word	0x20000204
 8002b7c:	2000020c 	.word	0x2000020c
 8002b80:	20000214 	.word	0x20000214
 8002b84:	20000220 	.word	0x20000220
 8002b88:	20000224 	.word	0x20000224
 8002b8c:	20000228 	.word	0x20000228

08002b90 <_Z11InitEncoderv>:
// @param1[]	: なし
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------

void InitEncoder()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
	// CANが先に来ないとpre_absoluted_enc_valueの値が先に来てしまう。そのためリセットしても自己位置が0にならない。
	HAL_Delay(100);
 8002b96:	2064      	movs	r0, #100	; 0x64
 8002b98:	f003 fd36 	bl	8006608 <HAL_Delay>

	// エンコーダの前の値を格納しておく
	int absoluted_enc_value[3];
	GetAbsolutedEncCount(&absoluted_enc_value[0], &absoluted_enc_value[1], &absoluted_enc_value[2]);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	f103 0208 	add.w	r2, r3, #8
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f818 	bl	8002be4 <_Z20GetAbsolutedEncCountPiS_S_>

	// 差分をとるために前の値を格納する
	pre_absoluted_enc_value[0] = absoluted_enc_value[0];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <_Z11InitEncoderv+0x50>)
 8002bb8:	6013      	str	r3, [r2, #0]
	pre_absoluted_enc_value[1] = absoluted_enc_value[1];
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <_Z11InitEncoderv+0x50>)
 8002bbe:	6053      	str	r3, [r2, #4]
	pre_absoluted_enc_value[2] = absoluted_enc_value[2];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <_Z11InitEncoderv+0x50>)
 8002bc4:	6093      	str	r3, [r2, #8]

	float wheel_movements[3];
	GetWheelMovements(&wheel_movements[0], &wheel_movements[1], &wheel_movements[2]);
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	f103 0208 	add.w	r2, r3, #8
 8002bcc:	463b      	mov	r3, r7
 8002bce:	1d19      	adds	r1, r3, #4
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f892 	bl	8002cfc <_Z17GetWheelMovementsPfS_S_>

}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000022c 	.word	0x2000022c

08002be4 <_Z20GetAbsolutedEncCountPiS_S_>:
// @param2[out]	: 左車輪のエンコーダ値
// @param3[out]	: 右車輪のエンコーダ値
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void GetAbsolutedEncCount(int *p_front_absoluted_enc_count, int *p_left_absoluted_enc_count, int *p_right_absoluted_enc_count)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	int absoluted_enc_count[3];
	absoluted_enc_count[0] = (id517_readed_can_data[0] << 8) | id517_readed_can_data[1];
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <_Z20GetAbsolutedEncCountPiS_S_+0x68>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <_Z20GetAbsolutedEncCountPiS_S_+0x68>)
 8002bf8:	7852      	ldrb	r2, [r2, #1]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
	absoluted_enc_count[1] = (id518_readed_can_data[0] << 8) | id518_readed_can_data[1];
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <_Z20GetAbsolutedEncCountPiS_S_+0x6c>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <_Z20GetAbsolutedEncCountPiS_S_+0x6c>)
 8002c06:	7852      	ldrb	r2, [r2, #1]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
	absoluted_enc_count[2] = (id519_readed_can_data[0] << 8) | id519_readed_can_data[1];
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <_Z20GetAbsolutedEncCountPiS_S_+0x70>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <_Z20GetAbsolutedEncCountPiS_S_+0x70>)
 8002c14:	7852      	ldrb	r2, [r2, #1]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61fb      	str	r3, [r7, #28]

	// 正転でカウントが減少していくから，増加するように修正する
	*p_front_absoluted_enc_count = ABSOLUTE_ENC_MAX_VALU - absoluted_enc_count[0];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 8002c20:	331f      	adds	r3, #31
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6013      	str	r3, [r2, #0]
	*p_left_absoluted_enc_count   = ABSOLUTE_ENC_MAX_VALU - absoluted_enc_count[1];
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 8002c2c:	331f      	adds	r3, #31
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	6013      	str	r3, [r2, #0]
	*p_right_absoluted_enc_count = ABSOLUTE_ENC_MAX_VALU - absoluted_enc_count[2];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 8002c38:	331f      	adds	r3, #31
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6013      	str	r3, [r2, #0]

	//char msg[50];
    //sprintf(msg, " %7d %7d %7d \r\n", p_absoluted_enc_count[0], p_absoluted_enc_count[1], p_absoluted_enc_count[2]);
    //HAL_UART_Transmit( &huart2, msg, strlen(msg) + 1, 0xFFFF);
}
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000204 	.word	0x20000204
 8002c50:	2000020c 	.word	0x2000020c
 8002c54:	20000214 	.word	0x20000214

08002c58 <_Z15GetDiffEncCountPiS_S_>:
// @param2[out]	: 左車輪のエンコーダ値の変化量
// @param3[out]	: 右車輪のエンコーダ値の変化量
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void GetDiffEncCount(int *p_front_diff_enc_count, int *p_left_diff_enc_count, int *p_right_diff_enc_count)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	int absoluted_enc_value[3];
	GetAbsolutedEncCount(&absoluted_enc_value[0], &absoluted_enc_value[1], &absoluted_enc_value[2]);
 8002c64:	f107 0320 	add.w	r3, r7, #32
 8002c68:	f103 0208 	add.w	r2, r3, #8
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	1d19      	adds	r1, r3, #4
 8002c72:	f107 0320 	add.w	r3, r7, #32
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ffb4 	bl	8002be4 <_Z20GetAbsolutedEncCountPiS_S_>

	// 	差分を求める
	int diff_enc_value[3];
	diff_enc_value[0] = absoluted_enc_value[0] - pre_absoluted_enc_value[0];
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
	diff_enc_value[1] = absoluted_enc_value[1] - pre_absoluted_enc_value[1];
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
	diff_enc_value[2] = absoluted_enc_value[2] - pre_absoluted_enc_value[2];
 8002c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	61fb      	str	r3, [r7, #28]

	// 周またぎした場合は修正する
	int straddle_threshold =  (ABSOLUTE_ENC_MAX_VALU + 1) / 2;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	diff_enc_value[0] = ModifyStraddleEncValue(diff_enc_value[0], straddle_threshold);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f860 	bl	8002d6a <_Z22ModifyStraddleEncValueii>
 8002caa:	4603      	mov	r3, r0
 8002cac:	617b      	str	r3, [r7, #20]
	diff_enc_value[1] = ModifyStraddleEncValue(diff_enc_value[1], straddle_threshold);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f859 	bl	8002d6a <_Z22ModifyStraddleEncValueii>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	61bb      	str	r3, [r7, #24]
	diff_enc_value[2] = ModifyStraddleEncValue(diff_enc_value[2], straddle_threshold);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f852 	bl	8002d6a <_Z22ModifyStraddleEncValueii>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	61fb      	str	r3, [r7, #28]

	// 引数ポインタに格納する
	*p_front_diff_enc_count = diff_enc_value[0];
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]
	*p_left_diff_enc_count   = diff_enc_value[1];
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	601a      	str	r2, [r3, #0]
	*p_right_diff_enc_count = diff_enc_value[2];
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]

	// 差分をとるために前の値を格納する
	pre_absoluted_enc_value[0] = absoluted_enc_value[0];
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002ce0:	6013      	str	r3, [r2, #0]
	pre_absoluted_enc_value[1] = absoluted_enc_value[1];
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002ce6:	6053      	str	r3, [r2, #4]
	pre_absoluted_enc_value[2] = absoluted_enc_value[2];
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <_Z15GetDiffEncCountPiS_S_+0xa0>)
 8002cec:	6093      	str	r3, [r2, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000022c 	.word	0x2000022c

08002cfc <_Z17GetWheelMovementsPfS_S_>:
// @param2[out]	: 左車輪の移動量 [m]
// @param3[out]	: 右車輪の移動量 [m]
// @return		: なし
//---------------------------------------------------------------------------------------------------------------------
void GetWheelMovements(float *p_front_wheel_movement, float *p_left_wheel_movement, float *p_right_wheel_movement)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	int diff_enc_cnt[3];
    GetDiffEncCount(&diff_enc_cnt[0], &diff_enc_cnt[1], &diff_enc_cnt[2]);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	f103 0208 	add.w	r2, r3, #8
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	1d19      	adds	r1, r3, #4
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff9c 	bl	8002c58 <_Z15GetDiffEncCountPiS_S_>

    // 各車輪の移動量 [m]
    float wheel_movements[3];
    wheel_movements[0] = ConvertEncoderDiff2Movement(diff_enc_cnt[0]);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f83e 	bl	8002da4 <_Z27ConvertEncoderDiff2Movementi>
 8002d28:	eef0 7a40 	vmov.f32	s15, s0
 8002d2c:	edc7 7a04 	vstr	s15, [r7, #16]
    wheel_movements[1] = ConvertEncoderDiff2Movement(diff_enc_cnt[1]);
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f836 	bl	8002da4 <_Z27ConvertEncoderDiff2Movementi>
 8002d38:	eef0 7a40 	vmov.f32	s15, s0
 8002d3c:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel_movements[2] = ConvertEncoderDiff2Movement(diff_enc_cnt[2]);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f82e 	bl	8002da4 <_Z27ConvertEncoderDiff2Movementi>
 8002d48:	eef0 7a40 	vmov.f32	s15, s0
 8002d4c:	edc7 7a06 	vstr	s15, [r7, #24]

    *p_front_wheel_movement = wheel_movements[0];
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
    *p_left_wheel_movement   = wheel_movements[1];
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	601a      	str	r2, [r3, #0]
    *p_right_wheel_movement = wheel_movements[2];
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_Z22ModifyStraddleEncValueii>:
// @param1[in]	: エンコーダ値の変化量
// @param2[in]	: 周跨ぎ判定の閾値 [count]
// @return			: 修正したエンコーダ値の変化量
//---------------------------------------------------------------------------------------------------------------------
int ModifyStraddleEncValue(int p_diff_enc_value, int p_straddle_threshold)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
	// 正転方向
	if(p_diff_enc_value < -p_straddle_threshold)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	425b      	negs	r3, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	da03      	bge.n	8002d86 <_Z22ModifyStraddleEncValueii+0x1c>
	{
		p_diff_enc_value += ABSOLUTE_ENC_MAX_VALU + 1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d84:	607b      	str	r3, [r7, #4]
	}
	// 逆転方向
	if(p_diff_enc_value > p_straddle_threshold)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	dd03      	ble.n	8002d96 <_Z22ModifyStraddleEncValueii+0x2c>
	{
		p_diff_enc_value -= ABSOLUTE_ENC_MAX_VALU + 1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002d94:	607b      	str	r3, [r7, #4]
	}
	return p_diff_enc_value;
 8002d96:	687b      	ldr	r3, [r7, #4]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_Z27ConvertEncoderDiff2Movementi>:
//
// @param1[out]	: エンコーダ値の変化量 [count]
// @return				: 移動量 [m]
//---------------------------------------------------------------------------------------------------------------------
float ConvertEncoderDiff2Movement(int p_diff_enc_value)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	// 何周したか [周]
	float lap_value = (float)p_diff_enc_value / (float)ABSOLUTE_ENC_MAX_VALU;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002dec <_Z27ConvertEncoderDiff2Movementi+0x48>
 8002dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dbe:	edc7 7a05 	vstr	s15, [r7, #20]
	// 車輪の周囲長 [m]
	float wheel_perimeter = M_PI * WHEEL_DIAMETER;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <_Z27ConvertEncoderDiff2Movementi+0x4c>)
 8002dc4:	613b      	str	r3, [r7, #16]
	// 移動量 [m]
	float movement = lap_value * wheel_perimeter;
 8002dc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a03 	vstr	s15, [r7, #12]

	return movement;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	ee07 3a90 	vmov	s15, r3
	//char msg[50];
    //sprintf(msg, " %7d %7d %7d \r\n", p_absoluted_enc_count[0], p_absoluted_enc_count[1], p_absoluted_enc_count[2]);
    //HAL_UART_Transmit( &huart2, msg, strlen(msg) + 1, 0xFFFF);
}
 8002ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	45fff800 	.word	0x45fff800
 8002df0:	3ec5555c 	.word	0x3ec5555c

08002df4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base() = default;
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa6a 	bl	80032d8 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_ZNSt6vectorIiSaIiEEC1Ev>:
      vector() = default;
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffeb 	bl	8002df4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZN7EncoderC1Ev>:





Encoder::Encoder()
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b09e      	sub	sp, #120	; 0x78
 8002e2c:	af14      	add	r7, sp, #80	; 0x50
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3308      	adds	r3, #8
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ffea 	bl	8002e0e <_ZNSt6vectorIiSaIiEEC1Ev>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fb5f 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3320      	adds	r3, #32
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fb5a 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	332c      	adds	r3, #44	; 0x2c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb55 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3338      	adds	r3, #56	; 0x38
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fb50 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3370      	adds	r3, #112	; 0x70
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe f8e0 	bl	800102c <_ZN6BNO055C1Ev>
{
	// 自己位置初期化
	m_pos.x = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58
	m_pos.y = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
	m_pos.angle = 0;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60

	// エンコーダ4逓倍
	m_encoder_multiplication = 4.0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002e8a:	605a      	str	r2, [r3, #4]

	// メモリ領域を確保する
	for(int i=0; i<ENCODER_QTY; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	dc39      	bgt.n	8002f0a <_ZN7EncoderC1Ev+0xe2>
	{
		m_enc_counts.push_back(0);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60fa      	str	r2, [r7, #12]
 8002e9e:	f107 020c 	add.w	r2, r7, #12
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fa33 	bl	8003310 <_ZNSt6vectorIiSaIiEE9push_backEOi>
		m_wheel_velocities.push_back(0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	332c      	adds	r3, #44	; 0x2c
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	613a      	str	r2, [r7, #16]
 8002eb4:	f107 0210 	add.w	r2, r7, #16
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fa39 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
		m_wheel_angular_velocities.push_back(0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3338      	adds	r3, #56	; 0x38
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	617a      	str	r2, [r7, #20]
 8002eca:	f107 0214 	add.w	r2, r7, #20
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fa2e 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
		m_angle_diffs.push_back(0);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	f107 0218 	add.w	r2, r7, #24
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa23 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
		m_wheel_dist_diffs.push_back(0);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3320      	adds	r3, #32
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	61fa      	str	r2, [r7, #28]
 8002ef6:	f107 021c 	add.w	r2, r7, #28
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa18 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
	for(int i=0; i<ENCODER_QTY; i++)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	e7c2      	b.n	8002e90 <_ZN7EncoderC1Ev+0x68>

	}

	// エンコーダの読み取りを開始する
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002f0a:	213c      	movs	r1, #60	; 0x3c
 8002f0c:	4827      	ldr	r0, [pc, #156]	; (8002fac <_ZN7EncoderC1Ev+0x184>)
 8002f0e:	f006 fd7f 	bl	8009a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002f12:	213c      	movs	r1, #60	; 0x3c
 8002f14:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <_ZN7EncoderC1Ev+0x188>)
 8002f16:	f006 fd7b 	bl	8009a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002f1a:	213c      	movs	r1, #60	; 0x3c
 8002f1c:	4825      	ldr	r0, [pc, #148]	; (8002fb4 <_ZN7EncoderC1Ev+0x18c>)
 8002f1e:	f006 fd77 	bl	8009a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8002f22:	213c      	movs	r1, #60	; 0x3c
 8002f24:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <_ZN7EncoderC1Ev+0x190>)
 8002f26:	f006 fd73 	bl	8009a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8002f2a:	213c      	movs	r1, #60	; 0x3c
 8002f2c:	4823      	ldr	r0, [pc, #140]	; (8002fbc <_ZN7EncoderC1Ev+0x194>)
 8002f2e:	f006 fd6f 	bl	8009a10 <HAL_TIM_Encoder_Start>

	// BNO055
	unsigned char address = 0x28; // 0x28; //0x50; //0x29;
 8002f32:	2328      	movs	r3, #40	; 0x28
 8002f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	//BNO055 _bno055(hi2c1,address);
	bno055.Init(hi2c1,address);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8002f3e:	4c20      	ldr	r4, [pc, #128]	; (8002fc0 <_ZN7EncoderC1Ev+0x198>)
 8002f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f44:	9312      	str	r3, [sp, #72]	; 0x48
 8002f46:	4668      	mov	r0, sp
 8002f48:	f104 030c 	add.w	r3, r4, #12
 8002f4c:	2248      	movs	r2, #72	; 0x48
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f00a f90c 	bl	800d16c <memcpy>
 8002f54:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f7fe f872 	bl	8001042 <_ZN6BNO0554InitE17I2C_HandleTypeDefh>
	//  BNO055の初期角度を取得する
	m_bno_init_rad = bno055.GetYawRadian();
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3370      	adds	r3, #112	; 0x70
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe f89e 	bl	80010a4 <_ZN6BNO05512GetYawRadianEv>
 8002f68:	eef0 7a40 	vmov.f32	s15, s0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	m_pre_bno_rad =  bno055.GetYawRadian();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3370      	adds	r3, #112	; 0x70
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe f894 	bl	80010a4 <_ZN6BNO05512GetYawRadianEv>
 8002f7c:	eef0 7a40 	vmov.f32	s15, s0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	m_bno_rad = 0;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	669a      	str	r2, [r3, #104]	; 0x68


	// 位置取得用エンコーダ1周あたりのパス数
	m_position_enc_ppr = POSITION_ENC_PPR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002f94:	64da      	str	r2, [r3, #76]	; 0x4c
	// エンコーダカウンタの最大値
	m_encoder_count_max_value = ENCODER_COUNT_BUFF_MAX_VALUE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

}
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200003e0 	.word	0x200003e0
 8002fb0:	20000420 	.word	0x20000420
 8002fb4:	20000360 	.word	0x20000360
 8002fb8:	20000320 	.word	0x20000320
 8002fbc:	200002e0 	.word	0x200002e0
 8002fc0:	2000028c 	.word	0x2000028c

08002fc4 <_ZN7Encoder18SetDriveEncoderPPREi>:
//
// @param1[in]	: 設定したい分解能
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::SetDriveEncoderPPR(int p_ppr)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
	m_drive_encoder_per_pulse_rotation = p_ppr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_ZN7Encoder12SetGearRatioEf>:
//
// @param1[in]	: 設定したいギア比
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::SetGearRatio(float p_gear_ratio)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	ed87 0a00 	vstr	s0, [r7]
	m_gear_ratio = p_gear_ratio;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <_ZN7Encoder21SetDriveWheelDiameterEf>:
//
// @param1[in]	: 設定したいホイールの直径[m]
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::SetDriveWheelDiameter(float p_drive_wheel_diameter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	ed87 0a00 	vstr	s0, [r7]
	m_drive_wheel_diameter = p_drive_wheel_diameter;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_ZN7Encoder12GetPositionsEv>:
//
// @param1[in]	: なし
// @return			: 位置姿勢 < x[mm], y[mm], angle[rad] >
//---------------------------------------------------------------------------------------------------------------------
struct_posture_t Encoder::GetPositions()
{
 800301c:	b480      	push	{r7}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6178      	str	r0, [r7, #20]
	return m_pos;
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	3258      	adds	r2, #88	; 0x58
 800302c:	ca07      	ldmia	r2, {r0, r1, r2}
 800302e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003032:	69f9      	ldr	r1, [r7, #28]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	ee06 1a90 	vmov	s13, r1
 800303c:	ee07 2a10 	vmov	s14, r2
 8003040:	ee07 3a90 	vmov	s15, r3
}
 8003044:	eeb0 0a66 	vmov.f32	s0, s13
 8003048:	eef0 0a47 	vmov.f32	s1, s14
 800304c:	eeb0 1a67 	vmov.f32	s2, s15
 8003050:	372c      	adds	r7, #44	; 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <_ZN7Encoder20GetPositionEncCountsEPiS0_>:
// @param1[out]	: X位置計測用エンコーダの変化量
// @param2[out]	: Y位置計測用エンコーダの変化量
// @retrun		:  なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::GetPositionEncCounts(int *p_enc_cnt_x, int *p_enc_cnt_y)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
	// xが基板の上側，yが基板の下側のコネクタ
	int enc_cnt_x = TIM3 -> CNT; // Xエンコーダ値の値を取得する
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x5c>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	617b      	str	r3, [r7, #20]
	TIM3 -> CNT = 0; // リセット
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x5c>)
 8003070:	2200      	movs	r2, #0
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
	int enc_cnt_y = TIM1 -> CNT; // Yエンコーダ値の値を取得する
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x60>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	613b      	str	r3, [r7, #16]
	TIM1 -> CNT = 0;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x60>)
 800307c:	2200      	movs	r2, #0
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

	// 逆回転だった場合はマイナスに修正する
	if(enc_cnt_x > ENCODER_COUNT_BUFF_MAX_VALUE/2)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	db03      	blt.n	8003090 <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x34>
	{
		enc_cnt_x -= ENCODER_COUNT_BUFF_MAX_VALUE + 1;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800308e:	617b      	str	r3, [r7, #20]
	}
	if(enc_cnt_y > ENCODER_COUNT_BUFF_MAX_VALUE/2)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003096:	db03      	blt.n	80030a0 <_ZN7Encoder20GetPositionEncCountsEPiS0_+0x44>
	{
		enc_cnt_y -= ENCODER_COUNT_BUFF_MAX_VALUE + 1;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800309e:	613b      	str	r3, [r7, #16]
	}

	*p_enc_cnt_x = enc_cnt_x;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
	*p_enc_cnt_y = enc_cnt_y;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40010000 	.word	0x40010000

080030c0 <_ZN7Encoder31ConvertPositionEncDiff2MovementEi>:
//
// @param1[out]	: エンコーダ値の変化量 [count]
// @return				: 移動量 [m]
//---------------------------------------------------------------------------------------------------------------------
float Encoder::ConvertPositionEncDiff2Movement(int p_diff_enc_value)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	// 何周したか [周]
	float lap_value = (float)p_diff_enc_value / (float)m_position_enc_ppr;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	edc7 7a05 	vstr	s15, [r7, #20]
	// 車輪の周囲長 [m]
	float wheel_perimeter = M_PI * ENCODER_WHEEL_DIAMETER;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <_ZN7Encoder31ConvertPositionEncDiff2MovementEi+0x50>)
 80030ea:	613b      	str	r3, [r7, #16]
	// 移動量 [m]
	float movement = lap_value * wheel_perimeter;
 80030ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80030f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f8:	edc7 7a03 	vstr	s15, [r7, #12]

	return movement;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	ee07 3a90 	vmov	s15, r3
}
 8003102:	eeb0 0a67 	vmov.f32	s0, s15
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	3e18ce9c 	.word	0x3e18ce9c

08003114 <_ZN7Encoder12GetMovementsEPfS0_>:
// @param2[out]	: 左車輪の移動量 [m]
// @param3[out]	: 右車輪の移動量 [m]
// @return		: なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::GetMovements(float *p_movement_x, float *p_movement_y)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
	int enc_cnt_x;
	int enc_cnt_y;
	// エンコーダのカウント値（変化量）を取得する
	GetPositionEncCounts(&enc_cnt_x, &enc_cnt_y);
 8003120:	f107 0210 	add.w	r2, r7, #16
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff96 	bl	800305c <_ZN7Encoder20GetPositionEncCountsEPiS0_>
	// カウント値[cnt]から移動量[m]に変換する
	float movement_x = ConvertPositionEncDiff2Movement(enc_cnt_x);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4619      	mov	r1, r3
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff ffc3 	bl	80030c0 <_ZN7Encoder31ConvertPositionEncDiff2MovementEi>
 800313a:	ed87 0a07 	vstr	s0, [r7, #28]
	float movement_y = ConvertPositionEncDiff2Movement(enc_cnt_y);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4619      	mov	r1, r3
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff ffbc 	bl	80030c0 <_ZN7Encoder31ConvertPositionEncDiff2MovementEi>
 8003148:	ed87 0a06 	vstr	s0, [r7, #24]
	// 移動方向逆だから負の値を掛ける
	//movement_x *= -1.0;
	//movement_y *= -1.0;

	*p_movement_x = movement_x;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	601a      	str	r2, [r3, #0]
	*p_movement_y = movement_y;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZN7Encoder6UpdateEv>:
//
// @param1[in]	: なし
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Encoder::Update()
{
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	ed2d 8b02 	vpush	{d8}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

	// 自己位置取得用エンコーダ版

	// < BNO055 >
	// yaw角を取得する [rad]
	float now_bno_rad = bno055.GetYawRadian();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3370      	adds	r3, #112	; 0x70
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd ff97 	bl	80010a4 <_ZN6BNO05512GetYawRadianEv>
 8003176:	ed87 0a06 	vstr	s0, [r7, #24]
	// 差分を取得する
	float diff_rad = now_bno_rad - m_pre_bno_rad;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003180:	ed97 7a06 	vldr	s14, [r7, #24]
 8003184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003188:	edc7 7a07 	vstr	s15, [r7, #28]
	// 絶対角度になってるから回転量に変換する
	if(diff_rad <= -M_PI/2.0)
 800318c:	69f8      	ldr	r0, [r7, #28]
 800318e:	f7fd f9fb 	bl	8000588 <__aeabi_f2d>
 8003192:	a34b      	add	r3, pc, #300	; (adr r3, 80032c0 <_ZN7Encoder6UpdateEv+0x160>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd fcca 	bl	8000b30 <__aeabi_dcmple>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <_ZN7Encoder6UpdateEv+0x64>
	{
		diff_rad += 2*M_PI;
 80031a2:	69f8      	ldr	r0, [r7, #28]
 80031a4:	f7fd f9f0 	bl	8000588 <__aeabi_f2d>
 80031a8:	a347      	add	r3, pc, #284	; (adr r3, 80032c8 <_ZN7Encoder6UpdateEv+0x168>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f7fd f88d 	bl	80002cc <__adddf3>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd fd35 	bl	8000c28 <__aeabi_d2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e01a      	b.n	80031fa <_ZN7Encoder6UpdateEv+0x9a>
	}
	else if(diff_rad >= M_PI/2.0)
 80031c4:	69f8      	ldr	r0, [r7, #28]
 80031c6:	f7fd f9df 	bl	8000588 <__aeabi_f2d>
 80031ca:	a341      	add	r3, pc, #260	; (adr r3, 80032d0 <_ZN7Encoder6UpdateEv+0x170>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fcb8 	bl	8000b44 <__aeabi_dcmpge>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00f      	beq.n	80031fa <_ZN7Encoder6UpdateEv+0x9a>
	{
		diff_rad -= 2*M_PI;
 80031da:	69f8      	ldr	r0, [r7, #28]
 80031dc:	f7fd f9d4 	bl	8000588 <__aeabi_f2d>
 80031e0:	a339      	add	r3, pc, #228	; (adr r3, 80032c8 <_ZN7Encoder6UpdateEv+0x168>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f7fd f86f 	bl	80002c8 <__aeabi_dsub>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fd19 	bl	8000c28 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	61fb      	str	r3, [r7, #28]

	// < 位置取得用エンコーダ >
	float diff_local_x; // ロボット座標系での移動量x[m]
	float diff_local_y; // ロボット座標系での移動量y[m]
	// ロボット座標系での移動量を取得する
	GetMovements(&diff_local_x, &diff_local_y);
 80031fa:	f107 0210 	add.w	r2, r7, #16
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff85 	bl	8003114 <_ZN7Encoder12GetMovementsEPfS0_>
	// 移動量をロボット座標系からグローバル座標系へ変換する
	float diff_global_x;
	float diff_global_y;
	Rotation(diff_local_x, diff_local_y, m_bno_rad + (diff_rad/2.0), &diff_global_x, &diff_global_y);
 800320a:	ed97 8a05 	vldr	s16, [r7, #20]
 800320e:	edd7 8a04 	vldr	s17, [r7, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f9b6 	bl	8000588 <__aeabi_f2d>
 800321c:	4604      	mov	r4, r0
 800321e:	460d      	mov	r5, r1
 8003220:	69f8      	ldr	r0, [r7, #28]
 8003222:	f7fd f9b1 	bl	8000588 <__aeabi_f2d>
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	f7fd fb2d 	bl	800088c <__aeabi_ddiv>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4620      	mov	r0, r4
 8003238:	4629      	mov	r1, r5
 800323a:	f7fd f847 	bl	80002cc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f7fd fcef 	bl	8000c28 <__aeabi_d2f>
 800324a:	4604      	mov	r4, r0
 800324c:	f107 0208 	add.w	r2, r7, #8
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	ee01 4a10 	vmov	s2, r4
 800325c:	eef0 0a68 	vmov.f32	s1, s17
 8003260:	eeb0 0a48 	vmov.f32	s0, s16
 8003264:	f7fe fa40 	bl	80016e8 <_Z8RotationfffPfS_>
	//Rotation(diff_local_x, diff_local_y, m_bno_rad + diff_rad, &diff_global_x, &diff_global_y);


	// 回転量を加算する
	m_bno_rad += diff_rad;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800326e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	// 前の値を格納しておく
	m_pre_bno_rad = now_bno_rad;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	66da      	str	r2, [r3, #108]	; 0x6c

	// 計算した値を格納する
	m_pos.x += diff_global_x; // [m]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003288:	edd7 7a03 	vldr	s15, [r7, #12]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	m_pos.y += diff_global_y; // [m]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800329c:	edd7 7a02 	vldr	s15, [r7, #8]
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	m_pos.angle = m_bno_rad; // [rad]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

	//HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg) + 1, 0xFFFF);

	//char msg[] = "Hello!\r\n";
	//HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg) + 1, 0xFFFF);
}
 80032b2:	bf00      	nop
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	ecbd 8b02 	vpop	{d8}
 80032bc:	bdb0      	pop	{r4, r5, r7, pc}
 80032be:	bf00      	nop
 80032c0:	54442d18 	.word	0x54442d18
 80032c4:	bff921fb 	.word	0xbff921fb
 80032c8:	54442d18 	.word	0x54442d18
 80032cc:	401921fb 	.word	0x401921fb
 80032d0:	54442d18 	.word	0x54442d18
 80032d4:	3ff921fb 	.word	0x3ff921fb

080032d8 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f874 	bl	80033ce <_ZNSaIiEC1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f87c 	bl	80033e6 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8b0 	bl	8003466 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZNSt6vectorIiSaIiEE9push_backEOi>:
      push_back(value_type&& __x)
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f000 f8ae 	bl	800347c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003320:	4603      	mov	r3, r0
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8b4 	bl	8003492 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_>
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800333c:	6838      	ldr	r0, [r7, #0]
 800333e:	f000 f8d6 	bl	80034ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8003342:	4603      	mov	r3, r0
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8dc 	bl	8003504 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800335e:	687c      	ldr	r4, [r7, #4]
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f7fe feed 	bl	8002140 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003366:	4605      	mov	r5, r0
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f801 	bl	8002372 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003370:	4602      	mov	r2, r0
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f8f1 	bl	8003560 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	461a      	mov	r2, r3
 8003384:	4629      	mov	r1, r5
 8003386:	4620      	mov	r0, r4
 8003388:	f000 f8f8 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ffb1 	bl	80032f8 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	f000 f904 	bl	80035a4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800339c:	4605      	mov	r5, r0
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	f000 f914 	bl	80035cc <_ZNKSt6vectorIfSaIfEE3endEv>
 80033a4:	4606      	mov	r6, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fafc 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80033b2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80033b4:	4622      	mov	r2, r4
 80033b6:	4631      	mov	r1, r6
 80033b8:	4628      	mov	r0, r5
 80033ba:	f000 f91b 	bl	80035f4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 80033be:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	605a      	str	r2, [r3, #4]
      }
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ce <_ZNSaIiEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f91d 	bl	8003616 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
	{ }
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
	if (__p)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f900 	bl	800362c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8f6 	bl	800364a <_ZSt8_DestroyIPiEvT_S1_>
    }
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8003492:	b5b0      	push	{r4, r5, r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d011      	beq.n	80034cc <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80034a8:	687c      	ldr	r4, [r7, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685d      	ldr	r5, [r3, #4]
 80034ae:	6838      	ldr	r0, [r7, #0]
 80034b0:	f000 f8d8 	bl	8003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	4629      	mov	r1, r5
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 f8dd 	bl	800367a <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	1d1a      	adds	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]
      }
 80034ca:	e00c      	b.n	80034e6 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8e7 	bl	80036a0 <_ZNSt6vectorIiSaIiEE3endEv>
 80034d2:	4604      	mov	r4, r0
 80034d4:	6838      	ldr	r0, [r7, #0]
 80034d6:	f000 f8c5 	bl	8003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	4621      	mov	r1, r4
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f905 	bl	80036f0 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>
      }
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bdb0      	pop	{r4, r5, r7, pc}

080034ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d011      	beq.n	800353e <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800351a:	687c      	ldr	r4, [r7, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685d      	ldr	r5, [r3, #4]
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	f000 f9a1 	bl	8003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	4629      	mov	r1, r5
 800352c:	4620      	mov	r0, r4
 800352e:	f000 f9a6 	bl	800387e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]
      }
 800353c:	e00c      	b.n	8003558 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe fa4c 	bl	80019dc <_ZNSt6vectorIfSaIfEE3endEv>
 8003544:	4604      	mov	r4, r0
 8003546:	6838      	ldr	r0, [r7, #0]
 8003548:	f000 f98e 	bl	8003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4621      	mov	r1, r4
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f9a6 	bl	80038a4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bdb0      	pop	{r4, r5, r7, pc}

08003560 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fa54 	bl	8003a1c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fa60 	bl	8003a52 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fa6e 	bl	8003a76 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	f107 020c 	add.w	r2, r7, #12
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fa75 	bl	8003aac <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	f107 020c 	add.w	r2, r7, #12
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fa61 	bl	8003aac <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fa60 	bl	8003acc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800360c:	4603      	mov	r3, r0
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fa57 	bl	8003af0 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa57 	bl	8003b0a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffec 	bl	8003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fa44 	bl	8003b20 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa4a 	bl	8003b4c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>:
      _S_use_relocate()
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f805 	bl	80036d8 <_ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80036ce:	4603      	mov	r3, r0
      }
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80036e0:	2301      	movs	r3, #1
      }
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80036f0:	b5b0      	push	{r4, r5, r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80036fc:	4a59      	ldr	r2, [pc, #356]	; (8003864 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x174>)
 80036fe:	2101      	movs	r1, #1
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa33 	bl	8003b6c <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>
 8003706:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa70 	bl	8003bfa <_ZNSt6vectorIiSaIiEE5beginEv>
 800371a:	4603      	mov	r3, r0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	f107 0214 	add.w	r2, r7, #20
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fa76 	bl	8003c1a <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800372e:	4603      	mov	r3, r0
 8003730:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa84 	bl	8003c44 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 800373c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8003742:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	18d5      	adds	r5, r2, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff89 	bl	8003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	4629      	mov	r1, r5
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff ff8e 	bl	800367a <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003762:	f7ff ffae 	bl	80036c2 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d027      	beq.n	80037bc <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800376c:	f107 0308 	add.w	r3, r7, #8
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa8f 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8003776:	4603      	mov	r3, r0
 8003778:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fe59 	bl	8003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003782:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4621      	mov	r1, r4
 8003788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378a:	f000 fa6f 	bl	8003c6c <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>
 800378e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	3304      	adds	r3, #4
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fa7a 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80037a0:	4603      	mov	r3, r0
 80037a2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fe44 	bl	8003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80037ac:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80037ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b0:	6a39      	ldr	r1, [r7, #32]
 80037b2:	4620      	mov	r0, r4
 80037b4:	f000 fa5a 	bl	8003c6c <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>
 80037b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80037ba:	e026      	b.n	800380a <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fa67 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80037c6:	4603      	mov	r3, r0
 80037c8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fe31 	bl	8003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80037d2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4621      	mov	r1, r4
 80037d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037da:	f000 fa66 	bl	8003caa <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 80037de:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	3304      	adds	r3, #4
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fa52 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80037f0:	4603      	mov	r3, r0
 80037f2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fe1c 	bl	8003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80037fc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	6a39      	ldr	r1, [r7, #32]
 8003802:	4620      	mov	r0, r4
 8003804:	f000 fa51 	bl	8003caa <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8003808:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800380a:	f7ff ff5a 	bl	80036c2 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>
 800380e:	4603      	mov	r3, r0
 8003810:	f083 0301 	eor.w	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fe09 	bl	8003434 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	6a39      	ldr	r1, [r7, #32]
 8003828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800382a:	f7ff fe0e 	bl	800344a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 800382e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800383a:	461a      	mov	r2, r3
 800383c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800383e:	f7ff fde6 	bl	800340e <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      this->_M_impl._M_start = __new_start;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
    }
 800385a:	bf00      	nop
 800385c:	3730      	adds	r7, #48	; 0x30
 800385e:	46bd      	mov	sp, r7
 8003860:	bdb0      	pop	{r4, r5, r7, pc}
 8003862:	bf00      	nop
 8003864:	08012248 	.word	0x08012248

08003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ffec 	bl	8003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa20 	bl	8003cdc <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80038a4:	b5b0      	push	{r4, r5, r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80038b0:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x174>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fe fa3e 	bl	8001d36 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80038ba:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7fe fa7b 	bl	8001dc4 <_ZNSt6vectorIfSaIfEE5beginEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	f107 0214 	add.w	r2, r7, #20
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fa81 	bl	8001de4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80038e2:	4603      	mov	r3, r0
 80038e4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fa8f 	bl	8001e0e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80038f0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80038f6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	18d5      	adds	r5, r2, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ffb1 	bl	8003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4629      	mov	r1, r5
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff ffb6 	bl	800387e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003916:	f7fe f872 	bl	80019fe <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d027      	beq.n	8003970 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fa9a 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800392a:	4603      	mov	r3, r0
 800392c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe f83a 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003936:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4621      	mov	r1, r4
 800393c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393e:	f7fe fa7a 	bl	8001e36 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003942:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	3304      	adds	r3, #4
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fa85 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003954:	4603      	mov	r3, r0
 8003956:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe f825 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003960:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	6a39      	ldr	r1, [r7, #32]
 8003966:	4620      	mov	r0, r4
 8003968:	f7fe fa65 	bl	8001e36 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800396c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800396e:	e026      	b.n	80039be <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fa72 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800397a:	4603      	mov	r3, r0
 800397c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe f812 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003986:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4621      	mov	r1, r4
 800398c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398e:	f7fe fa71 	bl	8001e74 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003992:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	3304      	adds	r3, #4
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fa5d 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fffd 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80039b0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	6a39      	ldr	r1, [r7, #32]
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7fe fa5c 	bl	8001e74 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80039bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80039be:	f7fe f81e 	bl	80019fe <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f083 0301 	eor.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd ffea 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	6a39      	ldr	r1, [r7, #32]
 80039dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039de:	f7fd ffef 	bl	80019c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 80039e2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80039ee:	461a      	mov	r2, r3
 80039f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f2:	f7fd ffc7 	bl	8001984 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a00:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	441a      	add	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
    }
 8003a0e:	bf00      	nop
 8003a10:	3730      	adds	r7, #48	; 0x30
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bdb0      	pop	{r4, r5, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08012248 	.word	0x08012248

08003a1c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f804 	bl	8003a36 <_ZNSaIfEC1ERKS_>
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f960 	bl	8003d08 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffe9 	bl	8003a36 <_ZNSaIfEC1ERKS_>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd ff78 	bl	800195c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003a80:	6839      	ldr	r1, [r7, #0]
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe f9c3 	bl	8001e0e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
      }
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f91d 	bl	8003d20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003ae6:	4603      	mov	r3, r0
    }
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
      deallocate(pointer __p, size_type)
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003afc:	68b8      	ldr	r0, [r7, #8]
 8003afe:	f007 fd3f 	bl	800b580 <_ZdlPv>
      }
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fd99 	bl	8003664 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003b32:	4603      	mov	r3, r0
 8003b34:	681c      	ldr	r4, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	2004      	movs	r0, #4
 8003b3c:	f7fd fc7e 	bl	800143c <_ZnwjPv>
 8003b40:	4603      	mov	r3, r0
 8003b42:	601c      	str	r4, [r3, #0]
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f8e1 	bl	8003d40 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003b7e:	4604      	mov	r4, r0
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f8ee 	bl	8003d62 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	1ae2      	subs	r2, r4, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bf34      	ite	cc
 8003b90:	2301      	movcc	r3, #1
 8003b92:	2300      	movcs	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f007 fd0b 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8de 	bl	8003d62 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f8da 	bl	8003d62 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	f107 0208 	add.w	r2, r7, #8
 8003bb6:	f107 0310 	add.w	r3, r7, #16
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe facf 	bl	8002160 <_ZSt3maxIjERKT_S2_S2_>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4423      	add	r3, r4
 8003bc8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f8c9 	bl	8003d62 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d306      	bcc.n	8003be6 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x7a>
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f8b1 	bl	8003d40 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d904      	bls.n	8003bf0 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x84>
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f8aa 	bl	8003d40 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	e000      	b.n	8003bf2 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x86>
 8003bf0:	697b      	ldr	r3, [r7, #20]
      }
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}

08003bfa <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ff9e 	bl	8003b4c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c1a:	b590      	push	{r4, r7, lr}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f835 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	681c      	ldr	r4, [r3, #0]
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 f830 	bl	8003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1ae3      	subs	r3, r4, r3
 8003c3a:	109b      	asrs	r3, r3, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6839      	ldr	r1, [r7, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f892 	bl	8003d82 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	e000      	b.n	8003c64 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8003c62:	2300      	movs	r3, #0
      }
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003c7a:	f88d 4000 	strb.w	r4, [sp]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f88b 	bl	8003da0 <_ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE>
 8003c8a:	4603      	mov	r3, r0
      }
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}

08003c94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003caa:	b590      	push	{r4, r7, lr}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f883 	bl	8003dc4 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	68b8      	ldr	r0, [r7, #8]
 8003cc2:	f000 f87f 	bl	8003dc4 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f000 f888 	bl	8003de2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>
 8003cd2:	4603      	mov	r3, r0
    }
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}

08003cdc <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fdbd 	bl	8003868 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	681c      	ldr	r4, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	2004      	movs	r0, #4
 8003cf8:	f7fd fba0 	bl	800143c <_ZnwjPv>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	601c      	str	r4, [r3, #0]
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}

08003d08 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f867 	bl	8003e04 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f88c 	bl	8003e68 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f86e 	bl	8003e34 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	109b      	asrs	r3, r3, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f874 	bl	8003e7e <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f880 	bl	8003eba <_ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8003dba:	4603      	mov	r3, r0
      }
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003dcc:	f107 030c 	add.w	r3, r7, #12
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f88e 	bl	8003ef4 <_ZNSt13move_iteratorIPiEC1ES0_>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f88c 	bl	8003f12 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f890 	bl	8003f36 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e16:	4604      	mov	r4, r0
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f000 f88c 	bl	8003f36 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4620      	mov	r0, r4
 8003e26:	f000 f891 	bl	8003f4c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003e2a:	4603      	mov	r3, r0
    }
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}

08003e34 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003e3c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003e40:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8a5 	bl	8003f92 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003e4c:	f107 0208 	add.w	r2, r7, #8
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fb9a 	bl	8002590 <_ZSt3minIjERKT_S2_S2_>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	681b      	ldr	r3, [r3, #0]
      }
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f88d 	bl	8003faa <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bf8c      	ite	hi
 8003e98:	2301      	movhi	r3, #1
 8003e9a:	2300      	movls	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003ea2:	f007 fb82 	bl	800b5aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f007 fb6a 	bl	800b584 <_Znwj>
 8003eb0:	4603      	mov	r3, r0
      }
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003eba:	b5b0      	push	{r4, r5, r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f87a 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 8003ece:	4604      	mov	r4, r0
 8003ed0:	68b8      	ldr	r0, [r7, #8]
 8003ed2:	f000 f876 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f872 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f000 f877 	bl	8003fd8 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003eea:	4603      	mov	r3, r0
    }
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bdb0      	pop	{r4, r5, r7, pc}

08003ef4 <_ZNSt13move_iteratorIPiEC1ES0_>:
      move_iterator(iterator_type __i)
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f874 	bl	8004014 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>
 8003f2c:	4603      	mov	r3, r0
    }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003f4c:	b5b0      	push	{r4, r5, r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f86b 	bl	8004034 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003f5e:	4604      	mov	r4, r0
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f000 f867 	bl	8004034 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003f66:	4605      	mov	r5, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fb30 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4629      	mov	r1, r5
 8003f76:	4620      	mov	r0, r4
 8003f78:	f000 f86a 	bl	8004050 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fcec 	bl	8002960 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8003f88:	4603      	mov	r3, r0
    }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}

08003f92 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f805 	bl	8003faa <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003fb2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	109b      	asrs	r3, r3, #2
 8003fee:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dd06      	ble.n	8004004 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f009 f8c2 	bl	800d188 <memmove>
      return __result + __count;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
    }
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f825 	bl	8004074 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 800402a:	4603      	mov	r3, r0
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f830 	bl	80040a4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004044:	4603      	mov	r3, r0
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f828 	bl	80040ba <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800406a:	4603      	mov	r3, r0
    }
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f837 	bl	80040f4 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004086:	4604      	mov	r4, r0
 8004088:	68b8      	ldr	r0, [r7, #8]
 800408a:	f000 f833 	bl	80040f4 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800408e:	4603      	mov	r3, r0
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4619      	mov	r1, r3
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f83e 	bl	8004116 <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>
 800409a:	4603      	mov	r3, r0
    }
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}

080040a4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	109b      	asrs	r3, r3, #2
 80040ce:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f009 f852 	bl	800d188 <memmove>
	  return __result + _Num;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
	}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f82c 	bl	800415c <_ZNKSt13move_iteratorIPiE4baseEv>
 8004104:	4603      	mov	r3, r0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f834 	bl	8004174 <_ZSt12__miter_baseIPiET_S1_>
 800410c:	4603      	mov	r3, r0
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004116:	b5b0      	push	{r4, r5, r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff4d 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 8004128:	4604      	mov	r4, r0
 800412a:	68b8      	ldr	r0, [r7, #8]
 800412c:	f7ff ff49 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 8004130:	4605      	mov	r5, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff44 	bl	8003fc2 <_ZSt12__niter_baseIPiET_S1_>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	4629      	mov	r1, r5
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f822 	bl	800418a <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>
 8004146:	4602      	mov	r2, r0
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f82e 	bl	80041ae <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8004152:	4603      	mov	r3, r0
    }
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bdb0      	pop	{r4, r5, r7, pc}

0800415c <_ZNKSt13move_iteratorIPiE4baseEv>:
      base() const
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZSt12__miter_baseIPiET_S1_>:
    __miter_base(_Iterator __it)
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f811 	bl	80041c6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 80041a4:	4603      	mov	r3, r0
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	109b      	asrs	r3, r3, #2
 80041da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f008 ffcc 	bl	800d188 <memmove>
	  return __result + _Num;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
      }
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_ZN6SerialC1Ev>:
#include "Serial.h"
#include "usart.h"
#include "regex"

// DMAの初期化いれる場合，Serial Classをグローバルで宣言するとDMA使えないから注意
Serial::Serial()
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	336c      	adds	r3, #108	; 0x6c
 800422c:	4618      	mov	r0, r3
 800422e:	f007 fa8c 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3384      	adds	r3, #132	; 0x84
 8004236:	4618      	mov	r0, r3
 8004238:	f007 fa87 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	339c      	adds	r3, #156	; 0x9c
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd f95e 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
{
	// 今のところ3軸限定で使用している
	m_speed_control_values.push_back(0);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	339c      	adds	r3, #156	; 0x9c
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	60ba      	str	r2, [r7, #8]
 8004250:	f107 0208 	add.w	r2, r7, #8
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f86b 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
	m_speed_control_values.push_back(0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	339c      	adds	r3, #156	; 0x9c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	f107 020c 	add.w	r2, r7, #12
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff f860 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
	m_speed_control_values.push_back(0);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	339c      	adds	r3, #156	; 0x9c
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	613a      	str	r2, [r7, #16]
 800427c:	f107 0210 	add.w	r2, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f855 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>

	m_received_str = "0,0,0";
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3384      	adds	r3, #132	; 0x84
 800428c:	4910      	ldr	r1, [pc, #64]	; (80042d0 <_ZN6SerialC1Ev+0xb0>)
 800428e:	4618      	mov	r0, r3
 8004290:	f007 fb3f 	bl	800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	m_read_index_end = 0;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	605a      	str	r2, [r3, #4]
	for(int i=0; i<SERIAL_RECEIVE_BUFFER_SIZE; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b63      	cmp	r3, #99	; 0x63
 80042a2:	dc09      	bgt.n	80042b8 <_ZN6SerialC1Ev+0x98>
		serialData[i] = 0;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	3308      	adds	r3, #8
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<SERIAL_RECEIVE_BUFFER_SIZE; i++)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e7f2      	b.n	800429e <_ZN6SerialC1Ev+0x7e>
	// DMA
	HAL_UART_Receive_DMA(&huart2, serialData, SERIAL_RECEIVE_BUFFER_SIZE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3308      	adds	r3, #8
 80042bc:	2264      	movs	r2, #100	; 0x64
 80042be:	4619      	mov	r1, r3
 80042c0:	4804      	ldr	r0, [pc, #16]	; (80042d4 <_ZN6SerialC1Ev+0xb4>)
 80042c2:	f006 fa15 	bl	800a6f0 <HAL_UART_Receive_DMA>
}
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08012264 	.word	0x08012264
 80042d4:	200005e0 	.word	0x200005e0

080042d8 <_ZN6Serial14ReadBuffQtyDMAEv>:
// @brief	: 受信のリングバッファの未読データ数を取得する
// @date	: 2021/03/06
//
// @return			: 未読データ数
//---------------------------------------------------------------------------------------------------------------------
int Serial::ReadBuffQtyDMA(){
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	// indexを取得する
	int read_index_begin = huart2.hdmarx->Instance->NDTR; //index取得
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <_ZN6Serial14ReadBuffQtyDMAEv+0x40>)
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	60bb      	str	r3, [r7, #8]
	//受信データの先頭位置を計算する
	read_index_begin = SERIAL_RECEIVE_BUFFER_SIZE - read_index_begin;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80042f0:	60bb      	str	r3, [r7, #8]
	//読み込んでいないデータの数を計算する
	int read_buff_qty = read_index_begin - m_read_index_end;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	60fb      	str	r3, [r7, #12]
	if(read_buff_qty < 0)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da02      	bge.n	8004308 <_ZN6Serial14ReadBuffQtyDMAEv+0x30>
	{
		read_buff_qty += SERIAL_RECEIVE_BUFFER_SIZE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3364      	adds	r3, #100	; 0x64
 8004306:	60fb      	str	r3, [r7, #12]
	}
	return read_buff_qty;
 8004308:	68fb      	ldr	r3, [r7, #12]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	200005e0 	.word	0x200005e0

0800431c <_ZN6Serial10GetBuffDMAEv>:
// @brief	: 受信バッファから1文字取得する
// @date	: 2021/03/06
//
// @return			: 取得した受信データ
//---------------------------------------------------------------------------------------------------------------------
uint8_t Serial::GetBuffDMA(){//データ受信
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	uint8_t read_char = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	74fb      	strb	r3, [r7, #19]

	// indexを取得する
	int read_index_begin = huart2.hdmarx->Instance->NDTR;
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <_ZN6Serial10GetBuffDMAEv+0x70>)
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
	read_index_begin = SERIAL_RECEIVE_BUFFER_SIZE - read_index_begin;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004338:	60fb      	str	r3, [r7, #12]

	// 読み込んでいないデータ数を計算する
	int read_buff_qty = read_index_begin - m_read_index_end;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	617b      	str	r3, [r7, #20]
	if(read_buff_qty < 0)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da02      	bge.n	8004350 <_ZN6Serial10GetBuffDMAEv+0x34>
	{
		read_buff_qty += SERIAL_RECEIVE_BUFFER_SIZE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3364      	adds	r3, #100	; 0x64
 800434e:	617b      	str	r3, [r7, #20]
	}

	// 読み込んでいないデータ数が無い場合はおわり
	if(read_buff_qty < 1)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	dc01      	bgt.n	800435a <_ZN6Serial10GetBuffDMAEv+0x3e>
	{
		return read_char;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	e012      	b.n	8004380 <_ZN6Serial10GetBuffDMAEv+0x64>
	}
	// バッファから1文字取得する
	read_char = serialData[m_read_index_end];
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	7a1b      	ldrb	r3, [r3, #8]
 8004364:	74fb      	strb	r3, [r7, #19]
	// リングバッファのインデックスを1つ上げる
	m_read_index_end++;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
	// 容量サイズを超えたら0に戻す
	if(m_read_index_end == SERIAL_RECEIVE_BUFFER_SIZE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b64      	cmp	r3, #100	; 0x64
 8004376:	d102      	bne.n	800437e <_ZN6Serial10GetBuffDMAEv+0x62>
	{
		m_read_index_end = 0;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
	}

	return read_char;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	200005e0 	.word	0x200005e0

08004390 <_ZN6Serial14StockStringDMAEv>:
{
	m_receiving_str += p_received_str;
}

void Serial::StockStringDMA()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	int buff_qty =ReadBuffQtyDMA();
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff9d 	bl	80042d8 <_ZN6Serial14ReadBuffQtyDMAEv>
 800439e:	6238      	str	r0, [r7, #32]
	string serial_str;
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	4618      	mov	r0, r3
 80043a6:	f007 f9d0 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	for(int i=0; i < buff_qty; i++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	da0e      	bge.n	80043d4 <_ZN6Serial14StockStringDMAEv+0x44>
	{
		serial_str += GetBuffDMA();
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffb0 	bl	800431c <_ZN6Serial10GetBuffDMAEv>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f007 fa10 	bl	800b7ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(int i=0; i < buff_qty; i++)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	3301      	adds	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e7ec      	b.n	80043ae <_ZN6Serial14StockStringDMAEv+0x1e>
	}
	m_receiving_str += serial_str;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	336c      	adds	r3, #108	; 0x6c
 80043d8:	f107 0208 	add.w	r2, r7, #8
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f007 fac3 	bl	800b96a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	string serial_str;
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f007 f9cf 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80043ee:	bf00      	nop
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9a6 	bl	8004750 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <_ZN6Serial6UpdateEv>:
//
// @param1[in]	: []
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void Serial::Update()
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b0f1      	sub	sp, #452	; 0x1c4
 8004414:	af02      	add	r7, sp, #8
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	6018      	str	r0, [r3, #0]
	char msg[256];
	// DMAでシリアル受信する
	StockStringDMA();
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	f7ff ffb7 	bl	8004390 <_ZN6Serial14StockStringDMAEv>

    //sprintf(msg, "ing size %d -> [%s]\n", m_receiving_str.size(), m_receiving_str.c_str());
    //HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg), 0xFFFF);

	if(m_receiving_str.size() < 6)
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	336c      	adds	r3, #108	; 0x6c
 8004428:	4618      	mov	r0, r3
 800442a:	f007 f9bb 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800442e:	4603      	mov	r3, r0
 8004430:	2b05      	cmp	r3, #5
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 8154 	bne.w	80046e8 <_ZN6Serial6UpdateEv+0x2d8>
	{
		return;
	}

    // 文字列の最後が終端文字のとき
    bool is_serial_line_end = false;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
    if(m_receiving_str[m_receiving_str.size()-1] == '\n' || m_receiving_str[m_receiving_str.size()-1] == '\r')
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	336c      	adds	r3, #108	; 0x6c
 8004454:	4618      	mov	r0, r3
 8004456:	f007 f9a5 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800445a:	4603      	mov	r3, r0
 800445c:	3b01      	subs	r3, #1
 800445e:	4619      	mov	r1, r3
 8004460:	4620      	mov	r0, r4
 8004462:	f007 f9a1 	bl	800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004466:	4603      	mov	r3, r0
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b0a      	cmp	r3, #10
 800446c:	d013      	beq.n	8004496 <_ZN6Serial6UpdateEv+0x86>
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	336c      	adds	r3, #108	; 0x6c
 800447c:	4618      	mov	r0, r3
 800447e:	f007 f991 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004482:	4603      	mov	r3, r0
 8004484:	3b01      	subs	r3, #1
 8004486:	4619      	mov	r1, r3
 8004488:	4620      	mov	r0, r4
 800448a:	f007 f98d 	bl	800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800448e:	4603      	mov	r3, r0
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b0d      	cmp	r3, #13
 8004494:	d101      	bne.n	800449a <_ZN6Serial6UpdateEv+0x8a>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <_ZN6Serial6UpdateEv+0x8c>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <_ZN6Serial6UpdateEv+0x96>
    {
    	is_serial_line_end = true;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
    }
	// 文字列を終端文字で分割する
	vector<string> splited_strings =  SplitString2Token(m_receiving_str, '\r', '\n');
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80044ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f007 fa83 	bl	800b9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80044ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80044be:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80044c2:	230a      	movs	r3, #10
 80044c4:	220d      	movs	r2, #13
 80044c6:	f7fd f96f 	bl	80017a8 <_Z17SplitString2TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>
 80044ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80044ce:	4618      	mov	r0, r3
 80044d0:	f007 f95c 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	//	HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg) + 1, 0xFFFF);
	//}


	// 途中の文字列を残しておく
	if(splited_strings.size() < 1)
 80044d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fecd 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <_ZN6Serial6UpdateEv+0xe2>
 80044ee:	2400      	movs	r4, #0
	{
		return;
 80044f0:	e0f3      	b.n	80046da <_ZN6Serial6UpdateEv+0x2ca>
	}

	// 最後が終端文字のときは1ライン分受信し終わったとき
	string target_strings;
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4618      	mov	r0, r3
 80044f8:	f007 f927 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	if(is_serial_line_end == true)
 80044fc:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11b      	bne.n	800453c <_ZN6Serial6UpdateEv+0x12c>
	{
		m_receiving_str = "";
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	336c      	adds	r3, #108	; 0x6c
 800450a:	497a      	ldr	r1, [pc, #488]	; (80046f4 <_ZN6Serial6UpdateEv+0x2e4>)
 800450c:	4618      	mov	r0, r3
 800450e:	f007 fa00 	bl	800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		target_strings = splited_strings[splited_strings.size() - 1];
 8004512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd feae 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800451c:	4603      	mov	r3, r0
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f93c 	bl	80047a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800452c:	4602      	mov	r2, r0
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f007 f92f 	bl	800b798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800453a:	e038      	b.n	80045ae <_ZN6Serial6UpdateEv+0x19e>
	}
	// 終端文字じゃないときは受信が1ライン分の途中のとき
	else
	{
		// 途中までの文字列を残しておく
		m_receiving_str = splited_strings[splited_strings.size()-1];
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8004544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fe95 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800454e:	4603      	mov	r3, r0
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f923 	bl	80047a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800455e:	4603      	mov	r3, r0
 8004560:	4619      	mov	r1, r3
 8004562:	4620      	mov	r0, r4
 8004564:	f007 f918 	bl	800b798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

		// 中途半端なのしかなかったとき
		if(splited_strings.size() == 1)
 8004568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800456c:	4618      	mov	r0, r3
 800456e:	f7fd fe83 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <_ZN6Serial6UpdateEv+0x176>
 8004582:	2400      	movs	r4, #0
		{
			return;
 8004584:	e09f      	b.n	80046c6 <_ZN6Serial6UpdateEv+0x2b6>
		}
		else
		{
			// 途中の文字列の1つ前
			target_strings = splited_strings[splited_strings.size() - 2];
 8004586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fe74 	bl	8002278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8004590:	4603      	mov	r3, r0
 8004592:	1e9a      	subs	r2, r3, #2
 8004594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f902 	bl	80047a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f007 f8f5 	bl	800b798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		}
	}

	// 各軸の文字列
	vector<string> axis_value_strings = {"", "", ""};
 80045ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f006 fff7 	bl	800b5a6 <_ZNSaIcEC1Ev>
 80045b8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80045bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045c0:	494c      	ldr	r1, [pc, #304]	; (80046f4 <_ZN6Serial6UpdateEv+0x2e4>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f007 fa30 	bl	800ba28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80045c8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f006 ffea 	bl	800b5a6 <_ZNSaIcEC1Ev>
 80045d2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80045d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045da:	3318      	adds	r3, #24
 80045dc:	4945      	ldr	r1, [pc, #276]	; (80046f4 <_ZN6Serial6UpdateEv+0x2e4>)
 80045de:	4618      	mov	r0, r3
 80045e0:	f007 fa22 	bl	800ba28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80045e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f006 ffdc 	bl	800b5a6 <_ZNSaIcEC1Ev>
 80045ee:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80045f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045f6:	3330      	adds	r3, #48	; 0x30
 80045f8:	493e      	ldr	r1, [pc, #248]	; (80046f4 <_ZN6Serial6UpdateEv+0x2e4>)
 80045fa:	4618      	mov	r0, r3
 80045fc:	f007 fa14 	bl	800ba28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004600:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004604:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004608:	2303      	movs	r3, #3
 800460a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800460e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fa09 	bl	8001a2a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8004618:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800461c:	f107 0008 	add.w	r0, r7, #8
 8004620:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004624:	ca06      	ldmia	r2, {r1, r2}
 8004626:	f000 f8d0 	bl	80047ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
 800462a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f88e 	bl	8004750 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8004634:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8004638:	3448      	adds	r4, #72	; 0x48
 800463a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800463e:	429c      	cmp	r4, r3
 8004640:	d004      	beq.n	800464c <_ZN6Serial6UpdateEv+0x23c>
 8004642:	3c18      	subs	r4, #24
 8004644:	4620      	mov	r0, r4
 8004646:	f007 f8a1 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800464a:	e7f6      	b.n	800463a <_ZN6Serial6UpdateEv+0x22a>
 800464c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004650:	4618      	mov	r0, r3
 8004652:	f006 ffa9 	bl	800b5a8 <_ZNSaIcED1Ev>
 8004656:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800465a:	4618      	mov	r0, r3
 800465c:	f006 ffa4 	bl	800b5a8 <_ZNSaIcED1Ev>
 8004660:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004664:	4618      	mov	r0, r3
 8004666:	f006 ff9f 	bl	800b5a8 <_ZNSaIcED1Ev>
	// 解析している軸の番号
	int axis_idx = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0



	// 【ここはデバッグ用じゃないから，コメントアウトしないように注意】
	// 文字列⇒数値に変換して格納する
	sscanf(target_strings.c_str(), "%f,%f,%f", &m_speed_control_values[0], &m_speed_control_values[1], &m_speed_control_values[2]);
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	4618      	mov	r0, r3
 8004676:	f007 f97c 	bl	800b972 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800467a:	4604      	mov	r4, r0
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	339c      	adds	r3, #156	; 0x9c
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fdbb 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 800468a:	4605      	mov	r5, r0
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	339c      	adds	r3, #156	; 0x9c
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fdb3 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 800469a:	4606      	mov	r6, r0
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	339c      	adds	r3, #156	; 0x9c
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fdab 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80046aa:	4603      	mov	r3, r0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4633      	mov	r3, r6
 80046b0:	462a      	mov	r2, r5
 80046b2:	4911      	ldr	r1, [pc, #68]	; (80046f8 <_ZN6Serial6UpdateEv+0x2e8>)
 80046b4:	4620      	mov	r0, r4
 80046b6:	f009 fd27 	bl	800e108 <siscanf>
	vector<string> axis_value_strings = {"", "", ""};
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f82b 	bl	800471a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
	string target_strings;
 80046c4:	2401      	movs	r4, #1
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4618      	mov	r0, r3
 80046cc:	f007 f85e 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80046d0:	2c01      	cmp	r4, #1
 80046d2:	d001      	beq.n	80046d8 <_ZN6Serial6UpdateEv+0x2c8>
 80046d4:	2400      	movs	r4, #0
 80046d6:	e000      	b.n	80046da <_ZN6Serial6UpdateEv+0x2ca>
	vector<string> splited_strings =  SplitString2Token(m_receiving_str, '\r', '\n');
 80046d8:	2401      	movs	r4, #1
 80046da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f81b 	bl	800471a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80046e4:	2c01      	cmp	r4, #1
 80046e6:	e000      	b.n	80046ea <_ZN6Serial6UpdateEv+0x2da>
		return;
 80046e8:	bf00      	nop
	//sprintf(msg, "target str [%s]\n", target_strings.c_str());
	//HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg), 0xFFFF);
    // 配列サイズより大きい場合はエラーになるから注意
    //sprintf(msg, "[  %5.5f %5.5f %5.5f  ] \r\n", m_speed_control_values[0], m_speed_control_values[1], m_speed_control_values[2]);
    //HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg), 0xFFFF);
}
 80046ea:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	0801226c 	.word	0x0801226c
 80046f8:	08012270 	.word	0x08012270

080046fc <_ZN6Serial21GetSpeedControlValuesEv>:
//
// @param1[in]	: []
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
vector<float> Serial::GetSpeedControlValues()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	// 確定された1行分の文字列を速度指令値に変換する
	//ConvertReceivedString2SpeedControlValues();
	return m_speed_control_values;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	339c      	adds	r3, #156	; 0x9c
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fe fe21 	bl	8003354 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800471a:	b5b0      	push	{r4, r5, r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681c      	ldr	r4, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd f9af 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8004732:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004734:	461a      	mov	r2, r3
 8004736:	4629      	mov	r1, r5
 8004738:	4620      	mov	r0, r4
 800473a:	f7fd f9b4 	bl	8001aa6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f811 	bl	8004768 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bdb0      	pop	{r4, r5, r7, pc}

08004750 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f865 	bl	8004828 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	10db      	asrs	r3, r3, #3
 8004780:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8004782:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8004786:	461a      	mov	r2, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fd f96e 	bl	8001a6a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fe30 	bl	80043f6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	aaaaaaab 	.word	0xaaaaaaab

080047a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
      }
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
 80047ca:	b5b0      	push	{r4, r5, r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	1d38      	adds	r0, r7, #4
 80047d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80047d8:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f82d 	bl	800483e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS6_>
	_M_range_initialize(__l.begin(), __l.end(),
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f838 	bl	800485c <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>
 80047ec:	4604      	mov	r4, r0
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f83f 	bl	8004874 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endEv>
 80047f6:	4602      	mov	r2, r0
 80047f8:	462b      	mov	r3, r5
 80047fa:	4621      	mov	r1, r4
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f84e 	bl	800489e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag>
      }
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bdb0      	pop	{r4, r5, r7, pc}

0800480c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f87c 	bl	8004916 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS6_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f86e 	bl	800492e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1ERKS6_>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ffed 	bl	800485c <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>
 8004882:	4604      	mov	r4, r0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f864 	bl	8004952 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv>
 800488a:	4602      	mov	r2, r0
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4423      	add	r3, r4
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bd90      	pop	{r4, r7, pc}

0800489e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800489e:	b590      	push	{r4, r7, lr}
 80048a0:	b087      	sub	sp, #28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	68b8      	ldr	r0, [r7, #8]
 80048b0:	f000 f85b 	bl	800496a <_ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_>
 80048b4:	4603      	mov	r3, r0
 80048b6:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80048b8:	68fc      	ldr	r4, [r7, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd f8e7 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4619      	mov	r1, r3
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f000 f864 	bl	8004994 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenEjRKS6_>
 80048cc:	4603      	mov	r3, r0
 80048ce:	4619      	mov	r1, r3
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7fd fbb3 	bl	800203c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 80048d6:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	18ca      	adds	r2, r1, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd f8ca 	bl	8001a90 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80048fc:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80048fe:	4622      	mov	r2, r4
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	68b8      	ldr	r0, [r7, #8]
 8004904:	f000 f86e 	bl	80049e4 <_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0_T_SA_S9_RSaIT1_E>
 8004908:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]
	}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}

08004916 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1ERKS6_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff66 	bl	800480c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd f87d 	bl	8001a42 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800496a:	b5b0      	push	{r4, r5, r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004974:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f844 	bl	8004a06 <_ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
      return std::__distance(__first, __last,
 800497e:	462a      	mov	r2, r5
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f84a 	bl	8004a1c <_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_St26random_access_iterator_tag>
 8004988:	4603      	mov	r3, r0
    }
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004994 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenEjRKS6_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff31 	bl	800480c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>
 80049aa:	f107 030c 	add.w	r3, r7, #12
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd fd5c 	bl	800246c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bf8c      	ite	hi
 80049bc:	2301      	movhi	r3, #1
 80049be:	2300      	movls	r3, #0
 80049c0:	b2dc      	uxtb	r4, r3
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fec2 	bl	8004750 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	d002      	beq.n	80049d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenEjRKS6_+0x42>
	  __throw_length_error(
 80049d0:	4803      	ldr	r0, [pc, #12]	; (80049e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenEjRKS6_+0x4c>)
 80049d2:	f006 fdf0 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
	return __n;
 80049d6:	687b      	ldr	r3, [r7, #4]
      }
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}
 80049e0:	08012298 	.word	0x08012298

080049e4 <_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f826 	bl	8004a48 <_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	10db      	asrs	r3, r3, #3
 8004a30:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_St26random_access_iterator_tag+0x28>)
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
    }
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	aaaaaaab 	.word	0xaaaaaaab

08004a48 <_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f805 	bl	8004a6c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_>
 8004a62:	4603      	mov	r3, r0
    }
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d00e      	beq.n	8004aa2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f7fd fcdb 	bl	8002440 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f80c 	bl	8004aac <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3318      	adds	r3, #24
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e7ec      	b.n	8004a7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_+0x10>
	      return __cur;
 8004aa2:	697b      	ldr	r3, [r7, #20]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004ab6:	6838      	ldr	r0, [r7, #0]
 8004ab8:	f7fd fa1c 	bl	8001ef4 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8004abc:	4604      	mov	r4, r0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	2018      	movs	r0, #24
 8004ac4:	f7fc fcba 	bl	800143c <_ZnwjPv>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4621      	mov	r1, r4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f006 ff77 	bl	800b9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd90      	pop	{r4, r7, pc}
	...

08004adc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <MX_CAN1_Init+0x68>)
 8004ae4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004ae8:	2203      	movs	r2, #3
 8004aea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004afa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8004afe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b06:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004b2c:	4804      	ldr	r0, [pc, #16]	; (8004b40 <MX_CAN1_Init+0x64>)
 8004b2e:	f001 fd8f 	bl	8006650 <HAL_CAN_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004b38:	f000 fc38 	bl	80053ac <Error_Handler>
  }

}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000264 	.word	0x20000264
 8004b44:	40006400 	.word	0x40006400

08004b48 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_CAN_MspInit+0xb4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d144      	bne.n	8004bf4 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7a:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6313      	str	r3, [r2, #48]	; 0x30
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_CAN_MspInit+0xb8>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004bb4:	2309      	movs	r3, #9
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4811      	ldr	r0, [pc, #68]	; (8004c04 <HAL_CAN_MspInit+0xbc>)
 8004bc0:	f002 ff72 	bl	8007aa8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2013      	movs	r0, #19
 8004bca:	f002 fba4 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004bce:	2013      	movs	r0, #19
 8004bd0:	f002 fbbd 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2014      	movs	r0, #20
 8004bda:	f002 fb9c 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004bde:	2014      	movs	r0, #20
 8004be0:	f002 fbb5 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	2015      	movs	r0, #21
 8004bea:	f002 fb94 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004bee:	2015      	movs	r0, #21
 8004bf0:	f002 fbad 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40006400 	.word	0x40006400
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40020000 	.word	0x40020000

08004c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <MX_DMA_Init+0x4c>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <MX_DMA_Init+0x4c>)
 8004c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <MX_DMA_Init+0x4c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2010      	movs	r0, #16
 8004c30:	f002 fb71 	bl	8007316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004c34:	2010      	movs	r0, #16
 8004c36:	f002 fb8a 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2011      	movs	r0, #17
 8004c40:	f002 fb69 	bl	8007316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004c44:	2011      	movs	r0, #17
 8004c46:	f002 fb82 	bl	800734e <HAL_NVIC_EnableIRQ>

}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800

08004c58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	4b40      	ldr	r3, [pc, #256]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4a3f      	ldr	r2, [pc, #252]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4a38      	ldr	r2, [pc, #224]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	4a31      	ldr	r2, [pc, #196]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	4a2a      	ldr	r2, [pc, #168]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004ccc:	f043 0302 	orr.w	r3, r3, #2
 8004cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <MX_GPIO_Init+0x11c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	4825      	ldr	r0, [pc, #148]	; (8004d78 <MX_GPIO_Init+0x120>)
 8004ce4:	f003 f874 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2130      	movs	r1, #48	; 0x30
 8004cec:	4823      	ldr	r0, [pc, #140]	; (8004d7c <MX_GPIO_Init+0x124>)
 8004cee:	f003 f86f 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4822      	ldr	r0, [pc, #136]	; (8004d80 <MX_GPIO_Init+0x128>)
 8004cf8:	f003 f86a 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <MX_GPIO_Init+0x12c>)
 8004d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4619      	mov	r1, r3
 8004d10:	481a      	ldr	r0, [pc, #104]	; (8004d7c <MX_GPIO_Init+0x124>)
 8004d12:	f002 fec9 	bl	8007aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004d16:	2320      	movs	r3, #32
 8004d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d22:	2300      	movs	r3, #0
 8004d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4812      	ldr	r0, [pc, #72]	; (8004d78 <MX_GPIO_Init+0x120>)
 8004d2e:	f002 febb 	bl	8007aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004d32:	2330      	movs	r3, #48	; 0x30
 8004d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	4619      	mov	r1, r3
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <MX_GPIO_Init+0x124>)
 8004d4a:	f002 fead 	bl	8007aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	4806      	ldr	r0, [pc, #24]	; (8004d80 <MX_GPIO_Init+0x128>)
 8004d66:	f002 fe9f 	bl	8007aa8 <HAL_GPIO_Init>

}
 8004d6a:	bf00      	nop
 8004d6c:	3728      	adds	r7, #40	; 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020800 	.word	0x40020800
 8004d80:	40020400 	.word	0x40020400
 8004d84:	10210000 	.word	0x10210000

08004d88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <MX_I2C1_Init+0x54>)
 8004d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <MX_I2C1_Init+0x58>)
 8004d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004daa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004dc4:	4804      	ldr	r0, [pc, #16]	; (8004dd8 <MX_I2C1_Init+0x50>)
 8004dc6:	f003 f81d 	bl	8007e04 <HAL_I2C_Init>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004dd0:	f000 faec 	bl	80053ac <Error_Handler>
  }

}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2000028c 	.word	0x2000028c
 8004ddc:	40005400 	.word	0x40005400
 8004de0:	000186a0 	.word	0x000186a0

08004de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_I2C_MspInit+0x84>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12c      	bne.n	8004e60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e28:	2312      	movs	r3, #18
 8004e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e30:	2303      	movs	r3, #3
 8004e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e34:	2304      	movs	r3, #4
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	480c      	ldr	r0, [pc, #48]	; (8004e70 <HAL_I2C_MspInit+0x8c>)
 8004e40:	f002 fe32 	bl	8007aa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e52:	6413      	str	r3, [r2, #64]	; 0x40
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_I2C_MspInit+0x88>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e60:	bf00      	nop
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40005400 	.word	0x40005400
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020400 	.word	0x40020400

08004e74 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fe fa3b 	bl	80032f8 <_ZNSaIfED1Ev>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	ed2d 8b04 	vpush	{d8-d9}
 8004e92:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e98:	f001 fb44 	bl	8006524 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e9c:	f000 f9b8 	bl	8005210 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ea0:	f7ff feda 	bl	8004c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ea4:	f7ff feb0 	bl	8004c08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004ea8:	f001 f9f2 	bl	8006290 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004eac:	f000 fd4c 	bl	8005948 <MX_TIM1_Init>
  MX_TIM12_Init();
 8004eb0:	f000 ff2c 	bl	8005d0c <MX_TIM12_Init>
  MX_TIM6_Init();
 8004eb4:	f000 fe9c 	bl	8005bf0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8004eb8:	f000 fd9e 	bl	80059f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004ebc:	f000 fdf0 	bl	8005aa0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8004ec0:	f7ff ff62 	bl	8004d88 <MX_I2C1_Init>
  MX_TIM4_Init();
 8004ec4:	f000 fe40 	bl	8005b48 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004ec8:	f000 fec8 	bl	8005c5c <MX_TIM8_Init>
  MX_UART4_Init();
 8004ecc:	f001 f9b6 	bl	800623c <MX_UART4_Init>
  MX_TIM14_Init();
 8004ed0:	f000 ff6c 	bl	8005dac <MX_TIM14_Init>
  MX_CAN1_Init();
 8004ed4:	f7ff fe02 	bl	8004adc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */


  string  msg;
 8004ed8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004edc:	4618      	mov	r0, r3
 8004ede:	f006 fc34 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  //msg = "Initialization End\r\n";
  //HAL_UART_Transmit( &huart2, (uint8_t *)msg.c_str(), msg.size(), 0xFFFF);

  // Encoder
  Encoder encoder;
 8004ee2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd ff9e 	bl	8002e28 <_ZN7EncoderC1Ev>
  encoder.SetDriveEncoderPPR(14);
 8004eec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004ef0:	210e      	movs	r1, #14
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe f866 	bl	8002fc4 <_ZN7Encoder18SetDriveEncoderPPREi>
  encoder.SetDriveWheelDiameter(0.08);
 8004ef8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004efc:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80051e0 <main+0x354>
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe f87c 	bl	8002ffe <_ZN7Encoder21SetDriveWheelDiameterEf>
  encoder.SetGearRatio(1.0/24.9);
 8004f06:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004f0a:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80051e4 <main+0x358>
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe f866 	bl	8002fe0 <_ZN7Encoder12SetGearRatioEf>

  //msg = "PID Setting End\r\n";
  //HAL_UART_Transmit( &huart2, (uint8_t *)msg.c_str(), msg.size(), 0xFFFF);

  // PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8004f14:	2100      	movs	r1, #0
 8004f16:	48b4      	ldr	r0, [pc, #720]	; (80051e8 <main+0x35c>)
 8004f18:	f004 fcaa 	bl	8009870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	48b3      	ldr	r0, [pc, #716]	; (80051ec <main+0x360>)
 8004f20:	f004 fca6 	bl	8009870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8004f24:	2100      	movs	r1, #0
 8004f26:	48b1      	ldr	r0, [pc, #708]	; (80051ec <main+0x360>)
 8004f28:	f004 fca2 	bl	8009870 <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 8004f2c:	200a      	movs	r0, #10
 8004f2e:	f001 fb6b 	bl	8006608 <HAL_Delay>
//  SetPWMBackLeft(0);
//  SetPWMBackRight(0);

  //__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int)(60000*0.05));
  //__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int)(60000*0.075));
  HAL_Delay(100);
 8004f32:	2064      	movs	r0, #100	; 0x64
 8004f34:	f001 fb68 	bl	8006608 <HAL_Delay>
  //HAL_UART_Transmit( &huart2, (uint8_t *)msg.c_str(), msg.size(), 0xFFFF);

  // シリアル通信
  // DWA受信
  //HAL_UART_Receive_DMA(&huart2,serialData,DATANUM);
  Serial serial;
 8004f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff f96f 	bl	8004220 <_ZN6SerialC1Ev>
  // rplidarが遅延するの暫定対策
  int serial_count = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

  // CAN
  // CANのフィルタ設定
  CAN_FilterInit();
 8004f48:	f000 fa04 	bl	8005354 <_Z14CAN_FilterInitv>
  HAL_CAN_Start(&hcan1);
 8004f4c:	48a8      	ldr	r0, [pc, #672]	; (80051f0 <main+0x364>)
 8004f4e:	f001 fd5b 	bl	8006a08 <HAL_CAN_Start>
  // 割り込み有効
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8004f52:	2102      	movs	r1, #2
 8004f54:	48a6      	ldr	r0, [pc, #664]	; (80051f0 <main+0x364>)
 8004f56:	f001 fead 	bl	8006cb4 <HAL_CAN_ActivateNotification>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01a      	beq.n	8004fa0 <main+0x114>
  {
	  msg = "CAN Setting Error ....... \r\n";
 8004f6a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004f6e:	49a1      	ldr	r1, [pc, #644]	; (80051f4 <main+0x368>)
 8004f70:	4618      	mov	r0, r3
 8004f72:	f006 fcce 	bl	800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  HAL_UART_Transmit( &huart2, (uint8_t *)msg.c_str(), msg.size(), 0xFFFF);
 8004f76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f006 fcf9 	bl	800b972 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004f80:	4604      	mov	r4, r0
 8004f82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 fc0c 	bl	800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f94:	4621      	mov	r1, r4
 8004f96:	4898      	ldr	r0, [pc, #608]	; (80051f8 <main+0x36c>)
 8004f98:	f005 fabb 	bl	800a512 <HAL_UART_Transmit>
      Error_Handler();
 8004f9c:	f000 fa06 	bl	80053ac <Error_Handler>
  //msg = "CAN Setting End\r\n";
  //HAL_UART_Transmit( &huart2, (uint8_t *)msg.c_str(), msg.size(), 0xFFFF);


  // Timer Interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8004fa0:	4896      	ldr	r0, [pc, #600]	; (80051fc <main+0x370>)
 8004fa2:	f004 fc16 	bl	80097d2 <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit( &huart2, (uint8_t *)"start!\n", 7, 0xFFFF);
 8004fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004faa:	2207      	movs	r2, #7
 8004fac:	4994      	ldr	r1, [pc, #592]	; (8005200 <main+0x374>)
 8004fae:	4892      	ldr	r0, [pc, #584]	; (80051f8 <main+0x36c>)
 8004fb0:	f005 faaf 	bl	800a512 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // エンコーダの初期値を初期化する
  InitEncoder();
 8004fb4:	f7fd fdec 	bl	8002b90 <_Z11InitEncoderv>

  vector<float> accelerated_command_values;
 8004fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fc faa0 	bl	8001502 <_ZNSt6vectorIfSaIfEEC1Ev>
  accelerated_command_values.push_back(0);
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004fca:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe f9ac 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
  accelerated_command_values.push_back(0);
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8004fe2:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8004fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe f9a0 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
  accelerated_command_values.push_back(0);
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8004ffa:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8004ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe f994 	bl	8003332 <_ZNSt6vectorIfSaIfEE9push_backEOf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // 10ms circle process
	if(g_is_up_control_cycle == true)
 800500a:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <main+0x378>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d1fb      	bne.n	800500a <main+0x17e>
	{
      g_is_up_control_cycle = false;
 8005012:	4b7c      	ldr	r3, [pc, #496]	; (8005204 <main+0x378>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]

      // < Encoder >
       encoder.Update();
 8005018:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe f89f 	bl	8003160 <_ZN7Encoder6UpdateEv>

      // 自己位置を取得する
      struct_posture_t pos = encoder.GetPositions();
 8005022:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fff8 	bl	800301c <_ZN7Encoder12GetPositionsEv>
 800502c:	eef0 6a40 	vmov.f32	s13, s0
 8005030:	eeb0 7a60 	vmov.f32	s14, s1
 8005034:	eef0 7a41 	vmov.f32	s15, s2
 8005038:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800503c:	edc3 6a00 	vstr	s13, [r3]
 8005040:	ed83 7a01 	vstr	s14, [r3, #4]
 8005044:	edc3 7a02 	vstr	s15, [r3, #8]

      // シリアルの速度指令値を取得する
      serial.Update();
 8005048:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f9df 	bl	8004410 <_ZN6Serial6UpdateEv>

      string serial_str;
 8005052:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005056:	4618      	mov	r0, r3
 8005058:	f006 fb77 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

      // 速度指令値を取得する
      vector<float> target_speed_control_local_values = serial.GetSpeedControlValues(); // ロボット座標系
 800505c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005060:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fb48 	bl	80046fc <_ZN6Serial21GetSpeedControlValuesEv>

      // 加減速を考慮させる
//      accelerated_command_values = CalcAcceleratedCmdValues(accelerated_command_values, target_speed_control_local_values, ACCELELATED_ADD_VEL);
      vector<float> speed_control_local_values = accelerated_command_values;
 800506c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005070:	f107 031c 	add.w	r3, r7, #28
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f96c 	bl	8003354 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      //sprintf(msgc, "%f %f %f \r\n", target_speed_control_local_values[0], accelerated_command_values[0], speed_control_local_values[0]);
      //HAL_UART_Transmit( &huart2, (uint8_t *)msgc, strlen(msgc) + 1, 0xFFFF);
      //HAL_UART_Transmit( &huart2, (uint8_t *)"hello", 10, 0xFFFF);

      // < 速度指令値をロボット座標系からマップ座標系に変換する >
      vector<float> speed_control_global_values(3, 0); // マップ座標系
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8005084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005088:	4618      	mov	r0, r3
 800508a:	f7fc fc5b 	bl	8001944 <_ZNSaIfEC1Ev>
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8005096:	f107 0010 	add.w	r0, r7, #16
 800509a:	2103      	movs	r1, #3
 800509c:	f000 f9d8 	bl	8005450 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 80050a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f927 	bl	80032f8 <_ZNSaIfED1Ev>
      // 変換する場合
      //Rotation(speed_control_local_values[0], speed_control_local_values[1], pos.angle, &speed_control_global_values[0], &speed_control_global_values[1]);
      //speed_control_global_values[2] = speed_control_local_values[2];

      // 変換しない場合
      speed_control_global_values[0] = speed_control_local_values[0];
 80050aa:	f107 031c 	add.w	r3, r7, #28
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff f8a5 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80050b6:	4604      	mov	r4, r0
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff f89e 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	6013      	str	r3, [r2, #0]
      speed_control_global_values[1] = speed_control_local_values[1];
 80050ca:	f107 031c 	add.w	r3, r7, #28
 80050ce:	2101      	movs	r1, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff f895 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80050d6:	4604      	mov	r4, r0
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff f88e 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6013      	str	r3, [r2, #0]
      speed_control_global_values[2] = speed_control_local_values[2];
 80050ea:	f107 031c 	add.w	r3, r7, #28
 80050ee:	2102      	movs	r1, #2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f885 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 80050f6:	4604      	mov	r4, r0
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f87e 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005104:	4602      	mov	r2, r0
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6013      	str	r3, [r2, #0]

      // 速度指令値から各車輪の目標速度を計算する
      vector<float> wheel_target_velocities(MOTOR_QTY, 0);
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc fc14 	bl	8001944 <_ZNSaIfEC1Ev>
 800511c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005120:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8005124:	1d38      	adds	r0, r7, #4
 8005126:	2103      	movs	r1, #3
 8005128:	f000 f992 	bl	8005450 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 800512c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe f8e1 	bl	80032f8 <_ZNSaIfED1Ev>
      ConvertBodyVel2WheelVelManuaRate(speed_control_global_values[0], speed_control_global_values[1], speed_control_global_values[2], &wheel_target_velocities[0], &wheel_target_velocities[1], &wheel_target_velocities[2], 0.8, 0.2);
 8005136:	f107 0310 	add.w	r3, r7, #16
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f85f 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005142:	4603      	mov	r3, r0
 8005144:	ed93 8a00 	vldr	s16, [r3]
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f856 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005154:	4603      	mov	r3, r0
 8005156:	edd3 8a00 	vldr	s17, [r3]
 800515a:	f107 0310 	add.w	r3, r7, #16
 800515e:	2102      	movs	r1, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f84d 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005166:	4603      	mov	r3, r0
 8005168:	ed93 9a00 	vldr	s18, [r3]
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f845 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005176:	4604      	mov	r4, r0
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff f83f 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 8005182:	4605      	mov	r5, r0
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	2102      	movs	r1, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f839 	bl	8004200 <_ZNSt6vectorIfSaIfEEixEj>
 800518e:	4603      	mov	r3, r0
 8005190:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 8005208 <main+0x37c>
 8005194:	eddf 1a1d 	vldr	s3, [pc, #116]	; 800520c <main+0x380>
 8005198:	461a      	mov	r2, r3
 800519a:	4629      	mov	r1, r5
 800519c:	4620      	mov	r0, r4
 800519e:	eeb0 1a49 	vmov.f32	s2, s18
 80051a2:	eef0 0a68 	vmov.f32	s1, s17
 80051a6:	eeb0 0a48 	vmov.f32	s0, s16
 80051aa:	f7fc f9b9 	bl	8001520 <_Z32ConvertBodyVel2WheelVelManuaRatefffPfS_S_ff>
      vector<float> wheel_target_velocities(MOTOR_QTY, 0);
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f919 	bl	80053e8 <_ZNSt6vectorIfSaIfEED1Ev>
      vector<float> speed_control_global_values(3, 0); // マップ座標系
 80051b6:	f107 0310 	add.w	r3, r7, #16
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f914 	bl	80053e8 <_ZNSt6vectorIfSaIfEED1Ev>
      vector<float> speed_control_local_values = accelerated_command_values;
 80051c0:	f107 031c 	add.w	r3, r7, #28
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f90f 	bl	80053e8 <_ZNSt6vectorIfSaIfEED1Ev>
      vector<float> target_speed_control_local_values = serial.GetSpeedControlValues(); // ロボット座標系
 80051ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f90a 	bl	80053e8 <_ZNSt6vectorIfSaIfEED1Ev>
      string serial_str;
 80051d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051d8:	4618      	mov	r0, r3
 80051da:	f006 fad7 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 6000);
//			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 6000);
//		}

	}
  }
 80051de:	e714      	b.n	800500a <main+0x17e>
 80051e0:	3da3d70a 	.word	0x3da3d70a
 80051e4:	3d247f7c 	.word	0x3d247f7c
 80051e8:	20000460 	.word	0x20000460
 80051ec:	200004a0 	.word	0x200004a0
 80051f0:	20000264 	.word	0x20000264
 80051f4:	080122cc 	.word	0x080122cc
 80051f8:	200005e0 	.word	0x200005e0
 80051fc:	200003a0 	.word	0x200003a0
 8005200:	080122ec 	.word	0x080122ec
 8005204:	20000238 	.word	0x20000238
 8005208:	3e4ccccd 	.word	0x3e4ccccd
 800520c:	3f4ccccd 	.word	0x3f4ccccd

08005210 <_Z18SystemClock_Configv>:
 * .
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b094      	sub	sp, #80	; 0x50
 8005214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005216:	f107 031c 	add.w	r3, r7, #28
 800521a:	2234      	movs	r2, #52	; 0x34
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f007 ffcc 	bl	800d1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	2300      	movs	r3, #0
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <_Z18SystemClock_Configv+0xe8>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	4a2e      	ldr	r2, [pc, #184]	; (80052f8 <_Z18SystemClock_Configv+0xe8>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6413      	str	r3, [r2, #64]	; 0x40
 8005244:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <_Z18SystemClock_Configv+0xe8>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005250:	2300      	movs	r3, #0
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <_Z18SystemClock_Configv+0xec>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <_Z18SystemClock_Configv+0xec>)
 800525e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <_Z18SystemClock_Configv+0xec>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005270:	2302      	movs	r3, #2
 8005272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005274:	2301      	movs	r3, #1
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005278:	2310      	movs	r3, #16
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800527c:	2302      	movs	r3, #2
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005280:	2300      	movs	r3, #0
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005284:	2308      	movs	r3, #8
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8005288:	2378      	movs	r3, #120	; 0x78
 800528a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800528c:	2302      	movs	r3, #2
 800528e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005290:	2302      	movs	r3, #2
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005294:	2302      	movs	r3, #2
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005298:	f107 031c 	add.w	r3, r7, #28
 800529c:	4618      	mov	r0, r3
 800529e:	f004 f813 	bl	80092c8 <HAL_RCC_OscConfig>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80052b2:	f000 f87b 	bl	80053ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052b6:	230f      	movs	r3, #15
 80052b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052ba:	2302      	movs	r3, #2
 80052bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80052c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80052c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80052c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	2103      	movs	r1, #3
 80052d4:	4618      	mov	r0, r3
 80052d6:	f003 fd2b 	bl	8008d30 <HAL_RCC_ClockConfig>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80052ea:	f000 f85f 	bl	80053ac <Error_Handler>
  }
}
 80052ee:	bf00      	nop
 80052f0:	3750      	adds	r7, #80	; 0x50
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40007000 	.word	0x40007000

08005300 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	g_is_up_control_cycle = true;
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
	//if (htim == &htim6)
	//{
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, a%2);
	//}
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000238 	.word	0x20000238

08005320 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	if(huart->Instance != USART2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a06      	ldr	r2, [pc, #24]	; (8005348 <HAL_UART_RxCpltCallback+0x28>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d105      	bne.n	800533e <HAL_UART_RxCpltCallback+0x1e>
	{
		return;
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &g_received_char, 1);
 8005332:	2201      	movs	r2, #1
 8005334:	4905      	ldr	r1, [pc, #20]	; (800534c <HAL_UART_RxCpltCallback+0x2c>)
 8005336:	4806      	ldr	r0, [pc, #24]	; (8005350 <HAL_UART_RxCpltCallback+0x30>)
 8005338:	f005 f984 	bl	800a644 <HAL_UART_Receive_IT>
 800533c:	e000      	b.n	8005340 <HAL_UART_RxCpltCallback+0x20>
		return;
 800533e:	bf00      	nop
}
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40004400 	.word	0x40004400
 800534c:	20000239 	.word	0x20000239
 8005350:	200005e0 	.word	0x200005e0

08005354 <_Z14CAN_FilterInitv>:




void CAN_FilterInit(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 800535a:	2300      	movs	r3, #0
 800535c:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
	filter.FilterBank           = 0;                        // フィルターバンクNo
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 800537a:	230e      	movs	r3, #14
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 800537e:	2301      	movs	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 8005382:	463b      	mov	r3, r7
 8005384:	4619      	mov	r1, r3
 8005386:	4808      	ldr	r0, [pc, #32]	; (80053a8 <_Z14CAN_FilterInitv+0x54>)
 8005388:	f001 fa5e 	bl	8006848 <HAL_CAN_ConfigFilter>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <_Z14CAN_FilterInitv+0x4c>
	{
		Error_Handler();
 800539c:	f000 f806 	bl	80053ac <Error_Handler>
	}
}
 80053a0:	bf00      	nop
 80053a2:	3728      	adds	r7, #40	; 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000264 	.word	0x20000264

080053ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80053b2:	b672      	cpsid	i
}
 80053b4:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      char msg[40];
	  sprintf(msg, "Error Handler IN\r\n");
 80053b6:	463b      	mov	r3, r7
 80053b8:	4909      	ldr	r1, [pc, #36]	; (80053e0 <Error_Handler+0x34>)
 80053ba:	4618      	mov	r0, r3
 80053bc:	f008 fe84 	bl	800e0c8 <siprintf>
      HAL_UART_Transmit( &huart2, (uint8_t *)msg, strlen(msg) + 1, 0xFFFF);
 80053c0:	463b      	mov	r3, r7
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fa ff74 	bl	80002b0 <strlen>
 80053c8:	4603      	mov	r3, r0
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	4639      	mov	r1, r7
 80053d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053d6:	4803      	ldr	r0, [pc, #12]	; (80053e4 <Error_Handler+0x38>)
 80053d8:	f005 f89b 	bl	800a512 <HAL_UART_Transmit>
  }
 80053dc:	e7eb      	b.n	80053b6 <Error_Handler+0xa>
 80053de:	bf00      	nop
 80053e0:	08012310 	.word	0x08012310
 80053e4:	200005e0 	.word	0x200005e0

080053e8 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681c      	ldr	r4, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fc fad5 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005400:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005402:	461a      	mov	r2, r3
 8005404:	4629      	mov	r1, r5
 8005406:	4620      	mov	r0, r4
 8005408:	f7fc fada 	bl	80019c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f805 	bl	800541e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bdb0      	pop	{r4, r5, r7, pc}

0800541e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005436:	461a      	mov	r2, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fc faa3 	bl	8001984 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fd17 	bl	8004e74 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>:
      vector(size_type __n, const value_type& __value,
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 800545e:	68fc      	ldr	r4, [r7, #12]
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	68b8      	ldr	r0, [r7, #8]
 8005464:	f000 f810 	bl	8005488 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8005468:	4603      	mov	r3, r0
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	4619      	mov	r1, r3
 800546e:	4620      	mov	r0, r4
 8005470:	f7fe f884 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f82d 	bl	80054d8 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bd90      	pop	{r4, r7, pc}

08005488 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe facc 	bl	8003a36 <_ZNSaIfEC1ERKS_>
 800549e:	f107 030c 	add.w	r3, r7, #12
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc ff4b 	bl	800233e <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bf8c      	ite	hi
 80054b0:	2301      	movhi	r3, #1
 80054b2:	2300      	movls	r3, #0
 80054b4:	b2dc      	uxtb	r4, r3
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fd ff1c 	bl	80032f8 <_ZNSaIfED1Ev>
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d002      	beq.n	80054ca <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80054c4:	4803      	ldr	r0, [pc, #12]	; (80054d4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 80054c6:	f006 f876 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
	return __n;
 80054ca:	687b      	ldr	r3, [r7, #4]
      }
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}
 80054d4:	08012324 	.word	0x08012324

080054d8 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc fa5d 	bl	80019aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80054f0:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f807 	bl	800550a <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>
 80054fc:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]
      }
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bd90      	pop	{r4, r7, pc}

0800550a <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f805 	bl	800552c <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>
 8005522:	4603      	mov	r3, r0
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f805 	bl	8005550 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>
 8005546:	4603      	mov	r3, r0
    }
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f805 	bl	8005570 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
 8005566:	4603      	mov	r3, r0
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
      __glibcxx_requires_can_increment(__first, __n);

      return std::__niter_wrap(__first,
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd f826 	bl	80025d0 <_ZSt12__niter_baseIPfET_S1_>
 8005584:	4603      	mov	r3, r0
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f80c 	bl	80055a8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>
 8005590:	4602      	mov	r2, r0
 8005592:	f107 030c 	add.w	r3, r7, #12
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f7fd f9e1 	bl	8002960 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800559e:	4603      	mov	r3, r0
		std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]
      for (__decltype(__n + 0) __niter = __n;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, (void) ++__first)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x30>
	*__first = __tmp;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	601a      	str	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e7f2      	b.n	80055be <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x16>
      return __first;
 80055d8:	68fb      	ldr	r3, [r7, #12]
    }
 80055da:	4618      	mov	r0, r3
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE END Error_Handler_Debug */
}
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d107      	bne.n	8005608 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fe:	4293      	cmp	r3, r2
 8005600:	d102      	bne.n	8005608 <_Z41__static_initialization_and_destruction_0ii+0x20>
string uart_str;
 8005602:	4809      	ldr	r0, [pc, #36]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005604:	f006 f8a1 	bl	800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d107      	bne.n	800561e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005614:	4293      	cmp	r3, r2
 8005616:	d102      	bne.n	800561e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800561a:	f006 f8b7 	bl	800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000023c 	.word	0x2000023c

0800562c <_GLOBAL__sub_I_g_is_up_control_cycle>:
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
 8005630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005634:	2001      	movs	r0, #1
 8005636:	f7ff ffd7 	bl	80055e8 <_Z41__static_initialization_and_destruction_0ii>
 800563a:	bd80      	pop	{r7, pc}

0800563c <_GLOBAL__sub_D_g_is_up_control_cycle>:
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
 8005640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005644:	2000      	movs	r0, #0
 8005646:	f7ff ffcf 	bl	80055e8 <_Z41__static_initialization_and_destruction_0ii>
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	4b10      	ldr	r3, [pc, #64]	; (8005698 <HAL_MspInit+0x4c>)
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_MspInit+0x4c>)
 800565c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005660:	6453      	str	r3, [r2, #68]	; 0x44
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_MspInit+0x4c>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_MspInit+0x4c>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a08      	ldr	r2, [pc, #32]	; (8005698 <HAL_MspInit+0x4c>)
 8005678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_MspInit+0x4c>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800568a:	2007      	movs	r0, #7
 800568c:	f001 fe38 	bl	8007300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800

0800569c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056a0:	e7fe      	b.n	80056a0 <NMI_Handler+0x4>

080056a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056a2:	b480      	push	{r7}
 80056a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056a6:	e7fe      	b.n	80056a6 <HardFault_Handler+0x4>

080056a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056ac:	e7fe      	b.n	80056ac <MemManage_Handler+0x4>

080056ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056b2:	e7fe      	b.n	80056b2 <BusFault_Handler+0x4>

080056b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <UsageFault_Handler+0x4>

080056ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056d6:	b480      	push	{r7}
 80056d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056e8:	f000 ff6e 	bl	80065c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <DMA1_Stream5_IRQHandler+0x10>)
 80056f6:	f001 ff6d 	bl	80075d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200004e0 	.word	0x200004e0

08005704 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <DMA1_Stream6_IRQHandler+0x10>)
 800570a:	f001 ff63 	bl	80075d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000540 	.word	0x20000540

08005718 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <CAN1_TX_IRQHandler+0x10>)
 800571e:	f001 faef 	bl	8006d00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000264 	.word	0x20000264

0800572c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005730:	4802      	ldr	r0, [pc, #8]	; (800573c <CAN1_RX0_IRQHandler+0x10>)
 8005732:	f001 fae5 	bl	8006d00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000264 	.word	0x20000264

08005740 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005744:	4802      	ldr	r0, [pc, #8]	; (8005750 <CAN1_RX1_IRQHandler+0x10>)
 8005746:	f001 fadb 	bl	8006d00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000264 	.word	0x20000264

08005754 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005758:	4802      	ldr	r0, [pc, #8]	; (8005764 <USART2_IRQHandler+0x10>)
 800575a:	f005 f849 	bl	800a7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200005e0 	.word	0x200005e0

08005768 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800576c:	4802      	ldr	r0, [pc, #8]	; (8005778 <UART4_IRQHandler+0x10>)
 800576e:	f005 f83f 	bl	800a7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200005a0 	.word	0x200005a0

0800577c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005780:	4802      	ldr	r0, [pc, #8]	; (800578c <TIM6_DAC_IRQHandler+0x10>)
 8005782:	f004 f97d 	bl	8009a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200003a0 	.word	0x200003a0

08005790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
	return 1;
 8005794:	2301      	movs	r3, #1
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <_kill>:

int _kill(int pid, int sig)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057aa:	f007 fca5 	bl	800d0f8 <__errno>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2216      	movs	r2, #22
 80057b2:	601a      	str	r2, [r3, #0]
	return -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <_exit>:

void _exit (int status)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057c8:	f04f 31ff 	mov.w	r1, #4294967295
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ffe7 	bl	80057a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80057d2:	e7fe      	b.n	80057d2 <_exit+0x12>

080057d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e00a      	b.n	80057fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057e6:	f3af 8000 	nop.w
 80057ea:	4601      	mov	r1, r0
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	60ba      	str	r2, [r7, #8]
 80057f2:	b2ca      	uxtb	r2, r1
 80057f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3301      	adds	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	dbf0      	blt.n	80057e6 <_read+0x12>
	}

return len;
 8005804:	687b      	ldr	r3, [r7, #4]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e009      	b.n	8005834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	60ba      	str	r2, [r7, #8]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3301      	adds	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	dbf1      	blt.n	8005820 <_write+0x12>
	}
	return len;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_close>:

int _close(int file)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
	return -1;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800586e:	605a      	str	r2, [r3, #4]
	return 0;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <_isatty>:

int _isatty(int file)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
	return 1;
 8005886:	2301      	movs	r3, #1
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
	return 0;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058b8:	4a14      	ldr	r2, [pc, #80]	; (800590c <_sbrk+0x5c>)
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <_sbrk+0x60>)
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <_sbrk+0x64>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <_sbrk+0x64>)
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <_sbrk+0x68>)
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <_sbrk+0x64>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d207      	bcs.n	80058f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058e0:	f007 fc0a 	bl	800d0f8 <__errno>
 80058e4:	4603      	mov	r3, r0
 80058e6:	220c      	movs	r2, #12
 80058e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	e009      	b.n	8005904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <_sbrk+0x64>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <_sbrk+0x64>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <_sbrk+0x64>)
 8005900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20020000 	.word	0x20020000
 8005910:	00000400 	.word	0x00000400
 8005914:	20000254 	.word	0x20000254
 8005918:	20000638 	.word	0x20000638

0800591c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <SystemInit+0x28>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <SystemInit+0x28>)
 8005928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800592c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <SystemInit+0x28>)
 8005932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005936:	609a      	str	r2, [r3, #8]
#endif
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800594e:	f107 030c 	add.w	r3, r7, #12
 8005952:	2224      	movs	r2, #36	; 0x24
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f007 fc30 	bl	800d1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8005964:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <MX_TIM1_Init+0xa8>)
 8005966:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <MX_TIM1_Init+0xac>)
 8005968:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800596a:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <MX_TIM1_Init+0xa8>)
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005970:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <MX_TIM1_Init+0xa8>)
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <MX_TIM1_Init+0xa8>)
 8005978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597e:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <MX_TIM1_Init+0xa8>)
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005984:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <MX_TIM1_Init+0xa8>)
 8005986:	2200      	movs	r2, #0
 8005988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800598a:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <MX_TIM1_Init+0xa8>)
 800598c:	2200      	movs	r2, #0
 800598e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005990:	2303      	movs	r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059a4:	2300      	movs	r3, #0
 80059a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059a8:	2301      	movs	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	4619      	mov	r1, r3
 80059ba:	480d      	ldr	r0, [pc, #52]	; (80059f0 <MX_TIM1_Init+0xa8>)
 80059bc:	f003 ff96 	bl	80098ec <HAL_TIM_Encoder_Init>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80059c6:	f7ff fcf1 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4806      	ldr	r0, [pc, #24]	; (80059f0 <MX_TIM1_Init+0xa8>)
 80059d8:	f004 fcbe 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80059e2:	f7ff fce3 	bl	80053ac <Error_Handler>
  }

}
 80059e6:	bf00      	nop
 80059e8:	3730      	adds	r7, #48	; 0x30
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	200003e0 	.word	0x200003e0
 80059f4:	40010000 	.word	0x40010000

080059f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80059fe:	f107 030c 	add.w	r3, r7, #12
 8005a02:	2224      	movs	r2, #36	; 0x24
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f007 fbd8 	bl	800d1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a22:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a36:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a54:	2301      	movs	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4619      	mov	r1, r3
 8005a66:	480d      	ldr	r0, [pc, #52]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a68:	f003 ff40 	bl	80098ec <HAL_TIM_Encoder_Init>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005a72:	f7ff fc9b 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a7e:	1d3b      	adds	r3, r7, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4806      	ldr	r0, [pc, #24]	; (8005a9c <MX_TIM2_Init+0xa4>)
 8005a84:	f004 fc68 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005a8e:	f7ff fc8d 	bl	80053ac <Error_Handler>
  }

}
 8005a92:	bf00      	nop
 8005a94:	3730      	adds	r7, #48	; 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000420 	.word	0x20000420

08005aa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	; 0x30
 8005aa4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005aa6:	f107 030c 	add.w	r3, r7, #12
 8005aaa:	2224      	movs	r2, #36	; 0x24
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f007 fb84 	bl	800d1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <MX_TIM3_Init+0xa4>)
 8005ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005ace:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005adc:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005afa:	2301      	movs	r3, #1
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005afe:	2300      	movs	r3, #0
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005b0e:	f003 feed 	bl	80098ec <HAL_TIM_Encoder_Init>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005b18:	f7ff fc48 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <MX_TIM3_Init+0xa0>)
 8005b2a:	f004 fc15 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005b34:	f7ff fc3a 	bl	80053ac <Error_Handler>
  }

}
 8005b38:	bf00      	nop
 8005b3a:	3730      	adds	r7, #48	; 0x30
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000360 	.word	0x20000360
 8005b44:	40000400 	.word	0x40000400

08005b48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f007 fb30 	bl	800d1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8005b64:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b66:	4a21      	ldr	r2, [pc, #132]	; (8005bec <MX_TIM4_Init+0xa4>)
 8005b68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b70:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005b76:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b84:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b92:	2301      	movs	r3, #1
 8005b94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	480c      	ldr	r0, [pc, #48]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005bb6:	f003 fe99 	bl	80098ec <HAL_TIM_Encoder_Init>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005bc0:	f7ff fbf4 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4805      	ldr	r0, [pc, #20]	; (8005be8 <MX_TIM4_Init+0xa0>)
 8005bd2:	f004 fbc1 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005bdc:	f7ff fbe6 	bl	80053ac <Error_Handler>
  }

}
 8005be0:	bf00      	nop
 8005be2:	3730      	adds	r7, #48	; 0x30
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000320 	.word	0x20000320
 8005bec:	40000800 	.word	0x40000800

08005bf0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <MX_TIM6_Init+0x68>)
 8005c02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1199;
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c06:	f240 42af 	movw	r2, #1199	; 0x4af
 8005c0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005c20:	480c      	ldr	r0, [pc, #48]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c22:	f003 fdab 	bl	800977c <HAL_TIM_Base_Init>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005c2c:	f7ff fbbe 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c30:	2300      	movs	r3, #0
 8005c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c38:	463b      	mov	r3, r7
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4805      	ldr	r0, [pc, #20]	; (8005c54 <MX_TIM6_Init+0x64>)
 8005c3e:	f004 fb8b 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005c48:	f7ff fbb0 	bl	80053ac <Error_Handler>
  }

}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	200003a0 	.word	0x200003a0
 8005c58:	40001000 	.word	0x40001000

08005c5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	; 0x30
 8005c60:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	2224      	movs	r2, #36	; 0x24
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f007 faa6 	bl	800d1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c7a:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <MX_TIM8_Init+0xac>)
 8005c7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005c7e:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4619      	mov	r1, r3
 8005cce:	480d      	ldr	r0, [pc, #52]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005cd0:	f003 fe0c 	bl	80098ec <HAL_TIM_Encoder_Init>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005cda:	f7ff fb67 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4806      	ldr	r0, [pc, #24]	; (8005d04 <MX_TIM8_Init+0xa8>)
 8005cec:	f004 fb34 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005cf6:	f7ff fb59 	bl	80053ac <Error_Handler>
  }

}
 8005cfa:	bf00      	nop
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200002e0 	.word	0x200002e0
 8005d08:	40010400 	.word	0x40010400

08005d0c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	611a      	str	r2, [r3, #16]
 8005d20:	615a      	str	r2, [r3, #20]
 8005d22:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d26:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <MX_TIM12_Init+0x9c>)
 8005d28:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d2c:	2213      	movs	r2, #19
 8005d2e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 59999;
 8005d36:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d38:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d3c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d44:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8005d4a:	4816      	ldr	r0, [pc, #88]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d4c:	f003 fd65 	bl	800981a <HAL_TIM_PWM_Init>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8005d56:	f7ff fb29 	bl	80053ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d5a:	2360      	movs	r3, #96	; 0x60
 8005d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4619      	mov	r1, r3
 8005d70:	480c      	ldr	r0, [pc, #48]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d72:	f003 ff8d 	bl	8009c90 <HAL_TIM_PWM_ConfigChannel>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8005d7c:	f7ff fb16 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d80:	1d3b      	adds	r3, r7, #4
 8005d82:	2204      	movs	r2, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4807      	ldr	r0, [pc, #28]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d88:	f003 ff82 	bl	8009c90 <HAL_TIM_PWM_ConfigChannel>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8005d92:	f7ff fb0b 	bl	80053ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <MX_TIM12_Init+0x98>)
 8005d98:	f000 f9ee 	bl	8006178 <HAL_TIM_MspPostInit>

}
 8005d9c:	bf00      	nop
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200004a0 	.word	0x200004a0
 8005da8:	40001800 	.word	0x40001800

08005dac <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
 8005dc0:	615a      	str	r2, [r3, #20]
 8005dc2:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <MX_TIM14_Init+0x98>)
 8005dc8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19;
 8005dca:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dcc:	2213      	movs	r2, #19
 8005dce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 59999;
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dd8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005ddc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005dea:	4815      	ldr	r0, [pc, #84]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dec:	f003 fcc6 	bl	800977c <HAL_TIM_Base_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8005df6:	f7ff fad9 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005dfa:	4811      	ldr	r0, [pc, #68]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005dfc:	f003 fd0d 	bl	800981a <HAL_TIM_PWM_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8005e06:	f7ff fad1 	bl	80053ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e0a:	2360      	movs	r3, #96	; 0x60
 8005e0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4807      	ldr	r0, [pc, #28]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005e22:	f003 ff35 	bl	8009c90 <HAL_TIM_PWM_ConfigChannel>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005e2c:	f7ff fabe 	bl	80053ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8005e30:	4803      	ldr	r0, [pc, #12]	; (8005e40 <MX_TIM14_Init+0x94>)
 8005e32:	f000 f9a1 	bl	8006178 <HAL_TIM_MspPostInit>

}
 8005e36:	bf00      	nop
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000460 	.word	0x20000460
 8005e44:	40002000 	.word	0x40002000

08005e48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b092      	sub	sp, #72	; 0x48
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a8c      	ldr	r2, [pc, #560]	; (8006098 <HAL_TIM_Encoder_MspInit+0x250>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d12d      	bne.n	8005ec6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6e:	4b8b      	ldr	r3, [pc, #556]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	4a8a      	ldr	r2, [pc, #552]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6453      	str	r3, [r2, #68]	; 0x44
 8005e7a:	4b88      	ldr	r3, [pc, #544]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	4b84      	ldr	r3, [pc, #528]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4a83      	ldr	r2, [pc, #524]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6313      	str	r3, [r2, #48]	; 0x30
 8005e96:	4b81      	ldr	r3, [pc, #516]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4878      	ldr	r0, [pc, #480]	; (80060a0 <HAL_TIM_Encoder_MspInit+0x258>)
 8005ec0:	f001 fdf2 	bl	8007aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005ec4:	e0e4      	b.n	8006090 <HAL_TIM_Encoder_MspInit+0x248>
  else if(tim_encoderHandle->Instance==TIM2)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d12c      	bne.n	8005f2a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed4:	4b71      	ldr	r3, [pc, #452]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	4a70      	ldr	r2, [pc, #448]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee0:	4b6e      	ldr	r3, [pc, #440]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	4a69      	ldr	r2, [pc, #420]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6313      	str	r3, [r2, #48]	; 0x30
 8005efc:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f14:	2300      	movs	r3, #0
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f20:	4619      	mov	r1, r3
 8005f22:	485f      	ldr	r0, [pc, #380]	; (80060a0 <HAL_TIM_Encoder_MspInit+0x258>)
 8005f24:	f001 fdc0 	bl	8007aa8 <HAL_GPIO_Init>
}
 8005f28:	e0b2      	b.n	8006090 <HAL_TIM_Encoder_MspInit+0x248>
  else if(tim_encoderHandle->Instance==TIM3)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a5d      	ldr	r2, [pc, #372]	; (80060a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d14a      	bne.n	8005fca <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f34:	2300      	movs	r3, #0
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	4b58      	ldr	r3, [pc, #352]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	4a57      	ldr	r2, [pc, #348]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	6413      	str	r3, [r2, #64]	; 0x40
 8005f44:	4b55      	ldr	r3, [pc, #340]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	4b51      	ldr	r3, [pc, #324]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	4a50      	ldr	r2, [pc, #320]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f60:	4b4e      	ldr	r3, [pc, #312]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	4b4a      	ldr	r3, [pc, #296]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4a49      	ldr	r2, [pc, #292]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7c:	4b47      	ldr	r3, [pc, #284]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f94:	2300      	movs	r3, #0
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	483f      	ldr	r0, [pc, #252]	; (80060a0 <HAL_TIM_Encoder_MspInit+0x258>)
 8005fa4:	f001 fd80 	bl	8007aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005fa8:	2320      	movs	r3, #32
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fac:	2302      	movs	r3, #2
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4839      	ldr	r0, [pc, #228]	; (80060a8 <HAL_TIM_Encoder_MspInit+0x260>)
 8005fc4:	f001 fd70 	bl	8007aa8 <HAL_GPIO_Init>
}
 8005fc8:	e062      	b.n	8006090 <HAL_TIM_Encoder_MspInit+0x248>
  else if(tim_encoderHandle->Instance==TIM4)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a37      	ldr	r2, [pc, #220]	; (80060ac <HAL_TIM_Encoder_MspInit+0x264>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d12c      	bne.n	800602e <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	4a2f      	ldr	r2, [pc, #188]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005fde:	f043 0304 	orr.w	r3, r3, #4
 8005fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	4a28      	ldr	r2, [pc, #160]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8005ffa:	f043 0302 	orr.w	r3, r3, #2
 8005ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8006000:	4b26      	ldr	r3, [pc, #152]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800600c:	23c0      	movs	r3, #192	; 0xc0
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2300      	movs	r3, #0
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006018:	2300      	movs	r3, #0
 800601a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800601c:	2302      	movs	r3, #2
 800601e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006024:	4619      	mov	r1, r3
 8006026:	4820      	ldr	r0, [pc, #128]	; (80060a8 <HAL_TIM_Encoder_MspInit+0x260>)
 8006028:	f001 fd3e 	bl	8007aa8 <HAL_GPIO_Init>
}
 800602c:	e030      	b.n	8006090 <HAL_TIM_Encoder_MspInit+0x248>
  else if(tim_encoderHandle->Instance==TIM8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <HAL_TIM_Encoder_MspInit+0x268>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d12b      	bne.n	8006090 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 800603e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006040:	4a16      	ldr	r2, [pc, #88]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8006042:	f043 0302 	orr.w	r3, r3, #2
 8006046:	6453      	str	r3, [r2, #68]	; 0x44
 8006048:	4b14      	ldr	r3, [pc, #80]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	4a0f      	ldr	r2, [pc, #60]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 800605e:	f043 0304 	orr.w	r3, r3, #4
 8006062:	6313      	str	r3, [r2, #48]	; 0x30
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_TIM_Encoder_MspInit+0x254>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006070:	23c0      	movs	r3, #192	; 0xc0
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006074:	2302      	movs	r3, #2
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006078:	2300      	movs	r3, #0
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607c:	2300      	movs	r3, #0
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006080:	2303      	movs	r3, #3
 8006082:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006088:	4619      	mov	r1, r3
 800608a:	480a      	ldr	r0, [pc, #40]	; (80060b4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800608c:	f001 fd0c 	bl	8007aa8 <HAL_GPIO_Init>
}
 8006090:	bf00      	nop
 8006092:	3748      	adds	r7, #72	; 0x48
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40010000 	.word	0x40010000
 800609c:	40023800 	.word	0x40023800
 80060a0:	40020000 	.word	0x40020000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40020400 	.word	0x40020400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40010400 	.word	0x40010400
 80060b4:	40020800 	.word	0x40020800

080060b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_TIM_Base_MspInit+0x70>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d116      	bne.n	80060f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 80060d4:	f043 0310 	orr.w	r3, r3, #16
 80060d8:	6413      	str	r3, [r2, #64]	; 0x40
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	2036      	movs	r0, #54	; 0x36
 80060ec:	f001 f913 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80060f0:	2036      	movs	r0, #54	; 0x36
 80060f2:	f001 f92c 	bl	800734e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80060f6:	e012      	b.n	800611e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <HAL_TIM_Base_MspInit+0x78>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10d      	bne.n	800611e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	6413      	str	r3, [r2, #64]	; 0x40
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_TIM_Base_MspInit+0x74>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40001000 	.word	0x40001000
 800612c:	40023800 	.word	0x40023800
 8006130:	40002000 	.word	0x40002000

08006134 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0b      	ldr	r2, [pc, #44]	; (8006170 <HAL_TIM_PWM_MspInit+0x3c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d10d      	bne.n	8006162 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_TIM_PWM_MspInit+0x40>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <HAL_TIM_PWM_MspInit+0x40>)
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	6413      	str	r3, [r2, #64]	; 0x40
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <HAL_TIM_PWM_MspInit+0x40>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40001800 	.word	0x40001800
 8006174:	40023800 	.word	0x40023800

08006178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_TIM_MspPostInit+0xb0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d11f      	bne.n	80061da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	4b23      	ldr	r3, [pc, #140]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061a4:	f043 0302 	orr.w	r3, r3, #2
 80061a8:	6313      	str	r3, [r2, #48]	; 0x30
 80061aa:	4b20      	ldr	r3, [pc, #128]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80061b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80061ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061bc:	2302      	movs	r3, #2
 80061be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c4:	2300      	movs	r3, #0
 80061c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80061c8:	2309      	movs	r3, #9
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	4619      	mov	r1, r3
 80061d2:	4817      	ldr	r0, [pc, #92]	; (8006230 <HAL_TIM_MspPostInit+0xb8>)
 80061d4:	f001 fc68 	bl	8007aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80061d8:	e022      	b.n	8006220 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM14)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <HAL_TIM_MspPostInit+0xbc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d11d      	bne.n	8006220 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4a0f      	ldr	r2, [pc, #60]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6313      	str	r3, [r2, #48]	; 0x30
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <HAL_TIM_MspPostInit+0xb4>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006204:	2302      	movs	r3, #2
 8006206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620c:	2300      	movs	r3, #0
 800620e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006210:	2309      	movs	r3, #9
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006214:	f107 0314 	add.w	r3, r7, #20
 8006218:	4619      	mov	r1, r3
 800621a:	4807      	ldr	r0, [pc, #28]	; (8006238 <HAL_TIM_MspPostInit+0xc0>)
 800621c:	f001 fc44 	bl	8007aa8 <HAL_GPIO_Init>
}
 8006220:	bf00      	nop
 8006222:	3728      	adds	r7, #40	; 0x28
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40001800 	.word	0x40001800
 800622c:	40023800 	.word	0x40023800
 8006230:	40020400 	.word	0x40020400
 8006234:	40002000 	.word	0x40002000
 8006238:	40020000 	.word	0x40020000

0800623c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <MX_UART4_Init+0x4c>)
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <MX_UART4_Init+0x50>)
 8006244:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <MX_UART4_Init+0x4c>)
 8006248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800624c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <MX_UART4_Init+0x4c>)
 8006250:	2200      	movs	r2, #0
 8006252:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <MX_UART4_Init+0x4c>)
 8006256:	2200      	movs	r2, #0
 8006258:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <MX_UART4_Init+0x4c>)
 800625c:	2200      	movs	r2, #0
 800625e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <MX_UART4_Init+0x4c>)
 8006262:	220c      	movs	r2, #12
 8006264:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <MX_UART4_Init+0x4c>)
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <MX_UART4_Init+0x4c>)
 800626e:	2200      	movs	r2, #0
 8006270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006272:	4805      	ldr	r0, [pc, #20]	; (8006288 <MX_UART4_Init+0x4c>)
 8006274:	f004 f900 	bl	800a478 <HAL_UART_Init>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800627e:	f7ff f895 	bl	80053ac <Error_Handler>
  }

}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200005a0 	.word	0x200005a0
 800628c:	40004c00 	.word	0x40004c00

08006290 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <MX_USART2_UART_Init+0x50>)
 8006298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 800629c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062a2:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062b6:	220c      	movs	r2, #12
 80062b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062c6:	4805      	ldr	r0, [pc, #20]	; (80062dc <MX_USART2_UART_Init+0x4c>)
 80062c8:	f004 f8d6 	bl	800a478 <HAL_UART_Init>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062d2:	f7ff f86b 	bl	80053ac <Error_Handler>
  }

}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200005e0 	.word	0x200005e0
 80062e0:	40004400 	.word	0x40004400

080062e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ec:	f107 031c 	add.w	r3, r7, #28
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6a      	ldr	r2, [pc, #424]	; (80064ac <HAL_UART_MspInit+0x1c8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d135      	bne.n	8006372 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	4b69      	ldr	r3, [pc, #420]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a68      	ldr	r2, [pc, #416]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
 8006316:	4b66      	ldr	r3, [pc, #408]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	4b62      	ldr	r3, [pc, #392]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	4a61      	ldr	r2, [pc, #388]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	6313      	str	r3, [r2, #48]	; 0x30
 8006332:	4b5f      	ldr	r3, [pc, #380]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800633e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006344:	2302      	movs	r3, #2
 8006346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006348:	2301      	movs	r3, #1
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800634c:	2303      	movs	r3, #3
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006350:	2308      	movs	r3, #8
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006354:	f107 031c 	add.w	r3, r7, #28
 8006358:	4619      	mov	r1, r3
 800635a:	4856      	ldr	r0, [pc, #344]	; (80064b4 <HAL_UART_MspInit+0x1d0>)
 800635c:	f001 fba4 	bl	8007aa8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006360:	2200      	movs	r2, #0
 8006362:	2100      	movs	r1, #0
 8006364:	2034      	movs	r0, #52	; 0x34
 8006366:	f000 ffd6 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800636a:	2034      	movs	r0, #52	; 0x34
 800636c:	f000 ffef 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006370:	e097      	b.n	80064a2 <HAL_UART_MspInit+0x1be>
  else if(uartHandle->Instance==USART2)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a50      	ldr	r2, [pc, #320]	; (80064b8 <HAL_UART_MspInit+0x1d4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	f040 8092 	bne.w	80064a2 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	4b4b      	ldr	r3, [pc, #300]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a4a      	ldr	r2, [pc, #296]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638c:	6413      	str	r3, [r2, #64]	; 0x40
 800638e:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b44      	ldr	r3, [pc, #272]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a43      	ldr	r2, [pc, #268]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b41      	ldr	r3, [pc, #260]	; (80064b0 <HAL_UART_MspInit+0x1cc>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80063b6:	230c      	movs	r3, #12
 80063b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ba:	2302      	movs	r3, #2
 80063bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c2:	2303      	movs	r3, #3
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063c6:	2307      	movs	r3, #7
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ca:	f107 031c 	add.w	r3, r7, #28
 80063ce:	4619      	mov	r1, r3
 80063d0:	483a      	ldr	r0, [pc, #232]	; (80064bc <HAL_UART_MspInit+0x1d8>)
 80063d2:	f001 fb69 	bl	8007aa8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063d6:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063d8:	4a3a      	ldr	r2, [pc, #232]	; (80064c4 <HAL_UART_MspInit+0x1e0>)
 80063da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063e4:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ea:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063f0:	4b33      	ldr	r3, [pc, #204]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063f8:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 8006400:	2200      	movs	r2, #0
 8006402:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 8006406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800640a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800640c:	4b2c      	ldr	r3, [pc, #176]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006412:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 8006414:	2200      	movs	r2, #0
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006418:	4829      	ldr	r0, [pc, #164]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 800641a:	f000 ffb3 	bl	8007384 <HAL_DMA_Init>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8006424:	f7fe ffc2 	bl	80053ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 800642c:	635a      	str	r2, [r3, #52]	; 0x34
 800642e:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <HAL_UART_MspInit+0x1dc>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006436:	4a25      	ldr	r2, [pc, #148]	; (80064cc <HAL_UART_MspInit+0x1e8>)
 8006438:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800643a:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800643c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006440:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006442:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006444:	2240      	movs	r2, #64	; 0x40
 8006446:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006448:	4b1f      	ldr	r3, [pc, #124]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800644a:	2200      	movs	r2, #0
 800644c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800644e:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006454:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006458:	2200      	movs	r2, #0
 800645a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800645e:	2200      	movs	r2, #0
 8006460:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8006462:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006468:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800646c:	2200      	movs	r2, #0
 800646e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006470:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006472:	2200      	movs	r2, #0
 8006474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006476:	4814      	ldr	r0, [pc, #80]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 8006478:	f000 ff84 	bl	8007384 <HAL_DMA_Init>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8006482:	f7fe ff93 	bl	80053ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a0f      	ldr	r2, [pc, #60]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
 800648c:	4a0e      	ldr	r2, [pc, #56]	; (80064c8 <HAL_UART_MspInit+0x1e4>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	2026      	movs	r0, #38	; 0x26
 8006498:	f000 ff3d 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800649c:	2026      	movs	r0, #38	; 0x26
 800649e:	f000 ff56 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 80064a2:	bf00      	nop
 80064a4:	3730      	adds	r7, #48	; 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40004c00 	.word	0x40004c00
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40020800 	.word	0x40020800
 80064b8:	40004400 	.word	0x40004400
 80064bc:	40020000 	.word	0x40020000
 80064c0:	200004e0 	.word	0x200004e0
 80064c4:	40026088 	.word	0x40026088
 80064c8:	20000540 	.word	0x20000540
 80064cc:	400260a0 	.word	0x400260a0

080064d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80064d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064d6:	e003      	b.n	80064e0 <LoopCopyDataInit>

080064d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064d8:	4b0c      	ldr	r3, [pc, #48]	; (800650c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064de:	3104      	adds	r1, #4

080064e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064e0:	480b      	ldr	r0, [pc, #44]	; (8006510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80064e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064e8:	d3f6      	bcc.n	80064d8 <CopyDataInit>
  ldr  r2, =_sbss
 80064ea:	4a0b      	ldr	r2, [pc, #44]	; (8006518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80064ec:	e002      	b.n	80064f4 <LoopFillZerobss>

080064ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80064f0:	f842 3b04 	str.w	r3, [r2], #4

080064f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80064f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80064f8:	d3f9      	bcc.n	80064ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064fa:	f7ff fa0f 	bl	800591c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064fe:	f006 fe01 	bl	800d104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006502:	f7fe fcc3 	bl	8004e8c <main>
  bx  lr    
 8006506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006508:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800650c:	08012d24 	.word	0x08012d24
  ldr  r0, =_sdata
 8006510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006514:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006518:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800651c:	20000634 	.word	0x20000634

08006520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006520:	e7fe      	b.n	8006520 <ADC_IRQHandler>
	...

08006524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <HAL_Init+0x40>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <HAL_Init+0x40>)
 800652e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <HAL_Init+0x40>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_Init+0x40>)
 800653a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_Init+0x40>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a07      	ldr	r2, [pc, #28]	; (8006564 <HAL_Init+0x40>)
 8006546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800654c:	2003      	movs	r0, #3
 800654e:	f000 fed7 	bl	8007300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006552:	2000      	movs	r0, #0
 8006554:	f000 f808 	bl	8006568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006558:	f7ff f878 	bl	800564c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023c00 	.word	0x40023c00

08006568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <HAL_InitTick+0x54>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_InitTick+0x58>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800657e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	4618      	mov	r0, r3
 8006588:	f000 feef 	bl	800736a <HAL_SYSTICK_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e00e      	b.n	80065b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0f      	cmp	r3, #15
 800659a:	d80a      	bhi.n	80065b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800659c:	2200      	movs	r2, #0
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	f000 feb7 	bl	8007316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065a8:	4a06      	ldr	r2, [pc, #24]	; (80065c4 <HAL_InitTick+0x5c>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000000 	.word	0x20000000
 80065c0:	20000008 	.word	0x20000008
 80065c4:	20000004 	.word	0x20000004

080065c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <HAL_IncTick+0x20>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_IncTick+0x24>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4413      	add	r3, r2
 80065d8:	4a04      	ldr	r2, [pc, #16]	; (80065ec <HAL_IncTick+0x24>)
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	20000008 	.word	0x20000008
 80065ec:	20000620 	.word	0x20000620

080065f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return uwTick;
 80065f4:	4b03      	ldr	r3, [pc, #12]	; (8006604 <HAL_GetTick+0x14>)
 80065f6:	681b      	ldr	r3, [r3, #0]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000620 	.word	0x20000620

08006608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006610:	f7ff ffee 	bl	80065f0 <HAL_GetTick>
 8006614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d005      	beq.n	800662e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <HAL_Delay+0x44>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800662e:	bf00      	nop
 8006630:	f7ff ffde 	bl	80065f0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	429a      	cmp	r2, r3
 800663e:	d8f7      	bhi.n	8006630 <HAL_Delay+0x28>
  {
  }
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000008 	.word	0x20000008

08006650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e0ed      	b.n	800683e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe fa6a 	bl	8004b48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0202 	bic.w	r2, r2, #2
 8006682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006684:	f7ff ffb4 	bl	80065f0 <HAL_GetTick>
 8006688:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800668a:	e012      	b.n	80066b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800668c:	f7ff ffb0 	bl	80065f0 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b0a      	cmp	r3, #10
 8006698:	d90b      	bls.n	80066b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2205      	movs	r2, #5
 80066aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0c5      	b.n	800683e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066d0:	f7ff ff8e 	bl	80065f0 <HAL_GetTick>
 80066d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80066d6:	e012      	b.n	80066fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066d8:	f7ff ff8a 	bl	80065f0 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b0a      	cmp	r3, #10
 80066e4:	d90b      	bls.n	80066fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2205      	movs	r2, #5
 80066f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e09f      	b.n	800683e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0e5      	beq.n	80066d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7e1b      	ldrb	r3, [r3, #24]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d108      	bne.n	8006726 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e007      	b.n	8006736 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7e5b      	ldrb	r3, [r3, #25]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d108      	bne.n	8006750 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e007      	b.n	8006760 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	7e9b      	ldrb	r3, [r3, #26]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0220 	orr.w	r2, r2, #32
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e007      	b.n	800678a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0220 	bic.w	r2, r2, #32
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7edb      	ldrb	r3, [r3, #27]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d108      	bne.n	80067a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0210 	bic.w	r2, r2, #16
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e007      	b.n	80067b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0210 	orr.w	r2, r2, #16
 80067b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7f1b      	ldrb	r3, [r3, #28]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d108      	bne.n	80067ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0208 	orr.w	r2, r2, #8
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e007      	b.n	80067de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0208 	bic.w	r2, r2, #8
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7f5b      	ldrb	r3, [r3, #29]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0204 	orr.w	r2, r2, #4
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e007      	b.n	8006808 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	ea42 0103 	orr.w	r1, r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	1e5a      	subs	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800685e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006860:	7cfb      	ldrb	r3, [r7, #19]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d003      	beq.n	800686e <HAL_CAN_ConfigFilter+0x26>
 8006866:	7cfb      	ldrb	r3, [r7, #19]
 8006868:	2b02      	cmp	r3, #2
 800686a:	f040 80be 	bne.w	80069ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800686e:	4b65      	ldr	r3, [pc, #404]	; (8006a04 <HAL_CAN_ConfigFilter+0x1bc>)
 8006870:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006888:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	431a      	orrs	r2, r3
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	2201      	movs	r2, #1
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	43db      	mvns	r3, r3
 80068c0:	401a      	ands	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d123      	bne.n	8006918 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	43db      	mvns	r3, r3
 80068da:	401a      	ands	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80068f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3248      	adds	r2, #72	; 0x48
 80068f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800690c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	3348      	adds	r3, #72	; 0x48
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	440b      	add	r3, r1
 8006916:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d122      	bne.n	8006966 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	431a      	orrs	r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006940:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3248      	adds	r2, #72	; 0x48
 8006946:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800695a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800695c:	6979      	ldr	r1, [r7, #20]
 800695e:	3348      	adds	r3, #72	; 0x48
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	440b      	add	r3, r1
 8006964:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	43db      	mvns	r3, r3
 8006978:	401a      	ands	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006980:	e007      	b.n	8006992 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	431a      	orrs	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	401a      	ands	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80069ac:	e007      	b.n	80069be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069dc:	f023 0201 	bic.w	r2, r3, #1
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e006      	b.n	80069f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40006400 	.word	0x40006400

08006a08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d12e      	bne.n	8006a7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a34:	f7ff fddc 	bl	80065f0 <HAL_GetTick>
 8006a38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006a3a:	e012      	b.n	8006a62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a3c:	f7ff fdd8 	bl	80065f0 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b0a      	cmp	r3, #10
 8006a48:	d90b      	bls.n	8006a62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2205      	movs	r2, #5
 8006a5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e012      	b.n	8006a88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e5      	bne.n	8006a3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e006      	b.n	8006a88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aa4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d003      	beq.n	8006ab4 <HAL_CAN_GetRxMessage+0x24>
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f040 80f3 	bne.w	8006c9a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10e      	bne.n	8006ad8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d116      	bne.n	8006af6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0e7      	b.n	8006ca8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0d8      	b.n	8006ca8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	331b      	adds	r3, #27
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0204 	and.w	r2, r3, #4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	331b      	adds	r3, #27
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4413      	add	r3, r2
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	0d5b      	lsrs	r3, r3, #21
 8006b24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e00b      	b.n	8006b46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	331b      	adds	r3, #27
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	08db      	lsrs	r3, r3, #3
 8006b3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	331b      	adds	r3, #27
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	4413      	add	r3, r2
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0202 	and.w	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	331b      	adds	r3, #27
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4413      	add	r3, r2
 8006b68:	3304      	adds	r3, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	331b      	adds	r3, #27
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4413      	add	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	331b      	adds	r3, #27
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	4413      	add	r3, r2
 8006b98:	3304      	adds	r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	0a1a      	lsrs	r2, r3, #8
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	0c1a      	lsrs	r2, r3, #16
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3302      	adds	r3, #2
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	0e1a      	lsrs	r2, r3, #24
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3303      	adds	r3, #3
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	0a1a      	lsrs	r2, r3, #8
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	3305      	adds	r3, #5
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	0c1a      	lsrs	r2, r3, #16
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	3306      	adds	r3, #6
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0e1a      	lsrs	r2, r3, #24
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	3307      	adds	r3, #7
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0220 	orr.w	r2, r2, #32
 8006c82:	60da      	str	r2, [r3, #12]
 8006c84:	e007      	b.n	8006c96 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0220 	orr.w	r2, r2, #32
 8006c94:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e006      	b.n	8006ca8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cc4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <HAL_CAN_ActivateNotification+0x1e>
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d109      	bne.n	8006ce6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6959      	ldr	r1, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e006      	b.n	8006cf4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d07c      	beq.n	8006e40 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d023      	beq.n	8006d98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2201      	movs	r2, #1
 8006d56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f983 	bl	800706e <HAL_CAN_TxMailbox0CompleteCallback>
 8006d68:	e016      	b.n	8006d98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	e00c      	b.n	8006d98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e002      	b.n	8006d98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f989 	bl	80070aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d024      	beq.n	8006dec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006daa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f963 	bl	8007082 <HAL_CAN_TxMailbox1CompleteCallback>
 8006dbc:	e016      	b.n	8006dec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd0:	e00c      	b.n	8006dec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
 8006de4:	e002      	b.n	8006dec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f969 	bl	80070be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d024      	beq.n	8006e40 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006dfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f943 	bl	8007096 <HAL_CAN_TxMailbox2CompleteCallback>
 8006e10:	e016      	b.n	8006e40 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
 8006e24:	e00c      	b.n	8006e40 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	e002      	b.n	8006e40 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f949 	bl	80070d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2210      	movs	r2, #16
 8006e62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f930 	bl	80070e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fb fdac 	bl	80029fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f912 	bl	800710e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8f9 	bl	80070fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2210      	movs	r2, #16
 8006f22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f8fc 	bl	8007122 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2208      	movs	r2, #8
 8006f44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f8f5 	bl	8007136 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d07b      	beq.n	800704e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d072      	beq.n	8007046 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f043 0304 	orr.w	r3, r3, #4
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d043      	beq.n	8007046 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03e      	beq.n	8007046 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fce:	2b60      	cmp	r3, #96	; 0x60
 8006fd0:	d02b      	beq.n	800702a <HAL_CAN_IRQHandler+0x32a>
 8006fd2:	2b60      	cmp	r3, #96	; 0x60
 8006fd4:	d82e      	bhi.n	8007034 <HAL_CAN_IRQHandler+0x334>
 8006fd6:	2b50      	cmp	r3, #80	; 0x50
 8006fd8:	d022      	beq.n	8007020 <HAL_CAN_IRQHandler+0x320>
 8006fda:	2b50      	cmp	r3, #80	; 0x50
 8006fdc:	d82a      	bhi.n	8007034 <HAL_CAN_IRQHandler+0x334>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d019      	beq.n	8007016 <HAL_CAN_IRQHandler+0x316>
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d826      	bhi.n	8007034 <HAL_CAN_IRQHandler+0x334>
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	d010      	beq.n	800700c <HAL_CAN_IRQHandler+0x30c>
 8006fea:	2b30      	cmp	r3, #48	; 0x30
 8006fec:	d822      	bhi.n	8007034 <HAL_CAN_IRQHandler+0x334>
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d002      	beq.n	8006ff8 <HAL_CAN_IRQHandler+0x2f8>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d005      	beq.n	8007002 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006ff6:	e01d      	b.n	8007034 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	f043 0308 	orr.w	r3, r3, #8
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007000:	e019      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	f043 0310 	orr.w	r3, r3, #16
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800700a:	e014      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	f043 0320 	orr.w	r3, r3, #32
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007014:	e00f      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800701e:	e00a      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007028:	e005      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007032:	e000      	b.n	8007036 <HAL_CAN_IRQHandler+0x336>
            break;
 8007034:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007044:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2204      	movs	r2, #4
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f872 	bl	800714a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007066:	bf00      	nop
 8007068:	3728      	adds	r7, #40	; 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800717c:	4013      	ands	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800718c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	60d3      	str	r3, [r2, #12]
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	e000ed00 	.word	0xe000ed00

080071a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071ac:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <__NVIC_GetPriorityGrouping+0x18>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	0a1b      	lsrs	r3, r3, #8
 80071b2:	f003 0307 	and.w	r3, r3, #7
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	e000ed00 	.word	0xe000ed00

080071c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	db0b      	blt.n	80071ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	f003 021f 	and.w	r2, r3, #31
 80071dc:	4907      	ldr	r1, [pc, #28]	; (80071fc <__NVIC_EnableIRQ+0x38>)
 80071de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	2001      	movs	r0, #1
 80071e6:	fa00 f202 	lsl.w	r2, r0, r2
 80071ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	e000e100 	.word	0xe000e100

08007200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	6039      	str	r1, [r7, #0]
 800720a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800720c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007210:	2b00      	cmp	r3, #0
 8007212:	db0a      	blt.n	800722a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	490c      	ldr	r1, [pc, #48]	; (800724c <__NVIC_SetPriority+0x4c>)
 800721a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721e:	0112      	lsls	r2, r2, #4
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	440b      	add	r3, r1
 8007224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007228:	e00a      	b.n	8007240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4908      	ldr	r1, [pc, #32]	; (8007250 <__NVIC_SetPriority+0x50>)
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	3b04      	subs	r3, #4
 8007238:	0112      	lsls	r2, r2, #4
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	440b      	add	r3, r1
 800723e:	761a      	strb	r2, [r3, #24]
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000e100 	.word	0xe000e100
 8007250:	e000ed00 	.word	0xe000ed00

08007254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	; 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f1c3 0307 	rsb	r3, r3, #7
 800726e:	2b04      	cmp	r3, #4
 8007270:	bf28      	it	cs
 8007272:	2304      	movcs	r3, #4
 8007274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3304      	adds	r3, #4
 800727a:	2b06      	cmp	r3, #6
 800727c:	d902      	bls.n	8007284 <NVIC_EncodePriority+0x30>
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3b03      	subs	r3, #3
 8007282:	e000      	b.n	8007286 <NVIC_EncodePriority+0x32>
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	43da      	mvns	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	401a      	ands	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800729c:	f04f 31ff 	mov.w	r1, #4294967295
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	fa01 f303 	lsl.w	r3, r1, r3
 80072a6:	43d9      	mvns	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072ac:	4313      	orrs	r3, r2
         );
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3724      	adds	r7, #36	; 0x24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
	...

080072bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072cc:	d301      	bcc.n	80072d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00f      	b.n	80072f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072d2:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <SysTick_Config+0x40>)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072da:	210f      	movs	r1, #15
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	f7ff ff8e 	bl	8007200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <SysTick_Config+0x40>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <SysTick_Config+0x40>)
 80072ec:	2207      	movs	r2, #7
 80072ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	e000e010 	.word	0xe000e010

08007300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ff29 	bl	8007160 <__NVIC_SetPriorityGrouping>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	4603      	mov	r3, r0
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007328:	f7ff ff3e 	bl	80071a8 <__NVIC_GetPriorityGrouping>
 800732c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	6978      	ldr	r0, [r7, #20]
 8007334:	f7ff ff8e 	bl	8007254 <NVIC_EncodePriority>
 8007338:	4602      	mov	r2, r0
 800733a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff5d 	bl	8007200 <__NVIC_SetPriority>
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	4603      	mov	r3, r0
 8007356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff31 	bl	80071c4 <__NVIC_EnableIRQ>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ffa2 	bl	80072bc <SysTick_Config>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007390:	f7ff f92e 	bl	80065f0 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e099      	b.n	80074d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0201 	bic.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073c0:	e00f      	b.n	80073e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073c2:	f7ff f915 	bl	80065f0 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b05      	cmp	r3, #5
 80073ce:	d908      	bls.n	80073e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2203      	movs	r2, #3
 80073da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e078      	b.n	80074d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e8      	bne.n	80073c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4b38      	ldr	r3, [pc, #224]	; (80074dc <HAL_DMA_Init+0x158>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800740e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800741a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	2b04      	cmp	r3, #4
 800743a:	d107      	bne.n	800744c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	4313      	orrs	r3, r2
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	2b04      	cmp	r3, #4
 8007474:	d117      	bne.n	80074a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fa91 	bl	80079b0 <DMA_CheckFifoParam>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074a2:	2301      	movs	r3, #1
 80074a4:	e016      	b.n	80074d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa48 	bl	8007944 <DMA_CalcBaseAndBitshift>
 80074b4:	4603      	mov	r3, r0
 80074b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074bc:	223f      	movs	r2, #63	; 0x3f
 80074be:	409a      	lsls	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	f010803f 	.word	0xf010803f

080074e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_DMA_Start_IT+0x26>
 8007502:	2302      	movs	r3, #2
 8007504:	e040      	b.n	8007588 <HAL_DMA_Start_IT+0xa8>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d12f      	bne.n	800757a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f9da 	bl	80078e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007538:	223f      	movs	r2, #63	; 0x3f
 800753a:	409a      	lsls	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0216 	orr.w	r2, r2, #22
 800754e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0208 	orr.w	r2, r2, #8
 8007566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	e005      	b.n	8007586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007582:	2302      	movs	r3, #2
 8007584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d004      	beq.n	80075ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2280      	movs	r2, #128	; 0x80
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e00c      	b.n	80075c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2205      	movs	r2, #5
 80075b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075e0:	4b92      	ldr	r3, [pc, #584]	; (800782c <HAL_DMA_IRQHandler+0x258>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a92      	ldr	r2, [pc, #584]	; (8007830 <HAL_DMA_IRQHandler+0x25c>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	0a9b      	lsrs	r3, r3, #10
 80075ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	2208      	movs	r2, #8
 8007600:	409a      	lsls	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4013      	ands	r3, r2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01a      	beq.n	8007640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d013      	beq.n	8007640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0204 	bic.w	r2, r2, #4
 8007626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762c:	2208      	movs	r2, #8
 800762e:	409a      	lsls	r2, r3
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	f043 0201 	orr.w	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007644:	2201      	movs	r2, #1
 8007646:	409a      	lsls	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007662:	2201      	movs	r2, #1
 8007664:	409a      	lsls	r2, r3
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f043 0202 	orr.w	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767a:	2204      	movs	r2, #4
 800767c:	409a      	lsls	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d012      	beq.n	80076ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	2204      	movs	r2, #4
 800769a:	409a      	lsls	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	f043 0204 	orr.w	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b0:	2210      	movs	r2, #16
 80076b2:	409a      	lsls	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d043      	beq.n	8007744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d03c      	beq.n	8007744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ce:	2210      	movs	r2, #16
 80076d0:	409a      	lsls	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d018      	beq.n	8007716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d024      	beq.n	8007744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
 8007702:	e01f      	b.n	8007744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01b      	beq.n	8007744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	e016      	b.n	8007744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0208 	bic.w	r2, r2, #8
 8007732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007748:	2220      	movs	r2, #32
 800774a:	409a      	lsls	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 808e 	beq.w	8007872 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8086 	beq.w	8007872 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776a:	2220      	movs	r2, #32
 800776c:	409a      	lsls	r2, r3
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b05      	cmp	r3, #5
 800777c:	d136      	bne.n	80077ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0216 	bic.w	r2, r2, #22
 800778c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <HAL_DMA_IRQHandler+0x1da>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0208 	bic.w	r2, r2, #8
 80077bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c2:	223f      	movs	r2, #63	; 0x3f
 80077c4:	409a      	lsls	r2, r3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d07d      	beq.n	80078de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
        }
        return;
 80077ea:	e078      	b.n	80078de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01c      	beq.n	8007834 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	2b00      	cmp	r3, #0
 800780e:	d030      	beq.n	8007872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	e02b      	b.n	8007872 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d027      	beq.n	8007872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	e022      	b.n	8007872 <HAL_DMA_IRQHandler+0x29e>
 800782c:	20000000 	.word	0x20000000
 8007830:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10f      	bne.n	8007862 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0210 	bic.w	r2, r2, #16
 8007850:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	2b00      	cmp	r3, #0
 8007878:	d032      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d022      	beq.n	80078cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2205      	movs	r2, #5
 800788a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d307      	bcc.n	80078ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f2      	bne.n	800789e <HAL_DMA_IRQHandler+0x2ca>
 80078b8:	e000      	b.n	80078bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80078ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e000      	b.n	80078e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80078de:	bf00      	nop
    }
  }
}
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007904:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d108      	bne.n	8007928 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007926:	e007      	b.n	8007938 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
}
 8007938:	bf00      	nop
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	3b10      	subs	r3, #16
 8007954:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <DMA_CalcBaseAndBitshift+0x64>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800795e:	4a13      	ldr	r2, [pc, #76]	; (80079ac <DMA_CalcBaseAndBitshift+0x68>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d909      	bls.n	8007986 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	1d1a      	adds	r2, r3, #4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	659a      	str	r2, [r3, #88]	; 0x58
 8007984:	e007      	b.n	8007996 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	aaaaaaab 	.word	0xaaaaaaab
 80079ac:	08012398 	.word	0x08012398

080079b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d11f      	bne.n	8007a0a <DMA_CheckFifoParam+0x5a>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d856      	bhi.n	8007a7e <DMA_CheckFifoParam+0xce>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <DMA_CheckFifoParam+0x28>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	080079fb 	.word	0x080079fb
 80079e0:	080079e9 	.word	0x080079e9
 80079e4:	08007a7f 	.word	0x08007a7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d046      	beq.n	8007a82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079f8:	e043      	b.n	8007a82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a02:	d140      	bne.n	8007a86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a08:	e03d      	b.n	8007a86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a12:	d121      	bne.n	8007a58 <DMA_CheckFifoParam+0xa8>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d837      	bhi.n	8007a8a <DMA_CheckFifoParam+0xda>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <DMA_CheckFifoParam+0x70>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a31 	.word	0x08007a31
 8007a24:	08007a37 	.word	0x08007a37
 8007a28:	08007a31 	.word	0x08007a31
 8007a2c:	08007a49 	.word	0x08007a49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	73fb      	strb	r3, [r7, #15]
      break;
 8007a34:	e030      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d025      	beq.n	8007a8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a46:	e022      	b.n	8007a8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a50:	d11f      	bne.n	8007a92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a56:	e01c      	b.n	8007a92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d903      	bls.n	8007a66 <DMA_CheckFifoParam+0xb6>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d003      	beq.n	8007a6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a64:	e018      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6a:	e015      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	e00b      	b.n	8007a96 <DMA_CheckFifoParam+0xe6>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e00a      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;
 8007a82:	bf00      	nop
 8007a84:	e008      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;
 8007a86:	bf00      	nop
 8007a88:	e006      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e004      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;
 8007a8e:	bf00      	nop
 8007a90:	e002      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a92:	bf00      	nop
 8007a94:	e000      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
      break;
 8007a96:	bf00      	nop
    }
  } 
  
  return status; 
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b089      	sub	sp, #36	; 0x24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	e165      	b.n	8007d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	f040 8154 	bne.w	8007d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d00b      	beq.n	8007b02 <HAL_GPIO_Init+0x5a>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d007      	beq.n	8007b02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007af6:	2b11      	cmp	r3, #17
 8007af8:	d003      	beq.n	8007b02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b12      	cmp	r3, #18
 8007b00:	d130      	bne.n	8007b64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b38:	2201      	movs	r2, #1
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	43db      	mvns	r3, r3
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	4013      	ands	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	f003 0201 	and.w	r2, r3, #1
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	2203      	movs	r2, #3
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	43db      	mvns	r3, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d003      	beq.n	8007ba4 <HAL_GPIO_Init+0xfc>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b12      	cmp	r3, #18
 8007ba2:	d123      	bne.n	8007bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	08da      	lsrs	r2, r3, #3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3208      	adds	r2, #8
 8007bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	220f      	movs	r2, #15
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	08da      	lsrs	r2, r3, #3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3208      	adds	r2, #8
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4013      	ands	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0203 	and.w	r2, r3, #3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80ae 	beq.w	8007d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	4b5d      	ldr	r3, [pc, #372]	; (8007da8 <HAL_GPIO_Init+0x300>)
 8007c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c36:	4a5c      	ldr	r2, [pc, #368]	; (8007da8 <HAL_GPIO_Init+0x300>)
 8007c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c3e:	4b5a      	ldr	r3, [pc, #360]	; (8007da8 <HAL_GPIO_Init+0x300>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c4a:	4a58      	ldr	r2, [pc, #352]	; (8007dac <HAL_GPIO_Init+0x304>)
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	089b      	lsrs	r3, r3, #2
 8007c50:	3302      	adds	r3, #2
 8007c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	220f      	movs	r2, #15
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a4f      	ldr	r2, [pc, #316]	; (8007db0 <HAL_GPIO_Init+0x308>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d025      	beq.n	8007cc2 <HAL_GPIO_Init+0x21a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a4e      	ldr	r2, [pc, #312]	; (8007db4 <HAL_GPIO_Init+0x30c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d01f      	beq.n	8007cbe <HAL_GPIO_Init+0x216>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a4d      	ldr	r2, [pc, #308]	; (8007db8 <HAL_GPIO_Init+0x310>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d019      	beq.n	8007cba <HAL_GPIO_Init+0x212>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a4c      	ldr	r2, [pc, #304]	; (8007dbc <HAL_GPIO_Init+0x314>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_GPIO_Init+0x20e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a4b      	ldr	r2, [pc, #300]	; (8007dc0 <HAL_GPIO_Init+0x318>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00d      	beq.n	8007cb2 <HAL_GPIO_Init+0x20a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a4a      	ldr	r2, [pc, #296]	; (8007dc4 <HAL_GPIO_Init+0x31c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <HAL_GPIO_Init+0x206>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a49      	ldr	r2, [pc, #292]	; (8007dc8 <HAL_GPIO_Init+0x320>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d101      	bne.n	8007caa <HAL_GPIO_Init+0x202>
 8007ca6:	2306      	movs	r3, #6
 8007ca8:	e00c      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007caa:	2307      	movs	r3, #7
 8007cac:	e00a      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cae:	2305      	movs	r3, #5
 8007cb0:	e008      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	e006      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e004      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e002      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <HAL_GPIO_Init+0x21c>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	f002 0203 	and.w	r2, r2, #3
 8007cca:	0092      	lsls	r2, r2, #2
 8007ccc:	4093      	lsls	r3, r2
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cd4:	4935      	ldr	r1, [pc, #212]	; (8007dac <HAL_GPIO_Init+0x304>)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	3302      	adds	r3, #2
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ce2:	4b3a      	ldr	r3, [pc, #232]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d06:	4a31      	ldr	r2, [pc, #196]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007d0c:	4b2f      	ldr	r3, [pc, #188]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	43db      	mvns	r3, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d30:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d36:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d60:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <HAL_GPIO_Init+0x324>)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	f67f ae96 	bls.w	8007ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3724      	adds	r7, #36	; 0x24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800
 8007dac:	40013800 	.word	0x40013800
 8007db0:	40020000 	.word	0x40020000
 8007db4:	40020400 	.word	0x40020400
 8007db8:	40020800 	.word	0x40020800
 8007dbc:	40020c00 	.word	0x40020c00
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	40021400 	.word	0x40021400
 8007dc8:	40021800 	.word	0x40021800
 8007dcc:	40013c00 	.word	0x40013c00

08007dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007de0:	787b      	ldrb	r3, [r7, #1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dec:	e003      	b.n	8007df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	041a      	lsls	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	619a      	str	r2, [r3, #24]
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e12b      	b.n	800806e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fc ffda 	bl	8004de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2224      	movs	r2, #36	; 0x24
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e68:	f001 f854 	bl	8008f14 <HAL_RCC_GetPCLK1Freq>
 8007e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4a81      	ldr	r2, [pc, #516]	; (8008078 <HAL_I2C_Init+0x274>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d807      	bhi.n	8007e88 <HAL_I2C_Init+0x84>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a80      	ldr	r2, [pc, #512]	; (800807c <HAL_I2C_Init+0x278>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bf94      	ite	ls
 8007e80:	2301      	movls	r3, #1
 8007e82:	2300      	movhi	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e006      	b.n	8007e96 <HAL_I2C_Init+0x92>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a7d      	ldr	r2, [pc, #500]	; (8008080 <HAL_I2C_Init+0x27c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bf94      	ite	ls
 8007e90:	2301      	movls	r3, #1
 8007e92:	2300      	movhi	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e0e7      	b.n	800806e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a78      	ldr	r2, [pc, #480]	; (8008084 <HAL_I2C_Init+0x280>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0c9b      	lsrs	r3, r3, #18
 8007ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4a6a      	ldr	r2, [pc, #424]	; (8008078 <HAL_I2C_Init+0x274>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d802      	bhi.n	8007ed8 <HAL_I2C_Init+0xd4>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	e009      	b.n	8007eec <HAL_I2C_Init+0xe8>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	4a69      	ldr	r2, [pc, #420]	; (8008088 <HAL_I2C_Init+0x284>)
 8007ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee8:	099b      	lsrs	r3, r3, #6
 8007eea:	3301      	adds	r3, #1
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	495c      	ldr	r1, [pc, #368]	; (8008078 <HAL_I2C_Init+0x274>)
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	d819      	bhi.n	8007f40 <HAL_I2C_Init+0x13c>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1e59      	subs	r1, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f1a:	1c59      	adds	r1, r3, #1
 8007f1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f20:	400b      	ands	r3, r1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <HAL_I2C_Init+0x138>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	1e59      	subs	r1, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f34:	3301      	adds	r3, #1
 8007f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f3a:	e051      	b.n	8007fe0 <HAL_I2C_Init+0x1dc>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	e04f      	b.n	8007fe0 <HAL_I2C_Init+0x1dc>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d111      	bne.n	8007f6c <HAL_I2C_Init+0x168>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1e58      	subs	r0, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6859      	ldr	r1, [r3, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	440b      	add	r3, r1
 8007f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bf0c      	ite	eq
 8007f64:	2301      	moveq	r3, #1
 8007f66:	2300      	movne	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	e012      	b.n	8007f92 <HAL_I2C_Init+0x18e>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1e58      	subs	r0, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	0099      	lsls	r1, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f82:	3301      	adds	r3, #1
 8007f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_I2C_Init+0x196>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e022      	b.n	8007fe0 <HAL_I2C_Init+0x1dc>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10e      	bne.n	8007fc0 <HAL_I2C_Init+0x1bc>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1e58      	subs	r0, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6859      	ldr	r1, [r3, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	440b      	add	r3, r1
 8007fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbe:	e00f      	b.n	8007fe0 <HAL_I2C_Init+0x1dc>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	1e58      	subs	r0, r3, #1
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	0099      	lsls	r1, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	6809      	ldr	r1, [r1, #0]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69da      	ldr	r2, [r3, #28]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800800e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6911      	ldr	r1, [r2, #16]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68d2      	ldr	r2, [r2, #12]
 800801a:	4311      	orrs	r1, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	430b      	orrs	r3, r1
 8008022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695a      	ldr	r2, [r3, #20]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	000186a0 	.word	0x000186a0
 800807c:	001e847f 	.word	0x001e847f
 8008080:	003d08ff 	.word	0x003d08ff
 8008084:	431bde83 	.word	0x431bde83
 8008088:	10624dd3 	.word	0x10624dd3

0800808c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	461a      	mov	r2, r3
 8008098:	460b      	mov	r3, r1
 800809a:	817b      	strh	r3, [r7, #10]
 800809c:	4613      	mov	r3, r2
 800809e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080a0:	f7fe faa6 	bl	80065f0 <HAL_GetTick>
 80080a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	f040 80e0 	bne.w	8008274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	2319      	movs	r3, #25
 80080ba:	2201      	movs	r2, #1
 80080bc:	4970      	ldr	r1, [pc, #448]	; (8008280 <HAL_I2C_Master_Transmit+0x1f4>)
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fc58 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80080ca:	2302      	movs	r3, #2
 80080cc:	e0d3      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_I2C_Master_Transmit+0x50>
 80080d8:	2302      	movs	r3, #2
 80080da:	e0cc      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d007      	beq.n	8008102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2221      	movs	r2, #33	; 0x21
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2210      	movs	r2, #16
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	893a      	ldrh	r2, [r7, #8]
 8008132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a50      	ldr	r2, [pc, #320]	; (8008284 <HAL_I2C_Master_Transmit+0x1f8>)
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008144:	8979      	ldrh	r1, [r7, #10]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a3a      	ldr	r2, [r7, #32]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fac2 	bl	80086d4 <I2C_MasterRequestWrite>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e08d      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008170:	e066      	b.n	8008240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	6a39      	ldr	r1, [r7, #32]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fcd2 	bl	8008b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00d      	beq.n	800819e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	2b04      	cmp	r3, #4
 8008188:	d107      	bne.n	800819a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e06b      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d11b      	bne.n	8008214 <HAL_I2C_Master_Transmit+0x188>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	6a39      	ldr	r1, [r7, #32]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fcc2 	bl	8008ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00d      	beq.n	8008240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	2b04      	cmp	r3, #4
 800822a:	d107      	bne.n	800823c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e01a      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d194      	bne.n	8008172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	00100002 	.word	0x00100002
 8008284:	ffff0000 	.word	0xffff0000

08008288 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08c      	sub	sp, #48	; 0x30
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	461a      	mov	r2, r3
 8008294:	460b      	mov	r3, r1
 8008296:	817b      	strh	r3, [r7, #10]
 8008298:	4613      	mov	r3, r2
 800829a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800829c:	f7fe f9a8 	bl	80065f0 <HAL_GetTick>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	f040 820b 	bne.w	80086c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	2319      	movs	r3, #25
 80082b6:	2201      	movs	r2, #1
 80082b8:	497c      	ldr	r1, [pc, #496]	; (80084ac <HAL_I2C_Master_Receive+0x224>)
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fb5a 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
 80082c8:	e1fe      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_I2C_Master_Receive+0x50>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e1f7      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d007      	beq.n	80082fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0201 	orr.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800830c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2222      	movs	r2, #34	; 0x22
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2210      	movs	r2, #16
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	893a      	ldrh	r2, [r7, #8]
 800832e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a5c      	ldr	r2, [pc, #368]	; (80084b0 <HAL_I2C_Master_Receive+0x228>)
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008340:	8979      	ldrh	r1, [r7, #10]
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fa46 	bl	80087d8 <I2C_MasterRequestRead>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e1b8      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d113      	bne.n	8008386 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835e:	2300      	movs	r3, #0
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	623b      	str	r3, [r7, #32]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	623b      	str	r3, [r7, #32]
 8008372:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e18c      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	2b01      	cmp	r3, #1
 800838c:	d11b      	bne.n	80083c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800839c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e16c      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d11b      	bne.n	8008406 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	61bb      	str	r3, [r7, #24]
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	e14c      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008416:	2300      	movs	r3, #0
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800842c:	e138      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	2b03      	cmp	r3, #3
 8008434:	f200 80f1 	bhi.w	800861a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843c:	2b01      	cmp	r3, #1
 800843e:	d123      	bne.n	8008488 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fbed 	bl	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e139      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008486:	e10b      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800848c:	2b02      	cmp	r3, #2
 800848e:	d14e      	bne.n	800852e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	2200      	movs	r2, #0
 8008498:	4906      	ldr	r1, [pc, #24]	; (80084b4 <HAL_I2C_Master_Receive+0x22c>)
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fa6a 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e10e      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
 80084aa:	bf00      	nop
 80084ac:	00100002 	.word	0x00100002
 80084b0:	ffff0000 	.word	0xffff0000
 80084b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008516:	3b01      	subs	r3, #1
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800852c:	e0b8      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2200      	movs	r2, #0
 8008536:	4966      	ldr	r1, [pc, #408]	; (80086d0 <HAL_I2C_Master_Receive+0x448>)
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fa1b 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e0bf      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	494f      	ldr	r1, [pc, #316]	; (80086d0 <HAL_I2C_Master_Receive+0x448>)
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f9ed 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e091      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008618:	e042      	b.n	80086a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800861a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fb00 	bl	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e04c      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b04      	cmp	r3, #4
 800866c:	d118      	bne.n	80086a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f47f aec2 	bne.w	800842e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2220      	movs	r2, #32
 80086ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e000      	b.n	80086c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80086c6:	2302      	movs	r3, #2
  }
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	; 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	00010004 	.word	0x00010004

080086d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	460b      	mov	r3, r1
 80086e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d006      	beq.n	80086fe <I2C_MasterRequestWrite+0x2a>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d003      	beq.n	80086fe <I2C_MasterRequestWrite+0x2a>
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086fc:	d108      	bne.n	8008710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e00b      	b.n	8008728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	2b12      	cmp	r3, #18
 8008716:	d107      	bne.n	8008728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f91d 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00d      	beq.n	800875c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874e:	d103      	bne.n	8008758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e035      	b.n	80087c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008764:	d108      	bne.n	8008778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008766:	897b      	ldrh	r3, [r7, #10]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008774:	611a      	str	r2, [r3, #16]
 8008776:	e01b      	b.n	80087b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008778:	897b      	ldrh	r3, [r7, #10]
 800877a:	11db      	asrs	r3, r3, #7
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0306 	and.w	r3, r3, #6
 8008782:	b2db      	uxtb	r3, r3
 8008784:	f063 030f 	orn	r3, r3, #15
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	490e      	ldr	r1, [pc, #56]	; (80087d0 <I2C_MasterRequestWrite+0xfc>)
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f943 	bl	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e010      	b.n	80087c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80087a6:	897b      	ldrh	r3, [r7, #10]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4907      	ldr	r1, [pc, #28]	; (80087d4 <I2C_MasterRequestWrite+0x100>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f933 	bl	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	00010008 	.word	0x00010008
 80087d4:	00010002 	.word	0x00010002

080087d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	460b      	mov	r3, r1
 80087e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b08      	cmp	r3, #8
 8008802:	d006      	beq.n	8008812 <I2C_MasterRequestRead+0x3a>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d003      	beq.n	8008812 <I2C_MasterRequestRead+0x3a>
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008810:	d108      	bne.n	8008824 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e00b      	b.n	800883c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	2b11      	cmp	r3, #17
 800882a:	d107      	bne.n	800883c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800883a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f893 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00d      	beq.n	8008870 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	d103      	bne.n	800886c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800886a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e079      	b.n	8008964 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008878:	d108      	bne.n	800888c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800887a:	897b      	ldrh	r3, [r7, #10]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f043 0301 	orr.w	r3, r3, #1
 8008882:	b2da      	uxtb	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	611a      	str	r2, [r3, #16]
 800888a:	e05f      	b.n	800894c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800888c:	897b      	ldrh	r3, [r7, #10]
 800888e:	11db      	asrs	r3, r3, #7
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f003 0306 	and.w	r3, r3, #6
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f063 030f 	orn	r3, r3, #15
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4930      	ldr	r1, [pc, #192]	; (800896c <I2C_MasterRequestRead+0x194>)
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f8b9 	bl	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e054      	b.n	8008964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088ba:	897b      	ldrh	r3, [r7, #10]
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4929      	ldr	r1, [pc, #164]	; (8008970 <I2C_MasterRequestRead+0x198>)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f8a9 	bl	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e044      	b.n	8008964 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f831 	bl	8008974 <I2C_WaitOnFlagUntilTimeout>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00d      	beq.n	8008934 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008926:	d103      	bne.n	8008930 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800892e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e017      	b.n	8008964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008934:	897b      	ldrh	r3, [r7, #10]
 8008936:	11db      	asrs	r3, r3, #7
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0306 	and.w	r3, r3, #6
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f063 030e 	orn	r3, r3, #14
 8008944:	b2da      	uxtb	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4907      	ldr	r1, [pc, #28]	; (8008970 <I2C_MasterRequestRead+0x198>)
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f865 	bl	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	00010008 	.word	0x00010008
 8008970:	00010002 	.word	0x00010002

08008974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4613      	mov	r3, r2
 8008982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008984:	e025      	b.n	80089d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898c:	d021      	beq.n	80089d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898e:	f7fd fe2f 	bl	80065f0 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d302      	bcc.n	80089a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d116      	bne.n	80089d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f043 0220 	orr.w	r2, r3, #32
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e023      	b.n	8008a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d10d      	bne.n	80089f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	43da      	mvns	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4013      	ands	r3, r2
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	e00c      	b.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	43da      	mvns	r2, r3
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4013      	ands	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d0b6      	beq.n	8008986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a30:	e051      	b.n	8008ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a40:	d123      	bne.n	8008a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f043 0204 	orr.w	r2, r3, #4
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e046      	b.n	8008b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d021      	beq.n	8008ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a92:	f7fd fdad 	bl	80065f0 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d302      	bcc.n	8008aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d116      	bne.n	8008ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	f043 0220 	orr.w	r2, r3, #32
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e020      	b.n	8008b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	0c1b      	lsrs	r3, r3, #16
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d10c      	bne.n	8008afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	43da      	mvns	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4013      	ands	r3, r2
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	2300      	moveq	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	e00b      	b.n	8008b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	43da      	mvns	r2, r3
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4013      	ands	r3, r2
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d18d      	bne.n	8008a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b2c:	e02d      	b.n	8008b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f8ce 	bl	8008cd0 <I2C_IsAcknowledgeFailed>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e02d      	b.n	8008b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d021      	beq.n	8008b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b46:	f7fd fd53 	bl	80065f0 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d302      	bcc.n	8008b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d116      	bne.n	8008b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	f043 0220 	orr.w	r2, r3, #32
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e007      	b.n	8008b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b94:	2b80      	cmp	r3, #128	; 0x80
 8008b96:	d1ca      	bne.n	8008b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008bae:	e02d      	b.n	8008c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f88d 	bl	8008cd0 <I2C_IsAcknowledgeFailed>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e02d      	b.n	8008c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d021      	beq.n	8008c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc8:	f7fd fd12 	bl	80065f0 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d302      	bcc.n	8008bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d116      	bne.n	8008c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f043 0220 	orr.w	r2, r3, #32
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e007      	b.n	8008c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d1ca      	bne.n	8008bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c30:	e042      	b.n	8008cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d119      	bne.n	8008c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0210 	mvn.w	r2, #16
 8008c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e029      	b.n	8008cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c74:	f7fd fcbc 	bl	80065f0 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d116      	bne.n	8008cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	f043 0220 	orr.w	r2, r3, #32
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e007      	b.n	8008cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc2:	2b40      	cmp	r3, #64	; 0x40
 8008cc4:	d1b5      	bne.n	8008c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce6:	d11b      	bne.n	8008d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	f043 0204 	orr.w	r2, r3, #4
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0cc      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d44:	4b68      	ldr	r3, [pc, #416]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d90c      	bls.n	8008d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d52:	4b65      	ldr	r3, [pc, #404]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d5a:	4b63      	ldr	r3, [pc, #396]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d001      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e0b8      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d020      	beq.n	8008dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d84:	4b59      	ldr	r3, [pc, #356]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4a58      	ldr	r2, [pc, #352]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d9c:	4b53      	ldr	r3, [pc, #332]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	4a52      	ldr	r2, [pc, #328]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008da8:	4b50      	ldr	r3, [pc, #320]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	494d      	ldr	r1, [pc, #308]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d044      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d107      	bne.n	8008dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dce:	4b47      	ldr	r3, [pc, #284]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d119      	bne.n	8008e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e07f      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d003      	beq.n	8008dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d107      	bne.n	8008dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dee:	4b3f      	ldr	r3, [pc, #252]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e06f      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dfe:	4b3b      	ldr	r3, [pc, #236]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e067      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e0e:	4b37      	ldr	r3, [pc, #220]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f023 0203 	bic.w	r2, r3, #3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4934      	ldr	r1, [pc, #208]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e20:	f7fd fbe6 	bl	80065f0 <HAL_GetTick>
 8008e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e26:	e00a      	b.n	8008e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e28:	f7fd fbe2 	bl	80065f0 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e04f      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 020c 	and.w	r2, r3, #12
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d1eb      	bne.n	8008e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e50:	4b25      	ldr	r3, [pc, #148]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d20c      	bcs.n	8008e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e5e:	4b22      	ldr	r3, [pc, #136]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e66:	4b20      	ldr	r3, [pc, #128]	; (8008ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 030f 	and.w	r3, r3, #15
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d001      	beq.n	8008e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e032      	b.n	8008ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	4916      	ldr	r1, [pc, #88]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ea2:	4b12      	ldr	r3, [pc, #72]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	490e      	ldr	r1, [pc, #56]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008eb6:	f000 f855 	bl	8008f64 <HAL_RCC_GetSysClockFreq>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <HAL_RCC_ClockConfig+0x1bc>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	490a      	ldr	r1, [pc, #40]	; (8008ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8008ec8:	5ccb      	ldrb	r3, [r1, r3]
 8008eca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ece:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8008ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fd fb46 	bl	8006568 <HAL_InitTick>

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40023c00 	.word	0x40023c00
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	08012380 	.word	0x08012380
 8008ef4:	20000000 	.word	0x20000000
 8008ef8:	20000004 	.word	0x20000004

08008efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f00:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f02:	681b      	ldr	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000000 	.word	0x20000000

08008f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f18:	f7ff fff0 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	0a9b      	lsrs	r3, r3, #10
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	4903      	ldr	r1, [pc, #12]	; (8008f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f2a:	5ccb      	ldrb	r3, [r1, r3]
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40023800 	.word	0x40023800
 8008f38:	08012390 	.word	0x08012390

08008f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f40:	f7ff ffdc 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8008f44:	4602      	mov	r2, r0
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	0b5b      	lsrs	r3, r3, #13
 8008f4c:	f003 0307 	and.w	r3, r3, #7
 8008f50:	4903      	ldr	r1, [pc, #12]	; (8008f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f52:	5ccb      	ldrb	r3, [r1, r3]
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40023800 	.word	0x40023800
 8008f60:	08012390 	.word	0x08012390

08008f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f80:	4bce      	ldr	r3, [pc, #824]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 030c 	and.w	r3, r3, #12
 8008f88:	2b0c      	cmp	r3, #12
 8008f8a:	f200 818d 	bhi.w	80092a8 <HAL_RCC_GetSysClockFreq+0x344>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <HAL_RCC_GetSysClockFreq+0x30>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fc9 	.word	0x08008fc9
 8008f98:	080092a9 	.word	0x080092a9
 8008f9c:	080092a9 	.word	0x080092a9
 8008fa0:	080092a9 	.word	0x080092a9
 8008fa4:	08008fcf 	.word	0x08008fcf
 8008fa8:	080092a9 	.word	0x080092a9
 8008fac:	080092a9 	.word	0x080092a9
 8008fb0:	080092a9 	.word	0x080092a9
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	080092a9 	.word	0x080092a9
 8008fbc:	080092a9 	.word	0x080092a9
 8008fc0:	080092a9 	.word	0x080092a9
 8008fc4:	08009149 	.word	0x08009149
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fc8:	4bbd      	ldr	r3, [pc, #756]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008fca:	61bb      	str	r3, [r7, #24]
       break;
 8008fcc:	e16f      	b.n	80092ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fce:	4bbd      	ldr	r3, [pc, #756]	; (80092c4 <HAL_RCC_GetSysClockFreq+0x360>)
 8008fd0:	61bb      	str	r3, [r7, #24]
      break;
 8008fd2:	e16c      	b.n	80092ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fd4:	4bb9      	ldr	r3, [pc, #740]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fdc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fde:	4bb7      	ldr	r3, [pc, #732]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d053      	beq.n	8009092 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fea:	4bb4      	ldr	r3, [pc, #720]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	099b      	lsrs	r3, r3, #6
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f04f 0300 	mov.w	r3, #0
 8008ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008ffa:	f04f 0100 	mov.w	r1, #0
 8008ffe:	ea02 0400 	and.w	r4, r2, r0
 8009002:	603c      	str	r4, [r7, #0]
 8009004:	400b      	ands	r3, r1
 8009006:	607b      	str	r3, [r7, #4]
 8009008:	e9d7 4500 	ldrd	r4, r5, [r7]
 800900c:	4620      	mov	r0, r4
 800900e:	4629      	mov	r1, r5
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	014b      	lsls	r3, r1, #5
 800901a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800901e:	0142      	lsls	r2, r0, #5
 8009020:	4610      	mov	r0, r2
 8009022:	4619      	mov	r1, r3
 8009024:	4623      	mov	r3, r4
 8009026:	1ac0      	subs	r0, r0, r3
 8009028:	462b      	mov	r3, r5
 800902a:	eb61 0103 	sbc.w	r1, r1, r3
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	018b      	lsls	r3, r1, #6
 8009038:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800903c:	0182      	lsls	r2, r0, #6
 800903e:	1a12      	subs	r2, r2, r0
 8009040:	eb63 0301 	sbc.w	r3, r3, r1
 8009044:	f04f 0000 	mov.w	r0, #0
 8009048:	f04f 0100 	mov.w	r1, #0
 800904c:	00d9      	lsls	r1, r3, #3
 800904e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009052:	00d0      	lsls	r0, r2, #3
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4621      	mov	r1, r4
 800905a:	1852      	adds	r2, r2, r1
 800905c:	4629      	mov	r1, r5
 800905e:	eb43 0101 	adc.w	r1, r3, r1
 8009062:	460b      	mov	r3, r1
 8009064:	f04f 0000 	mov.w	r0, #0
 8009068:	f04f 0100 	mov.w	r1, #0
 800906c:	0259      	lsls	r1, r3, #9
 800906e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009072:	0250      	lsls	r0, r2, #9
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4610      	mov	r0, r2
 800907a:	4619      	mov	r1, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	461a      	mov	r2, r3
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	f7f7 fe20 	bl	8000cc8 <__aeabi_uldivmod>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4613      	mov	r3, r2
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e04c      	b.n	800912c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009092:	4b8a      	ldr	r3, [pc, #552]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	099b      	lsrs	r3, r3, #6
 8009098:	461a      	mov	r2, r3
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80090a2:	f04f 0100 	mov.w	r1, #0
 80090a6:	ea02 0a00 	and.w	sl, r2, r0
 80090aa:	ea03 0b01 	and.w	fp, r3, r1
 80090ae:	4650      	mov	r0, sl
 80090b0:	4659      	mov	r1, fp
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	014b      	lsls	r3, r1, #5
 80090bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80090c0:	0142      	lsls	r2, r0, #5
 80090c2:	4610      	mov	r0, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	ebb0 000a 	subs.w	r0, r0, sl
 80090ca:	eb61 010b 	sbc.w	r1, r1, fp
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	018b      	lsls	r3, r1, #6
 80090d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80090dc:	0182      	lsls	r2, r0, #6
 80090de:	1a12      	subs	r2, r2, r0
 80090e0:	eb63 0301 	sbc.w	r3, r3, r1
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	00d9      	lsls	r1, r3, #3
 80090ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090f2:	00d0      	lsls	r0, r2, #3
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	eb12 020a 	adds.w	r2, r2, sl
 80090fc:	eb43 030b 	adc.w	r3, r3, fp
 8009100:	f04f 0000 	mov.w	r0, #0
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	0299      	lsls	r1, r3, #10
 800910a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800910e:	0290      	lsls	r0, r2, #10
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	461a      	mov	r2, r3
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	f7f7 fdd2 	bl	8000cc8 <__aeabi_uldivmod>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4613      	mov	r3, r2
 800912a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800912c:	4b63      	ldr	r3, [pc, #396]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	0c1b      	lsrs	r3, r3, #16
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	3301      	adds	r3, #1
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	fbb2 f3f3 	udiv	r3, r2, r3
 8009144:	61bb      	str	r3, [r7, #24]
      break;
 8009146:	e0b2      	b.n	80092ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009148:	4b5c      	ldr	r3, [pc, #368]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009150:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009152:	4b5a      	ldr	r3, [pc, #360]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d04d      	beq.n	80091fa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800915e:	4b57      	ldr	r3, [pc, #348]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	099b      	lsrs	r3, r3, #6
 8009164:	461a      	mov	r2, r3
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800916e:	f04f 0100 	mov.w	r1, #0
 8009172:	ea02 0800 	and.w	r8, r2, r0
 8009176:	ea03 0901 	and.w	r9, r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	014b      	lsls	r3, r1, #5
 8009188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800918c:	0142      	lsls	r2, r0, #5
 800918e:	4610      	mov	r0, r2
 8009190:	4619      	mov	r1, r3
 8009192:	ebb0 0008 	subs.w	r0, r0, r8
 8009196:	eb61 0109 	sbc.w	r1, r1, r9
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	018b      	lsls	r3, r1, #6
 80091a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091a8:	0182      	lsls	r2, r0, #6
 80091aa:	1a12      	subs	r2, r2, r0
 80091ac:	eb63 0301 	sbc.w	r3, r3, r1
 80091b0:	f04f 0000 	mov.w	r0, #0
 80091b4:	f04f 0100 	mov.w	r1, #0
 80091b8:	00d9      	lsls	r1, r3, #3
 80091ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091be:	00d0      	lsls	r0, r2, #3
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	eb12 0208 	adds.w	r2, r2, r8
 80091c8:	eb43 0309 	adc.w	r3, r3, r9
 80091cc:	f04f 0000 	mov.w	r0, #0
 80091d0:	f04f 0100 	mov.w	r1, #0
 80091d4:	0259      	lsls	r1, r3, #9
 80091d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80091da:	0250      	lsls	r0, r2, #9
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4610      	mov	r0, r2
 80091e2:	4619      	mov	r1, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	f7f7 fd6c 	bl	8000cc8 <__aeabi_uldivmod>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4613      	mov	r3, r2
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e04a      	b.n	8009290 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091fa:	4b30      	ldr	r3, [pc, #192]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	099b      	lsrs	r3, r3, #6
 8009200:	461a      	mov	r2, r3
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800920a:	f04f 0100 	mov.w	r1, #0
 800920e:	ea02 0400 	and.w	r4, r2, r0
 8009212:	ea03 0501 	and.w	r5, r3, r1
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f04f 0200 	mov.w	r2, #0
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	014b      	lsls	r3, r1, #5
 8009224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009228:	0142      	lsls	r2, r0, #5
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	1b00      	subs	r0, r0, r4
 8009230:	eb61 0105 	sbc.w	r1, r1, r5
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	018b      	lsls	r3, r1, #6
 800923e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009242:	0182      	lsls	r2, r0, #6
 8009244:	1a12      	subs	r2, r2, r0
 8009246:	eb63 0301 	sbc.w	r3, r3, r1
 800924a:	f04f 0000 	mov.w	r0, #0
 800924e:	f04f 0100 	mov.w	r1, #0
 8009252:	00d9      	lsls	r1, r3, #3
 8009254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009258:	00d0      	lsls	r0, r2, #3
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	1912      	adds	r2, r2, r4
 8009260:	eb45 0303 	adc.w	r3, r5, r3
 8009264:	f04f 0000 	mov.w	r0, #0
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	0299      	lsls	r1, r3, #10
 800926e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009272:	0290      	lsls	r0, r2, #10
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4610      	mov	r0, r2
 800927a:	4619      	mov	r1, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	461a      	mov	r2, r3
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	f7f7 fd20 	bl	8000cc8 <__aeabi_uldivmod>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4613      	mov	r3, r2
 800928e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009290:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <HAL_RCC_GetSysClockFreq+0x358>)
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	0f1b      	lsrs	r3, r3, #28
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a4:	61bb      	str	r3, [r7, #24]
      break;
 80092a6:	e002      	b.n	80092ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80092aa:	61bb      	str	r3, [r7, #24]
      break;
 80092ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092ae:	69bb      	ldr	r3, [r7, #24]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ba:	bf00      	nop
 80092bc:	40023800 	.word	0x40023800
 80092c0:	00f42400 	.word	0x00f42400
 80092c4:	007a1200 	.word	0x007a1200

080092c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 8083 	beq.w	80093e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092e2:	4b95      	ldr	r3, [pc, #596]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 030c 	and.w	r3, r3, #12
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d019      	beq.n	8009322 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092ee:	4b92      	ldr	r3, [pc, #584]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d106      	bne.n	8009308 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092fa:	4b8f      	ldr	r3, [pc, #572]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009306:	d00c      	beq.n	8009322 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009308:	4b8b      	ldr	r3, [pc, #556]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d112      	bne.n	800933a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009314:	4b88      	ldr	r3, [pc, #544]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009320:	d10b      	bne.n	800933a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009322:	4b85      	ldr	r3, [pc, #532]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d05b      	beq.n	80093e6 <HAL_RCC_OscConfig+0x11e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d157      	bne.n	80093e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e216      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009342:	d106      	bne.n	8009352 <HAL_RCC_OscConfig+0x8a>
 8009344:	4b7c      	ldr	r3, [pc, #496]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a7b      	ldr	r2, [pc, #492]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800934a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	e01d      	b.n	800938e <HAL_RCC_OscConfig+0xc6>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800935a:	d10c      	bne.n	8009376 <HAL_RCC_OscConfig+0xae>
 800935c:	4b76      	ldr	r3, [pc, #472]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a75      	ldr	r2, [pc, #468]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	4b73      	ldr	r3, [pc, #460]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a72      	ldr	r2, [pc, #456]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800936e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	e00b      	b.n	800938e <HAL_RCC_OscConfig+0xc6>
 8009376:	4b70      	ldr	r3, [pc, #448]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a6f      	ldr	r2, [pc, #444]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800937c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	4b6d      	ldr	r3, [pc, #436]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a6c      	ldr	r2, [pc, #432]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800938c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d013      	beq.n	80093be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009396:	f7fd f92b 	bl	80065f0 <HAL_GetTick>
 800939a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800939c:	e008      	b.n	80093b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800939e:	f7fd f927 	bl	80065f0 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b64      	cmp	r3, #100	; 0x64
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e1db      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093b0:	4b61      	ldr	r3, [pc, #388]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0f0      	beq.n	800939e <HAL_RCC_OscConfig+0xd6>
 80093bc:	e014      	b.n	80093e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093be:	f7fd f917 	bl	80065f0 <HAL_GetTick>
 80093c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093c4:	e008      	b.n	80093d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093c6:	f7fd f913 	bl	80065f0 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b64      	cmp	r3, #100	; 0x64
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e1c7      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093d8:	4b57      	ldr	r3, [pc, #348]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1f0      	bne.n	80093c6 <HAL_RCC_OscConfig+0xfe>
 80093e4:	e000      	b.n	80093e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d06f      	beq.n	80094d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80093f4:	4b50      	ldr	r3, [pc, #320]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 030c 	and.w	r3, r3, #12
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d017      	beq.n	8009430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009400:	4b4d      	ldr	r3, [pc, #308]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009408:	2b08      	cmp	r3, #8
 800940a:	d105      	bne.n	8009418 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800940c:	4b4a      	ldr	r3, [pc, #296]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009418:	4b47      	ldr	r3, [pc, #284]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009420:	2b0c      	cmp	r3, #12
 8009422:	d11c      	bne.n	800945e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009424:	4b44      	ldr	r3, [pc, #272]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d116      	bne.n	800945e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009430:	4b41      	ldr	r3, [pc, #260]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <HAL_RCC_OscConfig+0x180>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d001      	beq.n	8009448 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e18f      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009448:	4b3b      	ldr	r3, [pc, #236]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	4938      	ldr	r1, [pc, #224]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009458:	4313      	orrs	r3, r2
 800945a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800945c:	e03a      	b.n	80094d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d020      	beq.n	80094a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009466:	4b35      	ldr	r3, [pc, #212]	; (800953c <HAL_RCC_OscConfig+0x274>)
 8009468:	2201      	movs	r2, #1
 800946a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946c:	f7fd f8c0 	bl	80065f0 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009474:	f7fd f8bc 	bl	80065f0 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e170      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009486:	4b2c      	ldr	r3, [pc, #176]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f0      	beq.n	8009474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4925      	ldr	r1, [pc, #148]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	600b      	str	r3, [r1, #0]
 80094a6:	e015      	b.n	80094d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094a8:	4b24      	ldr	r3, [pc, #144]	; (800953c <HAL_RCC_OscConfig+0x274>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ae:	f7fd f89f 	bl	80065f0 <HAL_GetTick>
 80094b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094b4:	e008      	b.n	80094c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094b6:	f7fd f89b 	bl	80065f0 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d901      	bls.n	80094c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e14f      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094c8:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1f0      	bne.n	80094b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d037      	beq.n	8009550 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d016      	beq.n	8009516 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094e8:	4b15      	ldr	r3, [pc, #84]	; (8009540 <HAL_RCC_OscConfig+0x278>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ee:	f7fd f87f 	bl	80065f0 <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094f6:	f7fd f87b 	bl	80065f0 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e12f      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009508:	4b0b      	ldr	r3, [pc, #44]	; (8009538 <HAL_RCC_OscConfig+0x270>)
 800950a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCC_OscConfig+0x22e>
 8009514:	e01c      	b.n	8009550 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009516:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <HAL_RCC_OscConfig+0x278>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800951c:	f7fd f868 	bl	80065f0 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009522:	e00f      	b.n	8009544 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009524:	f7fd f864 	bl	80065f0 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d908      	bls.n	8009544 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e118      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
 8009536:	bf00      	nop
 8009538:	40023800 	.word	0x40023800
 800953c:	42470000 	.word	0x42470000
 8009540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009544:	4b8a      	ldr	r3, [pc, #552]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1e9      	bne.n	8009524 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8097 	beq.w	800968c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800955e:	2300      	movs	r3, #0
 8009560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009562:	4b83      	ldr	r3, [pc, #524]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10f      	bne.n	800958e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	4b7f      	ldr	r3, [pc, #508]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	4a7e      	ldr	r2, [pc, #504]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800957c:	6413      	str	r3, [r2, #64]	; 0x40
 800957e:	4b7c      	ldr	r3, [pc, #496]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800958a:	2301      	movs	r3, #1
 800958c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800958e:	4b79      	ldr	r3, [pc, #484]	; (8009774 <HAL_RCC_OscConfig+0x4ac>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d118      	bne.n	80095cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800959a:	4b76      	ldr	r3, [pc, #472]	; (8009774 <HAL_RCC_OscConfig+0x4ac>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a75      	ldr	r2, [pc, #468]	; (8009774 <HAL_RCC_OscConfig+0x4ac>)
 80095a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095a6:	f7fd f823 	bl	80065f0 <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095ae:	f7fd f81f 	bl	80065f0 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e0d3      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c0:	4b6c      	ldr	r3, [pc, #432]	; (8009774 <HAL_RCC_OscConfig+0x4ac>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f0      	beq.n	80095ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d106      	bne.n	80095e2 <HAL_RCC_OscConfig+0x31a>
 80095d4:	4b66      	ldr	r3, [pc, #408]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	4a65      	ldr	r2, [pc, #404]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	6713      	str	r3, [r2, #112]	; 0x70
 80095e0:	e01c      	b.n	800961c <HAL_RCC_OscConfig+0x354>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	d10c      	bne.n	8009604 <HAL_RCC_OscConfig+0x33c>
 80095ea:	4b61      	ldr	r3, [pc, #388]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ee:	4a60      	ldr	r2, [pc, #384]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095f0:	f043 0304 	orr.w	r3, r3, #4
 80095f4:	6713      	str	r3, [r2, #112]	; 0x70
 80095f6:	4b5e      	ldr	r3, [pc, #376]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fa:	4a5d      	ldr	r2, [pc, #372]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80095fc:	f043 0301 	orr.w	r3, r3, #1
 8009600:	6713      	str	r3, [r2, #112]	; 0x70
 8009602:	e00b      	b.n	800961c <HAL_RCC_OscConfig+0x354>
 8009604:	4b5a      	ldr	r3, [pc, #360]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009608:	4a59      	ldr	r2, [pc, #356]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	6713      	str	r3, [r2, #112]	; 0x70
 8009610:	4b57      	ldr	r3, [pc, #348]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009614:	4a56      	ldr	r2, [pc, #344]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009616:	f023 0304 	bic.w	r3, r3, #4
 800961a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009624:	f7fc ffe4 	bl	80065f0 <HAL_GetTick>
 8009628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800962a:	e00a      	b.n	8009642 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800962c:	f7fc ffe0 	bl	80065f0 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	f241 3288 	movw	r2, #5000	; 0x1388
 800963a:	4293      	cmp	r3, r2
 800963c:	d901      	bls.n	8009642 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e092      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009642:	4b4b      	ldr	r3, [pc, #300]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0ee      	beq.n	800962c <HAL_RCC_OscConfig+0x364>
 800964e:	e014      	b.n	800967a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009650:	f7fc ffce 	bl	80065f0 <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009656:	e00a      	b.n	800966e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009658:	f7fc ffca 	bl	80065f0 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	f241 3288 	movw	r2, #5000	; 0x1388
 8009666:	4293      	cmp	r3, r2
 8009668:	d901      	bls.n	800966e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e07c      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800966e:	4b40      	ldr	r3, [pc, #256]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1ee      	bne.n	8009658 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d105      	bne.n	800968c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009680:	4b3b      	ldr	r3, [pc, #236]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	4a3a      	ldr	r2, [pc, #232]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800968a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d068      	beq.n	8009766 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009694:	4b36      	ldr	r3, [pc, #216]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 030c 	and.w	r3, r3, #12
 800969c:	2b08      	cmp	r3, #8
 800969e:	d060      	beq.n	8009762 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d145      	bne.n	8009734 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096a8:	4b33      	ldr	r3, [pc, #204]	; (8009778 <HAL_RCC_OscConfig+0x4b0>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ae:	f7fc ff9f 	bl	80065f0 <HAL_GetTick>
 80096b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096b4:	e008      	b.n	80096c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096b6:	f7fc ff9b 	bl	80065f0 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e04f      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096c8:	4b29      	ldr	r3, [pc, #164]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f0      	bne.n	80096b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69da      	ldr	r2, [r3, #28]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	019b      	lsls	r3, r3, #6
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	085b      	lsrs	r3, r3, #1
 80096ec:	3b01      	subs	r3, #1
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	061b      	lsls	r3, r3, #24
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	071b      	lsls	r3, r3, #28
 8009700:	491b      	ldr	r1, [pc, #108]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009702:	4313      	orrs	r3, r2
 8009704:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009706:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <HAL_RCC_OscConfig+0x4b0>)
 8009708:	2201      	movs	r2, #1
 800970a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970c:	f7fc ff70 	bl	80065f0 <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009714:	f7fc ff6c 	bl	80065f0 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e020      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009726:	4b12      	ldr	r3, [pc, #72]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0f0      	beq.n	8009714 <HAL_RCC_OscConfig+0x44c>
 8009732:	e018      	b.n	8009766 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <HAL_RCC_OscConfig+0x4b0>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973a:	f7fc ff59 	bl	80065f0 <HAL_GetTick>
 800973e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009740:	e008      	b.n	8009754 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009742:	f7fc ff55 	bl	80065f0 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d901      	bls.n	8009754 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e009      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009754:	4b06      	ldr	r3, [pc, #24]	; (8009770 <HAL_RCC_OscConfig+0x4a8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1f0      	bne.n	8009742 <HAL_RCC_OscConfig+0x47a>
 8009760:	e001      	b.n	8009766 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	40023800 	.word	0x40023800
 8009774:	40007000 	.word	0x40007000
 8009778:	42470060 	.word	0x42470060

0800977c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e01d      	b.n	80097ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fc fc88 	bl	80060b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f000 fb56 	bl	8009e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b06      	cmp	r3, #6
 80097fa:	d007      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e01d      	b.n	8009868 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7fc fc77 	bl	8006134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2202      	movs	r2, #2
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3304      	adds	r3, #4
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f000 fb07 	bl	8009e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fd42 	bl	800a30c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <HAL_TIM_PWM_Start+0x74>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d004      	beq.n	800989c <HAL_TIM_PWM_Start+0x2c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <HAL_TIM_PWM_Start+0x78>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d101      	bne.n	80098a0 <HAL_TIM_PWM_Start+0x30>
 800989c:	2301      	movs	r3, #1
 800989e:	e000      	b.n	80098a2 <HAL_TIM_PWM_Start+0x32>
 80098a0:	2300      	movs	r3, #0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b06      	cmp	r3, #6
 80098c6:	d007      	beq.n	80098d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e083      	b.n	8009a08 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fc fa97 	bl	8005e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6812      	ldr	r2, [r2, #0]
 800992c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009930:	f023 0307 	bic.w	r3, r3, #7
 8009934:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3304      	adds	r3, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f000 fa93 	bl	8009e6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800996e:	f023 0303 	bic.w	r3, r3, #3
 8009972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	4313      	orrs	r3, r2
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	4313      	orrs	r3, r2
 8009984:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800998c:	f023 030c 	bic.w	r3, r3, #12
 8009990:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800999c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	4313      	orrs	r3, r2
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	011a      	lsls	r2, r3, #4
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	031b      	lsls	r3, r3, #12
 80099bc:	4313      	orrs	r3, r2
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80099ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80099d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	4313      	orrs	r3, r2
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_TIM_Encoder_Start+0x18>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d008      	beq.n	8009a38 <HAL_TIM_Encoder_Start+0x28>
 8009a26:	e00f      	b.n	8009a48 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fc6b 	bl	800a30c <TIM_CCxChannelCmd>
      break;
 8009a36:	e016      	b.n	8009a66 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	2104      	movs	r1, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fc63 	bl	800a30c <TIM_CCxChannelCmd>
      break;
 8009a46:	e00e      	b.n	8009a66 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fc5b 	bl	800a30c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fc54 	bl	800a30c <TIM_CCxChannelCmd>
      break;
 8009a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f042 0201 	orr.w	r2, r2, #1
 8009a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d122      	bne.n	8009adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d11b      	bne.n	8009adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0202 	mvn.w	r2, #2
 8009aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9b4 	bl	8009e30 <HAL_TIM_IC_CaptureCallback>
 8009ac8:	e005      	b.n	8009ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9a6 	bl	8009e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f9b7 	bl	8009e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d122      	bne.n	8009b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d11b      	bne.n	8009b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0204 	mvn.w	r2, #4
 8009b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2202      	movs	r2, #2
 8009b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f98a 	bl	8009e30 <HAL_TIM_IC_CaptureCallback>
 8009b1c:	e005      	b.n	8009b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f97c 	bl	8009e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f98d 	bl	8009e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0308 	and.w	r3, r3, #8
 8009b3a:	2b08      	cmp	r3, #8
 8009b3c:	d122      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d11b      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f06f 0208 	mvn.w	r2, #8
 8009b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2204      	movs	r2, #4
 8009b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f960 	bl	8009e30 <HAL_TIM_IC_CaptureCallback>
 8009b70:	e005      	b.n	8009b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f952 	bl	8009e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f963 	bl	8009e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f003 0310 	and.w	r3, r3, #16
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d122      	bne.n	8009bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f003 0310 	and.w	r3, r3, #16
 8009b9c:	2b10      	cmp	r3, #16
 8009b9e:	d11b      	bne.n	8009bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0210 	mvn.w	r2, #16
 8009ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2208      	movs	r2, #8
 8009bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f936 	bl	8009e30 <HAL_TIM_IC_CaptureCallback>
 8009bc4:	e005      	b.n	8009bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f928 	bl	8009e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f939 	bl	8009e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10e      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d107      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f06f 0201 	mvn.w	r2, #1
 8009bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fb fb7e 	bl	8005300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b80      	cmp	r3, #128	; 0x80
 8009c10:	d10e      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d107      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fc1a 	bl	800a464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3a:	2b40      	cmp	r3, #64	; 0x40
 8009c3c:	d10e      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d107      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f8fe 	bl	8009e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d10e      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f003 0320 	and.w	r3, r3, #32
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d107      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f06f 0220 	mvn.w	r2, #32
 8009c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fbe4 	bl	800a450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e0b4      	b.n	8009e14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b0c      	cmp	r3, #12
 8009cbe:	f200 809f 	bhi.w	8009e00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009cc2:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc8:	08009cfd 	.word	0x08009cfd
 8009ccc:	08009e01 	.word	0x08009e01
 8009cd0:	08009e01 	.word	0x08009e01
 8009cd4:	08009e01 	.word	0x08009e01
 8009cd8:	08009d3d 	.word	0x08009d3d
 8009cdc:	08009e01 	.word	0x08009e01
 8009ce0:	08009e01 	.word	0x08009e01
 8009ce4:	08009e01 	.word	0x08009e01
 8009ce8:	08009d7f 	.word	0x08009d7f
 8009cec:	08009e01 	.word	0x08009e01
 8009cf0:	08009e01 	.word	0x08009e01
 8009cf4:	08009e01 	.word	0x08009e01
 8009cf8:	08009dbf 	.word	0x08009dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f952 	bl	8009fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0208 	orr.w	r2, r2, #8
 8009d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0204 	bic.w	r2, r2, #4
 8009d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6999      	ldr	r1, [r3, #24]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	619a      	str	r2, [r3, #24]
      break;
 8009d3a:	e062      	b.n	8009e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f9a2 	bl	800a08c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6999      	ldr	r1, [r3, #24]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	021a      	lsls	r2, r3, #8
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	619a      	str	r2, [r3, #24]
      break;
 8009d7c:	e041      	b.n	8009e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 f9f7 	bl	800a178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69da      	ldr	r2, [r3, #28]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0208 	orr.w	r2, r2, #8
 8009d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69da      	ldr	r2, [r3, #28]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0204 	bic.w	r2, r2, #4
 8009da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69d9      	ldr	r1, [r3, #28]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	61da      	str	r2, [r3, #28]
      break;
 8009dbc:	e021      	b.n	8009e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fa4b 	bl	800a260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69d9      	ldr	r1, [r3, #28]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	021a      	lsls	r2, r3, #8
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	61da      	str	r2, [r3, #28]
      break;
 8009dfe:	e000      	b.n	8009e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009e00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a40      	ldr	r2, [pc, #256]	; (8009f80 <TIM_Base_SetConfig+0x114>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d013      	beq.n	8009eac <TIM_Base_SetConfig+0x40>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8a:	d00f      	beq.n	8009eac <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a3d      	ldr	r2, [pc, #244]	; (8009f84 <TIM_Base_SetConfig+0x118>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d00b      	beq.n	8009eac <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a3c      	ldr	r2, [pc, #240]	; (8009f88 <TIM_Base_SetConfig+0x11c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d007      	beq.n	8009eac <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <TIM_Base_SetConfig+0x120>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d003      	beq.n	8009eac <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a3a      	ldr	r2, [pc, #232]	; (8009f90 <TIM_Base_SetConfig+0x124>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d108      	bne.n	8009ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a2f      	ldr	r2, [pc, #188]	; (8009f80 <TIM_Base_SetConfig+0x114>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d02b      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ecc:	d027      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <TIM_Base_SetConfig+0x118>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d023      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a2b      	ldr	r2, [pc, #172]	; (8009f88 <TIM_Base_SetConfig+0x11c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d01f      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2a      	ldr	r2, [pc, #168]	; (8009f8c <TIM_Base_SetConfig+0x120>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d01b      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a29      	ldr	r2, [pc, #164]	; (8009f90 <TIM_Base_SetConfig+0x124>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d017      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a28      	ldr	r2, [pc, #160]	; (8009f94 <TIM_Base_SetConfig+0x128>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d013      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a27      	ldr	r2, [pc, #156]	; (8009f98 <TIM_Base_SetConfig+0x12c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00f      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <TIM_Base_SetConfig+0x130>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00b      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a25      	ldr	r2, [pc, #148]	; (8009fa0 <TIM_Base_SetConfig+0x134>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d007      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a24      	ldr	r2, [pc, #144]	; (8009fa4 <TIM_Base_SetConfig+0x138>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d003      	beq.n	8009f1e <TIM_Base_SetConfig+0xb2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a23      	ldr	r2, [pc, #140]	; (8009fa8 <TIM_Base_SetConfig+0x13c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d108      	bne.n	8009f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a0a      	ldr	r2, [pc, #40]	; (8009f80 <TIM_Base_SetConfig+0x114>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_Base_SetConfig+0xf8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a0c      	ldr	r2, [pc, #48]	; (8009f90 <TIM_Base_SetConfig+0x124>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d103      	bne.n	8009f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	615a      	str	r2, [r3, #20]
}
 8009f72:	bf00      	nop
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	40010400 	.word	0x40010400
 8009f94:	40014000 	.word	0x40014000
 8009f98:	40014400 	.word	0x40014400
 8009f9c:	40014800 	.word	0x40014800
 8009fa0:	40001800 	.word	0x40001800
 8009fa4:	40001c00 	.word	0x40001c00
 8009fa8:	40002000 	.word	0x40002000

08009fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0201 	bic.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f023 0302 	bic.w	r3, r3, #2
 8009ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a20      	ldr	r2, [pc, #128]	; (800a084 <TIM_OC1_SetConfig+0xd8>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d003      	beq.n	800a010 <TIM_OC1_SetConfig+0x64>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a1f      	ldr	r2, [pc, #124]	; (800a088 <TIM_OC1_SetConfig+0xdc>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10c      	bne.n	800a02a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f023 0308 	bic.w	r3, r3, #8
 800a016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	4313      	orrs	r3, r2
 800a020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f023 0304 	bic.w	r3, r3, #4
 800a028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a15      	ldr	r2, [pc, #84]	; (800a084 <TIM_OC1_SetConfig+0xd8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d003      	beq.n	800a03a <TIM_OC1_SetConfig+0x8e>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a14      	ldr	r2, [pc, #80]	; (800a088 <TIM_OC1_SetConfig+0xdc>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d111      	bne.n	800a05e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	621a      	str	r2, [r3, #32]
}
 800a078:	bf00      	nop
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40010000 	.word	0x40010000
 800a088:	40010400 	.word	0x40010400

0800a08c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0210 	bic.w	r2, r3, #16
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	021b      	lsls	r3, r3, #8
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f023 0320 	bic.w	r3, r3, #32
 800a0d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	011b      	lsls	r3, r3, #4
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a22      	ldr	r2, [pc, #136]	; (800a170 <TIM_OC2_SetConfig+0xe4>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_OC2_SetConfig+0x68>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a21      	ldr	r2, [pc, #132]	; (800a174 <TIM_OC2_SetConfig+0xe8>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d10d      	bne.n	800a110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a17      	ldr	r2, [pc, #92]	; (800a170 <TIM_OC2_SetConfig+0xe4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC2_SetConfig+0x94>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a16      	ldr	r2, [pc, #88]	; (800a174 <TIM_OC2_SetConfig+0xe8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d113      	bne.n	800a148 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a12e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4313      	orrs	r3, r2
 800a146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	40010000 	.word	0x40010000
 800a174:	40010400 	.word	0x40010400

0800a178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a21      	ldr	r2, [pc, #132]	; (800a258 <TIM_OC3_SetConfig+0xe0>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d003      	beq.n	800a1de <TIM_OC3_SetConfig+0x66>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a20      	ldr	r2, [pc, #128]	; (800a25c <TIM_OC3_SetConfig+0xe4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d10d      	bne.n	800a1fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	021b      	lsls	r3, r3, #8
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a16      	ldr	r2, [pc, #88]	; (800a258 <TIM_OC3_SetConfig+0xe0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d003      	beq.n	800a20a <TIM_OC3_SetConfig+0x92>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a15      	ldr	r2, [pc, #84]	; (800a25c <TIM_OC3_SetConfig+0xe4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d113      	bne.n	800a232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4313      	orrs	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	621a      	str	r2, [r3, #32]
}
 800a24c:	bf00      	nop
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	40010000 	.word	0x40010000
 800a25c:	40010400 	.word	0x40010400

0800a260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	031b      	lsls	r3, r3, #12
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a12      	ldr	r2, [pc, #72]	; (800a304 <TIM_OC4_SetConfig+0xa4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d003      	beq.n	800a2c8 <TIM_OC4_SetConfig+0x68>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a11      	ldr	r2, [pc, #68]	; (800a308 <TIM_OC4_SetConfig+0xa8>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d109      	bne.n	800a2dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	019b      	lsls	r3, r3, #6
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	621a      	str	r2, [r3, #32]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40010000 	.word	0x40010000
 800a308:	40010400 	.word	0x40010400

0800a30c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	2201      	movs	r2, #1
 800a320:	fa02 f303 	lsl.w	r3, r2, r3
 800a324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a1a      	ldr	r2, [r3, #32]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	43db      	mvns	r3, r3
 800a32e:	401a      	ands	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	fa01 f303 	lsl.w	r3, r1, r3
 800a344:	431a      	orrs	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e05a      	b.n	800a426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a21      	ldr	r2, [pc, #132]	; (800a434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d022      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3bc:	d01d      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a1d      	ldr	r2, [pc, #116]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d018      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a1b      	ldr	r2, [pc, #108]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d013      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00e      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a18      	ldr	r2, [pc, #96]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d009      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a17      	ldr	r2, [pc, #92]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d004      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a15      	ldr	r2, [pc, #84]	; (800a44c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d10c      	bne.n	800a414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	4313      	orrs	r3, r2
 800a40a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	40010000 	.word	0x40010000
 800a438:	40000400 	.word	0x40000400
 800a43c:	40000800 	.word	0x40000800
 800a440:	40000c00 	.word	0x40000c00
 800a444:	40010400 	.word	0x40010400
 800a448:	40014000 	.word	0x40014000
 800a44c:	40001800 	.word	0x40001800

0800a450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e03f      	b.n	800a50a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fb ff20 	bl	80062e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2224      	movs	r2, #36	; 0x24
 800a4a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fcc3 	bl	800ae48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	691a      	ldr	r2, [r3, #16]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	695a      	ldr	r2, [r3, #20]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b088      	sub	sp, #32
 800a516:	af02      	add	r7, sp, #8
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	4613      	mov	r3, r2
 800a520:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b20      	cmp	r3, #32
 800a530:	f040 8083 	bne.w	800a63a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <HAL_UART_Transmit+0x2e>
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e07b      	b.n	800a63c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_UART_Transmit+0x40>
 800a54e:	2302      	movs	r3, #2
 800a550:	e074      	b.n	800a63c <HAL_UART_Transmit+0x12a>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2221      	movs	r2, #33	; 0x21
 800a564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a568:	f7fc f842 	bl	80065f0 <HAL_GetTick>
 800a56c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	88fa      	ldrh	r2, [r7, #6]
 800a572:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	88fa      	ldrh	r2, [r7, #6]
 800a578:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a582:	e042      	b.n	800a60a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a59a:	d122      	bne.n	800a5e2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2180      	movs	r1, #128	; 0x80
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 facc 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e042      	b.n	800a63c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	60bb      	str	r3, [r7, #8]
 800a5d8:	e017      	b.n	800a60a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60bb      	str	r3, [r7, #8]
 800a5e0:	e013      	b.n	800a60a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2180      	movs	r1, #128	; 0x80
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 faa9 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e01f      	b.n	800a63c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	60ba      	str	r2, [r7, #8]
 800a602:	781a      	ldrb	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1b7      	bne.n	800a584 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2200      	movs	r2, #0
 800a61c:	2140      	movs	r1, #64	; 0x40
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fa90 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e006      	b.n	800a63c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	e000      	b.n	800a63c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a63a:	2302      	movs	r3, #2
  }
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d140      	bne.n	800a6e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <HAL_UART_Receive_IT+0x26>
 800a664:	88fb      	ldrh	r3, [r7, #6]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e039      	b.n	800a6e2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a674:	2b01      	cmp	r3, #1
 800a676:	d101      	bne.n	800a67c <HAL_UART_Receive_IT+0x38>
 800a678:	2302      	movs	r3, #2
 800a67a:	e032      	b.n	800a6e2 <HAL_UART_Receive_IT+0x9e>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	88fa      	ldrh	r2, [r7, #6]
 800a694:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2222      	movs	r2, #34	; 0x22
 800a6a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695a      	ldr	r2, [r3, #20]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0201 	orr.w	r2, r2, #1
 800a6ca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0220 	orr.w	r2, r2, #32
 800a6da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e000      	b.n	800a6e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a6e0:	2302      	movs	r3, #2
  }
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b20      	cmp	r3, #32
 800a708:	d166      	bne.n	800a7d8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_UART_Receive_DMA+0x26>
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e05f      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_UART_Receive_DMA+0x38>
 800a724:	2302      	movs	r3, #2
 800a726:	e058      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2222      	movs	r2, #34	; 0x22
 800a746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	4a25      	ldr	r2, [pc, #148]	; (800a7e4 <HAL_UART_Receive_DMA+0xf4>)
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	4a24      	ldr	r2, [pc, #144]	; (800a7e8 <HAL_UART_Receive_DMA+0xf8>)
 800a758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75e:	4a23      	ldr	r2, [pc, #140]	; (800a7ec <HAL_UART_Receive_DMA+0xfc>)
 800a760:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	2200      	movs	r2, #0
 800a768:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3304      	adds	r3, #4
 800a77a:	4619      	mov	r1, r3
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	f7fc fead 	bl	80074e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	613b      	str	r3, [r7, #16]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695a      	ldr	r2, [r3, #20]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f042 0201 	orr.w	r2, r2, #1
 800a7c2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	695a      	ldr	r2, [r3, #20]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7d2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	e000      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a7d8:	2302      	movs	r3, #2
  }
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0800aa2d 	.word	0x0800aa2d
 800a7e8:	0800aa95 	.word	0x0800aa95
 800a7ec:	0800aab1 	.word	0x0800aab1

0800a7f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a810:	2300      	movs	r3, #0
 800a812:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a814:	2300      	movs	r3, #0
 800a816:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10d      	bne.n	800a842 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d008      	beq.n	800a842 <HAL_UART_IRQHandler+0x52>
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa82 	bl	800ad44 <UART_Receive_IT>
      return;
 800a840:	e0d0      	b.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 80b0 	beq.w	800a9aa <HAL_UART_IRQHandler+0x1ba>
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <HAL_UART_IRQHandler+0x70>
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 80a5 	beq.w	800a9aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <HAL_UART_IRQHandler+0x90>
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a878:	f043 0201 	orr.w	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <HAL_UART_IRQHandler+0xb0>
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	f043 0202 	orr.w	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <HAL_UART_IRQHandler+0xd0>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b8:	f043 0204 	orr.w	r2, r3, #4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00f      	beq.n	800a8ea <HAL_UART_IRQHandler+0xfa>
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <HAL_UART_IRQHandler+0xee>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e2:	f043 0208 	orr.w	r2, r3, #8
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d077      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	f003 0320 	and.w	r3, r3, #32
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d007      	beq.n	800a90c <HAL_UART_IRQHandler+0x11c>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa1c 	bl	800ad44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	bf0c      	ite	eq
 800a91a:	2301      	moveq	r3, #1
 800a91c:	2300      	movne	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <HAL_UART_IRQHandler+0x144>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d031      	beq.n	800a998 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f965 	bl	800ac04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	d123      	bne.n	800a990 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	695a      	ldr	r2, [r3, #20]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a956:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d013      	beq.n	800a988 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a964:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <HAL_UART_IRQHandler+0x1fc>)
 800a966:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fc fe0f 	bl	8007590 <HAL_DMA_Abort_IT>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d016      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a982:	4610      	mov	r0, r2
 800a984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a986:	e00e      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f845 	bl	800aa18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98e:	e00a      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f841 	bl	800aa18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a996:	e006      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f83d 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a9a4:	e01d      	b.n	800a9e2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a6:	bf00      	nop
    return;
 800a9a8:	e01b      	b.n	800a9e2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d008      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x1d6>
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f952 	bl	800ac68 <UART_Transmit_IT>
    return;
 800a9c4:	e00e      	b.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d004      	beq.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f99a 	bl	800ad14 <UART_EndTransmit_IT>
    return;
 800a9e0:	e000      	b.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a9e2:	bf00      	nop
  }
}
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800ac41 	.word	0x0800ac41

0800a9f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11e      	bne.n	800aa86 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa5c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	695a      	ldr	r2, [r3, #20]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f022 0201 	bic.w	r2, r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	695a      	ldr	r2, [r3, #20]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa7c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7fa fc4a 	bl	8005320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa8c:	bf00      	nop
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff ffae 	bl	800aa04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aacc:	2b80      	cmp	r3, #128	; 0x80
 800aace:	bf0c      	ite	eq
 800aad0:	2301      	moveq	r3, #1
 800aad2:	2300      	movne	r3, #0
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b21      	cmp	r3, #33	; 0x21
 800aae2:	d108      	bne.n	800aaf6 <UART_DMAError+0x46>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aaf0:	68b8      	ldr	r0, [r7, #8]
 800aaf2:	f000 f871 	bl	800abd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	bf0c      	ite	eq
 800ab04:	2301      	moveq	r3, #1
 800ab06:	2300      	movne	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b22      	cmp	r3, #34	; 0x22
 800ab16:	d108      	bne.n	800ab2a <UART_DMAError+0x7a>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d005      	beq.n	800ab2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2200      	movs	r2, #0
 800ab22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab24:	68b8      	ldr	r0, [r7, #8]
 800ab26:	f000 f86d 	bl	800ac04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2e:	f043 0210 	orr.w	r2, r3, #16
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f7ff ff6e 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	4613      	mov	r3, r2
 800ab52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab54:	e02c      	b.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5c:	d028      	beq.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab64:	f7fb fd44 	bl	80065f0 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d21d      	bcs.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695a      	ldr	r2, [r3, #20]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e00f      	b.n	800abd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	4013      	ands	r3, r2
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d0c3      	beq.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800abee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695a      	ldr	r2, [r3, #20]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0201 	bic.w	r2, r2, #1
 800ac2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fedc 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b21      	cmp	r3, #33	; 0x21
 800ac7a:	d144      	bne.n	800ad06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac84:	d11a      	bne.n	800acbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d105      	bne.n	800acb0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	1c9a      	adds	r2, r3, #2
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]
 800acae:	e00e      	b.n	800acce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	621a      	str	r2, [r3, #32]
 800acba:	e008      	b.n	800acce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	1c59      	adds	r1, r3, #1
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	6211      	str	r1, [r2, #32]
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	4619      	mov	r1, r3
 800acdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10f      	bne.n	800ad02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68da      	ldr	r2, [r3, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e000      	b.n	800ad08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ad06:	2302      	movs	r3, #2
  }
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff fe5b 	bl	800a9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b22      	cmp	r3, #34	; 0x22
 800ad56:	d171      	bne.n	800ae3c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad60:	d123      	bne.n	800adaa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10e      	bne.n	800ad8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad86:	1c9a      	adds	r2, r3, #2
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad8c:	e029      	b.n	800ade2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	629a      	str	r2, [r3, #40]	; 0x28
 800ada8:	e01b      	b.n	800ade2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6858      	ldr	r0, [r3, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbc:	1c59      	adds	r1, r3, #1
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	6291      	str	r1, [r2, #40]	; 0x28
 800adc2:	b2c2      	uxtb	r2, r0
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	e00c      	b.n	800ade2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	b2da      	uxtb	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add4:	1c58      	adds	r0, r3, #1
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	6288      	str	r0, [r1, #40]	; 0x28
 800adda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	3b01      	subs	r3, #1
 800adea:	b29b      	uxth	r3, r3
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4619      	mov	r1, r3
 800adf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d120      	bne.n	800ae38 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68da      	ldr	r2, [r3, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0220 	bic.w	r2, r2, #32
 800ae04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695a      	ldr	r2, [r3, #20]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0201 	bic.w	r2, r2, #1
 800ae24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fa fa76 	bl	8005320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	e002      	b.n	800ae3e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ae3c:	2302      	movs	r3, #2
  }
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	b0bd      	sub	sp, #244	; 0xf4
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae64:	68d9      	ldr	r1, [r3, #12]
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	ea40 0301 	orr.w	r3, r0, r1
 800ae70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	431a      	orrs	r2, r3
 800ae88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800ae94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aea0:	f021 010c 	bic.w	r1, r1, #12
 800aea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec2:	6999      	ldr	r1, [r3, #24]
 800aec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	ea40 0301 	orr.w	r3, r0, r1
 800aece:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeda:	f040 81a5 	bne.w	800b228 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	4bcd      	ldr	r3, [pc, #820]	; (800b21c <UART_SetConfig+0x3d4>)
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d006      	beq.n	800aef8 <UART_SetConfig+0xb0>
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4bcb      	ldr	r3, [pc, #812]	; (800b220 <UART_SetConfig+0x3d8>)
 800aef2:	429a      	cmp	r2, r3
 800aef4:	f040 80cb 	bne.w	800b08e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aef8:	f7fe f820 	bl	8008f3c <HAL_RCC_GetPCLK2Freq>
 800aefc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af04:	461c      	mov	r4, r3
 800af06:	f04f 0500 	mov.w	r5, #0
 800af0a:	4622      	mov	r2, r4
 800af0c:	462b      	mov	r3, r5
 800af0e:	1891      	adds	r1, r2, r2
 800af10:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800af14:	415b      	adcs	r3, r3
 800af16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800af1e:	1912      	adds	r2, r2, r4
 800af20:	eb45 0303 	adc.w	r3, r5, r3
 800af24:	f04f 0000 	mov.w	r0, #0
 800af28:	f04f 0100 	mov.w	r1, #0
 800af2c:	00d9      	lsls	r1, r3, #3
 800af2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af32:	00d0      	lsls	r0, r2, #3
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	1911      	adds	r1, r2, r4
 800af3a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800af3e:	416b      	adcs	r3, r5
 800af40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f04f 0300 	mov.w	r3, #0
 800af50:	1891      	adds	r1, r2, r2
 800af52:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800af56:	415b      	adcs	r3, r3
 800af58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af5c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800af60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800af64:	f7f5 feb0 	bl	8000cc8 <__aeabi_uldivmod>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4bad      	ldr	r3, [pc, #692]	; (800b224 <UART_SetConfig+0x3dc>)
 800af6e:	fba3 2302 	umull	r2, r3, r3, r2
 800af72:	095b      	lsrs	r3, r3, #5
 800af74:	011e      	lsls	r6, r3, #4
 800af76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af7a:	461c      	mov	r4, r3
 800af7c:	f04f 0500 	mov.w	r5, #0
 800af80:	4622      	mov	r2, r4
 800af82:	462b      	mov	r3, r5
 800af84:	1891      	adds	r1, r2, r2
 800af86:	67b9      	str	r1, [r7, #120]	; 0x78
 800af88:	415b      	adcs	r3, r3
 800af8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af8c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800af90:	1912      	adds	r2, r2, r4
 800af92:	eb45 0303 	adc.w	r3, r5, r3
 800af96:	f04f 0000 	mov.w	r0, #0
 800af9a:	f04f 0100 	mov.w	r1, #0
 800af9e:	00d9      	lsls	r1, r3, #3
 800afa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afa4:	00d0      	lsls	r0, r2, #3
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	1911      	adds	r1, r2, r4
 800afac:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800afb0:	416b      	adcs	r3, r5
 800afb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800afb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	461a      	mov	r2, r3
 800afbe:	f04f 0300 	mov.w	r3, #0
 800afc2:	1891      	adds	r1, r2, r2
 800afc4:	6739      	str	r1, [r7, #112]	; 0x70
 800afc6:	415b      	adcs	r3, r3
 800afc8:	677b      	str	r3, [r7, #116]	; 0x74
 800afca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800afce:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800afd2:	f7f5 fe79 	bl	8000cc8 <__aeabi_uldivmod>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4b92      	ldr	r3, [pc, #584]	; (800b224 <UART_SetConfig+0x3dc>)
 800afdc:	fba3 1302 	umull	r1, r3, r3, r2
 800afe0:	095b      	lsrs	r3, r3, #5
 800afe2:	2164      	movs	r1, #100	; 0x64
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	3332      	adds	r3, #50	; 0x32
 800afee:	4a8d      	ldr	r2, [pc, #564]	; (800b224 <UART_SetConfig+0x3dc>)
 800aff0:	fba2 2303 	umull	r2, r3, r2, r3
 800aff4:	095b      	lsrs	r3, r3, #5
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800affc:	441e      	add	r6, r3
 800affe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b002:	4618      	mov	r0, r3
 800b004:	f04f 0100 	mov.w	r1, #0
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	1894      	adds	r4, r2, r2
 800b00e:	66bc      	str	r4, [r7, #104]	; 0x68
 800b010:	415b      	adcs	r3, r3
 800b012:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b014:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b018:	1812      	adds	r2, r2, r0
 800b01a:	eb41 0303 	adc.w	r3, r1, r3
 800b01e:	f04f 0400 	mov.w	r4, #0
 800b022:	f04f 0500 	mov.w	r5, #0
 800b026:	00dd      	lsls	r5, r3, #3
 800b028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b02c:	00d4      	lsls	r4, r2, #3
 800b02e:	4622      	mov	r2, r4
 800b030:	462b      	mov	r3, r5
 800b032:	1814      	adds	r4, r2, r0
 800b034:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b038:	414b      	adcs	r3, r1
 800b03a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	461a      	mov	r2, r3
 800b046:	f04f 0300 	mov.w	r3, #0
 800b04a:	1891      	adds	r1, r2, r2
 800b04c:	6639      	str	r1, [r7, #96]	; 0x60
 800b04e:	415b      	adcs	r3, r3
 800b050:	667b      	str	r3, [r7, #100]	; 0x64
 800b052:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b05a:	f7f5 fe35 	bl	8000cc8 <__aeabi_uldivmod>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4b70      	ldr	r3, [pc, #448]	; (800b224 <UART_SetConfig+0x3dc>)
 800b064:	fba3 1302 	umull	r1, r3, r3, r2
 800b068:	095b      	lsrs	r3, r3, #5
 800b06a:	2164      	movs	r1, #100	; 0x64
 800b06c:	fb01 f303 	mul.w	r3, r1, r3
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	3332      	adds	r3, #50	; 0x32
 800b076:	4a6b      	ldr	r2, [pc, #428]	; (800b224 <UART_SetConfig+0x3dc>)
 800b078:	fba2 2303 	umull	r2, r3, r2, r3
 800b07c:	095b      	lsrs	r3, r3, #5
 800b07e:	f003 0207 	and.w	r2, r3, #7
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4432      	add	r2, r6
 800b08a:	609a      	str	r2, [r3, #8]
 800b08c:	e26d      	b.n	800b56a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b08e:	f7fd ff41 	bl	8008f14 <HAL_RCC_GetPCLK1Freq>
 800b092:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b09a:	461c      	mov	r4, r3
 800b09c:	f04f 0500 	mov.w	r5, #0
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	1891      	adds	r1, r2, r2
 800b0a6:	65b9      	str	r1, [r7, #88]	; 0x58
 800b0a8:	415b      	adcs	r3, r3
 800b0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b0b0:	1912      	adds	r2, r2, r4
 800b0b2:	eb45 0303 	adc.w	r3, r5, r3
 800b0b6:	f04f 0000 	mov.w	r0, #0
 800b0ba:	f04f 0100 	mov.w	r1, #0
 800b0be:	00d9      	lsls	r1, r3, #3
 800b0c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b0c4:	00d0      	lsls	r0, r2, #3
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	1911      	adds	r1, r2, r4
 800b0cc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b0d0:	416b      	adcs	r3, r5
 800b0d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	f04f 0300 	mov.w	r3, #0
 800b0e2:	1891      	adds	r1, r2, r2
 800b0e4:	6539      	str	r1, [r7, #80]	; 0x50
 800b0e6:	415b      	adcs	r3, r3
 800b0e8:	657b      	str	r3, [r7, #84]	; 0x54
 800b0ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b0f2:	f7f5 fde9 	bl	8000cc8 <__aeabi_uldivmod>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4b4a      	ldr	r3, [pc, #296]	; (800b224 <UART_SetConfig+0x3dc>)
 800b0fc:	fba3 2302 	umull	r2, r3, r3, r2
 800b100:	095b      	lsrs	r3, r3, #5
 800b102:	011e      	lsls	r6, r3, #4
 800b104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b108:	461c      	mov	r4, r3
 800b10a:	f04f 0500 	mov.w	r5, #0
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	1891      	adds	r1, r2, r2
 800b114:	64b9      	str	r1, [r7, #72]	; 0x48
 800b116:	415b      	adcs	r3, r3
 800b118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b11a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b11e:	1912      	adds	r2, r2, r4
 800b120:	eb45 0303 	adc.w	r3, r5, r3
 800b124:	f04f 0000 	mov.w	r0, #0
 800b128:	f04f 0100 	mov.w	r1, #0
 800b12c:	00d9      	lsls	r1, r3, #3
 800b12e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b132:	00d0      	lsls	r0, r2, #3
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	1911      	adds	r1, r2, r4
 800b13a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b13e:	416b      	adcs	r3, r5
 800b140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	461a      	mov	r2, r3
 800b14c:	f04f 0300 	mov.w	r3, #0
 800b150:	1891      	adds	r1, r2, r2
 800b152:	6439      	str	r1, [r7, #64]	; 0x40
 800b154:	415b      	adcs	r3, r3
 800b156:	647b      	str	r3, [r7, #68]	; 0x44
 800b158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b15c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b160:	f7f5 fdb2 	bl	8000cc8 <__aeabi_uldivmod>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4b2e      	ldr	r3, [pc, #184]	; (800b224 <UART_SetConfig+0x3dc>)
 800b16a:	fba3 1302 	umull	r1, r3, r3, r2
 800b16e:	095b      	lsrs	r3, r3, #5
 800b170:	2164      	movs	r1, #100	; 0x64
 800b172:	fb01 f303 	mul.w	r3, r1, r3
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	3332      	adds	r3, #50	; 0x32
 800b17c:	4a29      	ldr	r2, [pc, #164]	; (800b224 <UART_SetConfig+0x3dc>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	095b      	lsrs	r3, r3, #5
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b18a:	441e      	add	r6, r3
 800b18c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b190:	4618      	mov	r0, r3
 800b192:	f04f 0100 	mov.w	r1, #0
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	1894      	adds	r4, r2, r2
 800b19c:	63bc      	str	r4, [r7, #56]	; 0x38
 800b19e:	415b      	adcs	r3, r3
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1a6:	1812      	adds	r2, r2, r0
 800b1a8:	eb41 0303 	adc.w	r3, r1, r3
 800b1ac:	f04f 0400 	mov.w	r4, #0
 800b1b0:	f04f 0500 	mov.w	r5, #0
 800b1b4:	00dd      	lsls	r5, r3, #3
 800b1b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1ba:	00d4      	lsls	r4, r2, #3
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	1814      	adds	r4, r2, r0
 800b1c2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b1c6:	414b      	adcs	r3, r1
 800b1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	1891      	adds	r1, r2, r2
 800b1da:	6339      	str	r1, [r7, #48]	; 0x30
 800b1dc:	415b      	adcs	r3, r3
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1e4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1e8:	f7f5 fd6e 	bl	8000cc8 <__aeabi_uldivmod>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4b0c      	ldr	r3, [pc, #48]	; (800b224 <UART_SetConfig+0x3dc>)
 800b1f2:	fba3 1302 	umull	r1, r3, r3, r2
 800b1f6:	095b      	lsrs	r3, r3, #5
 800b1f8:	2164      	movs	r1, #100	; 0x64
 800b1fa:	fb01 f303 	mul.w	r3, r1, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	3332      	adds	r3, #50	; 0x32
 800b204:	4a07      	ldr	r2, [pc, #28]	; (800b224 <UART_SetConfig+0x3dc>)
 800b206:	fba2 2303 	umull	r2, r3, r2, r3
 800b20a:	095b      	lsrs	r3, r3, #5
 800b20c:	f003 0207 	and.w	r2, r3, #7
 800b210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4432      	add	r2, r6
 800b218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b21a:	e1a6      	b.n	800b56a <UART_SetConfig+0x722>
 800b21c:	40011000 	.word	0x40011000
 800b220:	40011400 	.word	0x40011400
 800b224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4bd1      	ldr	r3, [pc, #836]	; (800b574 <UART_SetConfig+0x72c>)
 800b230:	429a      	cmp	r2, r3
 800b232:	d006      	beq.n	800b242 <UART_SetConfig+0x3fa>
 800b234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	4bcf      	ldr	r3, [pc, #828]	; (800b578 <UART_SetConfig+0x730>)
 800b23c:	429a      	cmp	r2, r3
 800b23e:	f040 80ca 	bne.w	800b3d6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b242:	f7fd fe7b 	bl	8008f3c <HAL_RCC_GetPCLK2Freq>
 800b246:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b24a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b24e:	461c      	mov	r4, r3
 800b250:	f04f 0500 	mov.w	r5, #0
 800b254:	4622      	mov	r2, r4
 800b256:	462b      	mov	r3, r5
 800b258:	1891      	adds	r1, r2, r2
 800b25a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b25c:	415b      	adcs	r3, r3
 800b25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b264:	1912      	adds	r2, r2, r4
 800b266:	eb45 0303 	adc.w	r3, r5, r3
 800b26a:	f04f 0000 	mov.w	r0, #0
 800b26e:	f04f 0100 	mov.w	r1, #0
 800b272:	00d9      	lsls	r1, r3, #3
 800b274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b278:	00d0      	lsls	r0, r2, #3
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	eb12 0a04 	adds.w	sl, r2, r4
 800b282:	eb43 0b05 	adc.w	fp, r3, r5
 800b286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f04f 0100 	mov.w	r1, #0
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	008b      	lsls	r3, r1, #2
 800b29c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2a0:	0082      	lsls	r2, r0, #2
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	f7f5 fd0f 	bl	8000cc8 <__aeabi_uldivmod>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4bb3      	ldr	r3, [pc, #716]	; (800b57c <UART_SetConfig+0x734>)
 800b2b0:	fba3 2302 	umull	r2, r3, r3, r2
 800b2b4:	095b      	lsrs	r3, r3, #5
 800b2b6:	011e      	lsls	r6, r3, #4
 800b2b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f04f 0100 	mov.w	r1, #0
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	1894      	adds	r4, r2, r2
 800b2c8:	623c      	str	r4, [r7, #32]
 800b2ca:	415b      	adcs	r3, r3
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b2d2:	1812      	adds	r2, r2, r0
 800b2d4:	eb41 0303 	adc.w	r3, r1, r3
 800b2d8:	f04f 0400 	mov.w	r4, #0
 800b2dc:	f04f 0500 	mov.w	r5, #0
 800b2e0:	00dd      	lsls	r5, r3, #3
 800b2e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b2e6:	00d4      	lsls	r4, r2, #3
 800b2e8:	4622      	mov	r2, r4
 800b2ea:	462b      	mov	r3, r5
 800b2ec:	1814      	adds	r4, r2, r0
 800b2ee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b2f2:	414b      	adcs	r3, r1
 800b2f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f04f 0100 	mov.w	r1, #0
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f04f 0300 	mov.w	r3, #0
 800b30c:	008b      	lsls	r3, r1, #2
 800b30e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b312:	0082      	lsls	r2, r0, #2
 800b314:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800b318:	f7f5 fcd6 	bl	8000cc8 <__aeabi_uldivmod>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4b96      	ldr	r3, [pc, #600]	; (800b57c <UART_SetConfig+0x734>)
 800b322:	fba3 1302 	umull	r1, r3, r3, r2
 800b326:	095b      	lsrs	r3, r3, #5
 800b328:	2164      	movs	r1, #100	; 0x64
 800b32a:	fb01 f303 	mul.w	r3, r1, r3
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	3332      	adds	r3, #50	; 0x32
 800b334:	4a91      	ldr	r2, [pc, #580]	; (800b57c <UART_SetConfig+0x734>)
 800b336:	fba2 2303 	umull	r2, r3, r2, r3
 800b33a:	095b      	lsrs	r3, r3, #5
 800b33c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b340:	441e      	add	r6, r3
 800b342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b346:	4618      	mov	r0, r3
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	1894      	adds	r4, r2, r2
 800b352:	61bc      	str	r4, [r7, #24]
 800b354:	415b      	adcs	r3, r3
 800b356:	61fb      	str	r3, [r7, #28]
 800b358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b35c:	1812      	adds	r2, r2, r0
 800b35e:	eb41 0303 	adc.w	r3, r1, r3
 800b362:	f04f 0400 	mov.w	r4, #0
 800b366:	f04f 0500 	mov.w	r5, #0
 800b36a:	00dd      	lsls	r5, r3, #3
 800b36c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b370:	00d4      	lsls	r4, r2, #3
 800b372:	4622      	mov	r2, r4
 800b374:	462b      	mov	r3, r5
 800b376:	1814      	adds	r4, r2, r0
 800b378:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b37c:	414b      	adcs	r3, r1
 800b37e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	4618      	mov	r0, r3
 800b38a:	f04f 0100 	mov.w	r1, #0
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	008b      	lsls	r3, r1, #2
 800b398:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b39c:	0082      	lsls	r2, r0, #2
 800b39e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800b3a2:	f7f5 fc91 	bl	8000cc8 <__aeabi_uldivmod>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4b74      	ldr	r3, [pc, #464]	; (800b57c <UART_SetConfig+0x734>)
 800b3ac:	fba3 1302 	umull	r1, r3, r3, r2
 800b3b0:	095b      	lsrs	r3, r3, #5
 800b3b2:	2164      	movs	r1, #100	; 0x64
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	011b      	lsls	r3, r3, #4
 800b3bc:	3332      	adds	r3, #50	; 0x32
 800b3be:	4a6f      	ldr	r2, [pc, #444]	; (800b57c <UART_SetConfig+0x734>)
 800b3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c4:	095b      	lsrs	r3, r3, #5
 800b3c6:	f003 020f 	and.w	r2, r3, #15
 800b3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4432      	add	r2, r6
 800b3d2:	609a      	str	r2, [r3, #8]
 800b3d4:	e0c9      	b.n	800b56a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3d6:	f7fd fd9d 	bl	8008f14 <HAL_RCC_GetPCLK1Freq>
 800b3da:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3e2:	461c      	mov	r4, r3
 800b3e4:	f04f 0500 	mov.w	r5, #0
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	1891      	adds	r1, r2, r2
 800b3ee:	6139      	str	r1, [r7, #16]
 800b3f0:	415b      	adcs	r3, r3
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3f8:	1912      	adds	r2, r2, r4
 800b3fa:	eb45 0303 	adc.w	r3, r5, r3
 800b3fe:	f04f 0000 	mov.w	r0, #0
 800b402:	f04f 0100 	mov.w	r1, #0
 800b406:	00d9      	lsls	r1, r3, #3
 800b408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b40c:	00d0      	lsls	r0, r2, #3
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	eb12 0804 	adds.w	r8, r2, r4
 800b416:	eb43 0905 	adc.w	r9, r3, r5
 800b41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4618      	mov	r0, r3
 800b422:	f04f 0100 	mov.w	r1, #0
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	008b      	lsls	r3, r1, #2
 800b430:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b434:	0082      	lsls	r2, r0, #2
 800b436:	4640      	mov	r0, r8
 800b438:	4649      	mov	r1, r9
 800b43a:	f7f5 fc45 	bl	8000cc8 <__aeabi_uldivmod>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4b4e      	ldr	r3, [pc, #312]	; (800b57c <UART_SetConfig+0x734>)
 800b444:	fba3 2302 	umull	r2, r3, r3, r2
 800b448:	095b      	lsrs	r3, r3, #5
 800b44a:	011e      	lsls	r6, r3, #4
 800b44c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b450:	4618      	mov	r0, r3
 800b452:	f04f 0100 	mov.w	r1, #0
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	1894      	adds	r4, r2, r2
 800b45c:	60bc      	str	r4, [r7, #8]
 800b45e:	415b      	adcs	r3, r3
 800b460:	60fb      	str	r3, [r7, #12]
 800b462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b466:	1812      	adds	r2, r2, r0
 800b468:	eb41 0303 	adc.w	r3, r1, r3
 800b46c:	f04f 0400 	mov.w	r4, #0
 800b470:	f04f 0500 	mov.w	r5, #0
 800b474:	00dd      	lsls	r5, r3, #3
 800b476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b47a:	00d4      	lsls	r4, r2, #3
 800b47c:	4622      	mov	r2, r4
 800b47e:	462b      	mov	r3, r5
 800b480:	1814      	adds	r4, r2, r0
 800b482:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b486:	414b      	adcs	r3, r1
 800b488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4618      	mov	r0, r3
 800b494:	f04f 0100 	mov.w	r1, #0
 800b498:	f04f 0200 	mov.w	r2, #0
 800b49c:	f04f 0300 	mov.w	r3, #0
 800b4a0:	008b      	lsls	r3, r1, #2
 800b4a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b4a6:	0082      	lsls	r2, r0, #2
 800b4a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4ac:	f7f5 fc0c 	bl	8000cc8 <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4b31      	ldr	r3, [pc, #196]	; (800b57c <UART_SetConfig+0x734>)
 800b4b6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4ba:	095b      	lsrs	r3, r3, #5
 800b4bc:	2164      	movs	r1, #100	; 0x64
 800b4be:	fb01 f303 	mul.w	r3, r1, r3
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	011b      	lsls	r3, r3, #4
 800b4c6:	3332      	adds	r3, #50	; 0x32
 800b4c8:	4a2c      	ldr	r2, [pc, #176]	; (800b57c <UART_SetConfig+0x734>)
 800b4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ce:	095b      	lsrs	r3, r3, #5
 800b4d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4d4:	441e      	add	r6, r3
 800b4d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f04f 0100 	mov.w	r1, #0
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	1894      	adds	r4, r2, r2
 800b4e6:	603c      	str	r4, [r7, #0]
 800b4e8:	415b      	adcs	r3, r3
 800b4ea:	607b      	str	r3, [r7, #4]
 800b4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f0:	1812      	adds	r2, r2, r0
 800b4f2:	eb41 0303 	adc.w	r3, r1, r3
 800b4f6:	f04f 0400 	mov.w	r4, #0
 800b4fa:	f04f 0500 	mov.w	r5, #0
 800b4fe:	00dd      	lsls	r5, r3, #3
 800b500:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b504:	00d4      	lsls	r4, r2, #3
 800b506:	4622      	mov	r2, r4
 800b508:	462b      	mov	r3, r5
 800b50a:	1814      	adds	r4, r2, r0
 800b50c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b510:	414b      	adcs	r3, r1
 800b512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f04f 0100 	mov.w	r1, #0
 800b522:	f04f 0200 	mov.w	r2, #0
 800b526:	f04f 0300 	mov.w	r3, #0
 800b52a:	008b      	lsls	r3, r1, #2
 800b52c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b530:	0082      	lsls	r2, r0, #2
 800b532:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b536:	f7f5 fbc7 	bl	8000cc8 <__aeabi_uldivmod>
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <UART_SetConfig+0x734>)
 800b540:	fba3 1302 	umull	r1, r3, r3, r2
 800b544:	095b      	lsrs	r3, r3, #5
 800b546:	2164      	movs	r1, #100	; 0x64
 800b548:	fb01 f303 	mul.w	r3, r1, r3
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	3332      	adds	r3, #50	; 0x32
 800b552:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <UART_SetConfig+0x734>)
 800b554:	fba2 2303 	umull	r2, r3, r2, r3
 800b558:	095b      	lsrs	r3, r3, #5
 800b55a:	f003 020f 	and.w	r2, r3, #15
 800b55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4432      	add	r2, r6
 800b566:	609a      	str	r2, [r3, #8]
}
 800b568:	e7ff      	b.n	800b56a <UART_SetConfig+0x722>
 800b56a:	bf00      	nop
 800b56c:	37f4      	adds	r7, #244	; 0xf4
 800b56e:	46bd      	mov	sp, r7
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	40011000 	.word	0x40011000
 800b578:	40011400 	.word	0x40011400
 800b57c:	51eb851f 	.word	0x51eb851f

0800b580 <_ZdlPv>:
 800b580:	f001 bdec 	b.w	800d15c <free>

0800b584 <_Znwj>:
 800b584:	2801      	cmp	r0, #1
 800b586:	bf38      	it	cc
 800b588:	2001      	movcc	r0, #1
 800b58a:	b510      	push	{r4, lr}
 800b58c:	4604      	mov	r4, r0
 800b58e:	4620      	mov	r0, r4
 800b590:	f001 fddc 	bl	800d14c <malloc>
 800b594:	b930      	cbnz	r0, 800b5a4 <_Znwj+0x20>
 800b596:	f000 fa5d 	bl	800ba54 <_ZSt15get_new_handlerv>
 800b59a:	b908      	cbnz	r0, 800b5a0 <_Znwj+0x1c>
 800b59c:	f001 fda4 	bl	800d0e8 <abort>
 800b5a0:	4780      	blx	r0
 800b5a2:	e7f4      	b.n	800b58e <_Znwj+0xa>
 800b5a4:	bd10      	pop	{r4, pc}

0800b5a6 <_ZNSaIcEC1Ev>:
 800b5a6:	4770      	bx	lr

0800b5a8 <_ZNSaIcED1Ev>:
 800b5a8:	4770      	bx	lr

0800b5aa <_ZSt17__throw_bad_allocv>:
 800b5aa:	b508      	push	{r3, lr}
 800b5ac:	f001 fd9c 	bl	800d0e8 <abort>

0800b5b0 <_ZSt19__throw_logic_errorPKc>:
 800b5b0:	b508      	push	{r3, lr}
 800b5b2:	f001 fd99 	bl	800d0e8 <abort>

0800b5b6 <_ZSt20__throw_length_errorPKc>:
 800b5b6:	b508      	push	{r3, lr}
 800b5b8:	f001 fd96 	bl	800d0e8 <abort>

0800b5bc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800b5bc:	b10a      	cbz	r2, 800b5c2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800b5be:	f001 bdd5 	b.w	800d16c <memcpy>
 800b5c2:	4770      	bx	lr

0800b5c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b5c4:	b508      	push	{r3, lr}
 800b5c6:	680b      	ldr	r3, [r1, #0]
 800b5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5cc:	d302      	bcc.n	800b5d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b5ce:	480d      	ldr	r0, [pc, #52]	; (800b604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b5d0:	f7ff fff1 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d90b      	bls.n	800b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b5d8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b5dc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b5e0:	d206      	bcs.n	800b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b5e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b5e6:	bf2a      	itet	cs
 800b5e8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b5ec:	6008      	strcc	r0, [r1, #0]
 800b5ee:	600b      	strcs	r3, [r1, #0]
 800b5f0:	6808      	ldr	r0, [r1, #0]
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d501      	bpl.n	800b5fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b5f6:	f7ff ffd8 	bl	800b5aa <_ZSt17__throw_bad_allocv>
 800b5fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b5fe:	f7ff bfc1 	b.w	800b584 <_Znwj>
 800b602:	bf00      	nop
 800b604:	080123a0 	.word	0x080123a0

0800b608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b608:	f850 3b08 	ldr.w	r3, [r0], #8
 800b60c:	4283      	cmp	r3, r0
 800b60e:	d002      	beq.n	800b616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff bfb5 	b.w	800b580 <_ZdlPv>
 800b616:	4770      	bx	lr

0800b618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b618:	6840      	ldr	r0, [r0, #4]
 800b61a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b61e:	3901      	subs	r1, #1
 800b620:	1a09      	subs	r1, r1, r0
 800b622:	4291      	cmp	r1, r2
 800b624:	b508      	push	{r3, lr}
 800b626:	d202      	bcs.n	800b62e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff ffc4 	bl	800b5b6 <_ZSt20__throw_length_errorPKc>
 800b62e:	bd08      	pop	{r3, pc}

0800b630 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800b630:	6803      	ldr	r3, [r0, #0]
 800b632:	428b      	cmp	r3, r1
 800b634:	d806      	bhi.n	800b644 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800b636:	6840      	ldr	r0, [r0, #4]
 800b638:	4418      	add	r0, r3
 800b63a:	4281      	cmp	r1, r0
 800b63c:	bf94      	ite	ls
 800b63e:	2000      	movls	r0, #0
 800b640:	2001      	movhi	r0, #1
 800b642:	4770      	bx	lr
 800b644:	2001      	movs	r0, #1
 800b646:	4770      	bx	lr

0800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b648:	2a01      	cmp	r2, #1
 800b64a:	b510      	push	{r4, lr}
 800b64c:	d102      	bne.n	800b654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800b64e:	780a      	ldrb	r2, [r1, #0]
 800b650:	7002      	strb	r2, [r0, #0]
 800b652:	bd10      	pop	{r4, pc}
 800b654:	f7ff ffb2 	bl	800b5bc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800b658:	e7fb      	b.n	800b652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800b65a:	2a01      	cmp	r2, #1
 800b65c:	b430      	push	{r4, r5}
 800b65e:	d103      	bne.n	800b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800b660:	780b      	ldrb	r3, [r1, #0]
 800b662:	7003      	strb	r3, [r0, #0]
 800b664:	bc30      	pop	{r4, r5}
 800b666:	4770      	bx	lr
 800b668:	2a00      	cmp	r2, #0
 800b66a:	d0fb      	beq.n	800b664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800b66c:	bc30      	pop	{r4, r5}
 800b66e:	f001 bd8b 	b.w	800d188 <memmove>

0800b672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800b672:	b508      	push	{r3, lr}
 800b674:	1a52      	subs	r2, r2, r1
 800b676:	f7ff ffe7 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b67a:	bd08      	pop	{r3, pc}

0800b67c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b67c:	b508      	push	{r3, lr}
 800b67e:	1a52      	subs	r2, r2, r1
 800b680:	f7ff ffe2 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b684:	bd08      	pop	{r3, pc}

0800b686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800b686:	4288      	cmp	r0, r1
 800b688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	460e      	mov	r6, r1
 800b68e:	d01e      	beq.n	800b6ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800b690:	4603      	mov	r3, r0
 800b692:	684d      	ldr	r5, [r1, #4]
 800b694:	f853 2b08 	ldr.w	r2, [r3], #8
 800b698:	429a      	cmp	r2, r3
 800b69a:	bf14      	ite	ne
 800b69c:	6882      	ldrne	r2, [r0, #8]
 800b69e:	220f      	moveq	r2, #15
 800b6a0:	42aa      	cmp	r2, r5
 800b6a2:	d20a      	bcs.n	800b6ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800b6a4:	a901      	add	r1, sp, #4
 800b6a6:	9501      	str	r5, [sp, #4]
 800b6a8:	f7ff ff8c 	bl	800b5c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f7ff ffaa 	bl	800b608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	6027      	str	r7, [r4, #0]
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	b125      	cbz	r5, 800b6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800b6bc:	6831      	ldr	r1, [r6, #0]
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	f7ff ffc1 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	6065      	str	r5, [r4, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	555a      	strb	r2, [r3, r5]
 800b6ce:	b003      	add	sp, #12
 800b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b6d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b6d8:	461f      	mov	r7, r3
 800b6da:	6843      	ldr	r3, [r0, #4]
 800b6dc:	eb01 0802 	add.w	r8, r1, r2
 800b6e0:	1ab2      	subs	r2, r6, r2
 800b6e2:	441a      	add	r2, r3
 800b6e4:	eba3 0908 	sub.w	r9, r3, r8
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	9201      	str	r2, [sp, #4]
 800b6ec:	f853 2b08 	ldr.w	r2, [r3], #8
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	bf18      	it	ne
 800b6f4:	6882      	ldrne	r2, [r0, #8]
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	bf08      	it	eq
 800b6fa:	220f      	moveq	r2, #15
 800b6fc:	a901      	add	r1, sp, #4
 800b6fe:	4604      	mov	r4, r0
 800b700:	f7ff ff60 	bl	800b5c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b704:	4682      	mov	sl, r0
 800b706:	b11d      	cbz	r5, 800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b708:	6821      	ldr	r1, [r4, #0]
 800b70a:	462a      	mov	r2, r5
 800b70c:	f7ff ff9c 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b710:	b137      	cbz	r7, 800b720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b712:	b12e      	cbz	r6, 800b720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b714:	4632      	mov	r2, r6
 800b716:	4639      	mov	r1, r7
 800b718:	eb0a 0005 	add.w	r0, sl, r5
 800b71c:	f7ff ff94 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b720:	f1b9 0f00 	cmp.w	r9, #0
 800b724:	d007      	beq.n	800b736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b726:	6821      	ldr	r1, [r4, #0]
 800b728:	4435      	add	r5, r6
 800b72a:	464a      	mov	r2, r9
 800b72c:	4441      	add	r1, r8
 800b72e:	eb0a 0005 	add.w	r0, sl, r5
 800b732:	f7ff ff89 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b736:	4620      	mov	r0, r4
 800b738:	f7ff ff66 	bl	800b608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b73c:	9b01      	ldr	r3, [sp, #4]
 800b73e:	f8c4 a000 	str.w	sl, [r4]
 800b742:	60a3      	str	r3, [r4, #8]
 800b744:	b002      	add	sp, #8
 800b746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b74a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800b74a:	f100 0208 	add.w	r2, r0, #8
 800b74e:	6002      	str	r2, [r0, #0]
 800b750:	2200      	movs	r2, #0
 800b752:	6042      	str	r2, [r0, #4]
 800b754:	7202      	strb	r2, [r0, #8]
 800b756:	4770      	bx	lr

0800b758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	4604      	mov	r4, r0
 800b75c:	460e      	mov	r6, r1
 800b75e:	3008      	adds	r0, #8
 800b760:	6020      	str	r0, [r4, #0]
 800b762:	f856 3b08 	ldr.w	r3, [r6], #8
 800b766:	429e      	cmp	r6, r3
 800b768:	460d      	mov	r5, r1
 800b76a:	d10b      	bne.n	800b784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800b76c:	2210      	movs	r2, #16
 800b76e:	4631      	mov	r1, r6
 800b770:	f7ff ff24 	bl	800b5bc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800b774:	686b      	ldr	r3, [r5, #4]
 800b776:	6063      	str	r3, [r4, #4]
 800b778:	2300      	movs	r3, #0
 800b77a:	602e      	str	r6, [r5, #0]
 800b77c:	606b      	str	r3, [r5, #4]
 800b77e:	722b      	strb	r3, [r5, #8]
 800b780:	4620      	mov	r0, r4
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	688b      	ldr	r3, [r1, #8]
 800b788:	60a3      	str	r3, [r4, #8]
 800b78a:	e7f3      	b.n	800b774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800b78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	4604      	mov	r4, r0
 800b790:	f7ff ff3a 	bl	800b608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b794:	4620      	mov	r0, r4
 800b796:	bd10      	pop	{r4, pc}

0800b798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800b798:	b510      	push	{r4, lr}
 800b79a:	4604      	mov	r4, r0
 800b79c:	f7ff ff73 	bl	800b686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bd10      	pop	{r4, pc}

0800b7a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b7a4:	6840      	ldr	r0, [r0, #4]
 800b7a6:	4770      	bx	lr

0800b7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b7a8:	6800      	ldr	r0, [r0, #0]
 800b7aa:	4408      	add	r0, r1
 800b7ac:	4770      	bx	lr

0800b7ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7b2:	f853 2b08 	ldr.w	r2, [r3], #8
 800b7b6:	6846      	ldr	r6, [r0, #4]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	bf18      	it	ne
 800b7bc:	6883      	ldrne	r3, [r0, #8]
 800b7be:	f106 0501 	add.w	r5, r6, #1
 800b7c2:	bf08      	it	eq
 800b7c4:	230f      	moveq	r3, #15
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	d906      	bls.n	800b7dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	f7ff ff7b 	bl	800b6d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	559f      	strb	r7, [r3, r6]
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	6065      	str	r5, [r4, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	555a      	strb	r2, [r3, r5]
 800b7e8:	b003      	add	sp, #12
 800b7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800b7ec:	b510      	push	{r4, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	f7ff ffdd 	bl	800b7ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	bd10      	pop	{r4, pc}

0800b7f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800b7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7fe:	4614      	mov	r4, r2
 800b800:	4680      	mov	r8, r0
 800b802:	462a      	mov	r2, r5
 800b804:	4689      	mov	r9, r1
 800b806:	461f      	mov	r7, r3
 800b808:	4621      	mov	r1, r4
 800b80a:	4b39      	ldr	r3, [pc, #228]	; (800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800b80c:	f7ff ff04 	bl	800b618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b810:	4642      	mov	r2, r8
 800b812:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b816:	f852 6b08 	ldr.w	r6, [r2], #8
 800b81a:	4296      	cmp	r6, r2
 800b81c:	bf18      	it	ne
 800b81e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800b822:	eba5 0b04 	sub.w	fp, r5, r4
 800b826:	eb03 0a0b 	add.w	sl, r3, fp
 800b82a:	bf08      	it	eq
 800b82c:	220f      	moveq	r2, #15
 800b82e:	4552      	cmp	r2, sl
 800b830:	d351      	bcc.n	800b8d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800b832:	444e      	add	r6, r9
 800b834:	4639      	mov	r1, r7
 800b836:	44a1      	add	r9, r4
 800b838:	4640      	mov	r0, r8
 800b83a:	eba3 0909 	sub.w	r9, r3, r9
 800b83e:	f7ff fef7 	bl	800b630 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800b842:	b180      	cbz	r0, 800b866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800b844:	f1b9 0f00 	cmp.w	r9, #0
 800b848:	d006      	beq.n	800b858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b84a:	42ac      	cmp	r4, r5
 800b84c:	d004      	beq.n	800b858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b84e:	464a      	mov	r2, r9
 800b850:	1931      	adds	r1, r6, r4
 800b852:	1970      	adds	r0, r6, r5
 800b854:	f7ff ff01 	bl	800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b858:	b315      	cbz	r5, 800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b85a:	462a      	mov	r2, r5
 800b85c:	4639      	mov	r1, r7
 800b85e:	4630      	mov	r0, r6
 800b860:	f7ff fef2 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b864:	e01c      	b.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b866:	b135      	cbz	r5, 800b876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800b868:	42ac      	cmp	r4, r5
 800b86a:	d33c      	bcc.n	800b8e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800b86c:	462a      	mov	r2, r5
 800b86e:	4639      	mov	r1, r7
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff fef2 	bl	800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	d011      	beq.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b87c:	42ac      	cmp	r4, r5
 800b87e:	d00f      	beq.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b880:	464a      	mov	r2, r9
 800b882:	1931      	adds	r1, r6, r4
 800b884:	1970      	adds	r0, r6, r5
 800b886:	f7ff fee8 	bl	800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b88a:	42ac      	cmp	r4, r5
 800b88c:	d208      	bcs.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b88e:	4434      	add	r4, r6
 800b890:	197b      	adds	r3, r7, r5
 800b892:	429c      	cmp	r4, r3
 800b894:	d30f      	bcc.n	800b8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800b896:	462a      	mov	r2, r5
 800b898:	4639      	mov	r1, r7
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff fedd 	bl	800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b8a4:	f8c8 a004 	str.w	sl, [r8, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f803 200a 	strb.w	r2, [r3, sl]
 800b8b0:	b003      	add	sp, #12
 800b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b6:	42bc      	cmp	r4, r7
 800b8b8:	d803      	bhi.n	800b8c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	eb07 010b 	add.w	r1, r7, fp
 800b8c0:	e7cd      	b.n	800b85e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800b8c2:	1be4      	subs	r4, r4, r7
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff fec6 	bl	800b65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b8ce:	1b2a      	subs	r2, r5, r4
 800b8d0:	1971      	adds	r1, r6, r5
 800b8d2:	1930      	adds	r0, r6, r4
 800b8d4:	e7c4      	b.n	800b860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800b8d6:	9500      	str	r5, [sp, #0]
 800b8d8:	463b      	mov	r3, r7
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4649      	mov	r1, r9
 800b8de:	4640      	mov	r0, r8
 800b8e0:	f7ff fef7 	bl	800b6d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b8e4:	e7dc      	b.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b8e6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ea:	d0d0      	beq.n	800b88e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800b8ec:	e7c8      	b.n	800b880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800b8ee:	bf00      	nop
 800b8f0:	080123b8 	.word	0x080123b8

0800b8f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800b8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	f7f4 fcd8 	bl	80002b0 <strlen>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	9000      	str	r0, [sp, #0]
 800b904:	6862      	ldr	r2, [r4, #4]
 800b906:	2100      	movs	r1, #0
 800b908:	4620      	mov	r0, r4
 800b90a:	f7ff ff75 	bl	800b7f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800b90e:	b004      	add	sp, #16
 800b910:	bd10      	pop	{r4, pc}

0800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800b912:	b508      	push	{r3, lr}
 800b914:	f7ff ffee 	bl	800b8f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800b918:	bd08      	pop	{r3, pc}

0800b91a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b91c:	4604      	mov	r4, r0
 800b91e:	4623      	mov	r3, r4
 800b920:	6840      	ldr	r0, [r0, #4]
 800b922:	f853 6b08 	ldr.w	r6, [r3], #8
 800b926:	429e      	cmp	r6, r3
 800b928:	bf18      	it	ne
 800b92a:	68a3      	ldrne	r3, [r4, #8]
 800b92c:	eb00 0502 	add.w	r5, r0, r2
 800b930:	bf08      	it	eq
 800b932:	230f      	moveq	r3, #15
 800b934:	429d      	cmp	r5, r3
 800b936:	d80a      	bhi.n	800b94e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b938:	b112      	cbz	r2, 800b940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b93a:	4430      	add	r0, r6
 800b93c:	f7ff fe84 	bl	800b648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	6065      	str	r5, [r4, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	4620      	mov	r0, r4
 800b948:	555a      	strb	r2, [r3, r5]
 800b94a:	b002      	add	sp, #8
 800b94c:	bd70      	pop	{r4, r5, r6, pc}
 800b94e:	9200      	str	r2, [sp, #0]
 800b950:	460b      	mov	r3, r1
 800b952:	2200      	movs	r2, #0
 800b954:	4601      	mov	r1, r0
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff febb 	bl	800b6d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b95c:	e7f0      	b.n	800b940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800b95e:	b508      	push	{r3, lr}
 800b960:	e9d1 1200 	ldrd	r1, r2, [r1]
 800b964:	f7ff ffd9 	bl	800b91a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b968:	bd08      	pop	{r3, pc}

0800b96a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800b96a:	b508      	push	{r3, lr}
 800b96c:	f7ff fff7 	bl	800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800b970:	bd08      	pop	{r3, pc}

0800b972 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b972:	6800      	ldr	r0, [r0, #0]
 800b974:	4770      	bx	lr
	...

0800b978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800b978:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b97a:	4604      	mov	r4, r0
 800b97c:	4616      	mov	r6, r2
 800b97e:	460d      	mov	r5, r1
 800b980:	b919      	cbnz	r1, 800b98a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b982:	b112      	cbz	r2, 800b98a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b984:	480d      	ldr	r0, [pc, #52]	; (800b9bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800b986:	f7ff fe13 	bl	800b5b0 <_ZSt19__throw_logic_errorPKc>
 800b98a:	1b73      	subs	r3, r6, r5
 800b98c:	2b0f      	cmp	r3, #15
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	d907      	bls.n	800b9a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800b992:	2200      	movs	r2, #0
 800b994:	a901      	add	r1, sp, #4
 800b996:	4620      	mov	r0, r4
 800b998:	f7ff fe14 	bl	800b5c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	6020      	str	r0, [r4, #0]
 800b9a0:	60a3      	str	r3, [r4, #8]
 800b9a2:	4632      	mov	r2, r6
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	6820      	ldr	r0, [r4, #0]
 800b9a8:	f7ff fe63 	bl	800b672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800b9ac:	9b01      	ldr	r3, [sp, #4]
 800b9ae:	6822      	ldr	r2, [r4, #0]
 800b9b0:	6063      	str	r3, [r4, #4]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	54d1      	strb	r1, [r2, r3]
 800b9b6:	b002      	add	sp, #8
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	bf00      	nop
 800b9bc:	080123d1 	.word	0x080123d1

0800b9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	f100 0308 	add.w	r3, r0, #8
 800b9c6:	6003      	str	r3, [r0, #0]
 800b9c8:	e9d1 5200 	ldrd	r5, r2, [r1]
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	f04f 0300 	mov.w	r3, #0
 800b9d2:	442a      	add	r2, r5
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7ff ffcf 	bl	800b978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b9e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	b919      	cbnz	r1, 800b9f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b9ea:	b112      	cbz	r2, 800b9f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b9ec:	480d      	ldr	r0, [pc, #52]	; (800ba24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b9ee:	f7ff fddf 	bl	800b5b0 <_ZSt19__throw_logic_errorPKc>
 800b9f2:	1b73      	subs	r3, r6, r5
 800b9f4:	2b0f      	cmp	r3, #15
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	d907      	bls.n	800ba0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	a901      	add	r1, sp, #4
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f7ff fde0 	bl	800b5c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	6020      	str	r0, [r4, #0]
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	6820      	ldr	r0, [r4, #0]
 800ba10:	f7ff fe34 	bl	800b67c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	6063      	str	r3, [r4, #4]
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	54d1      	strb	r1, [r2, r3]
 800ba1e:	b002      	add	sp, #8
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	bf00      	nop
 800ba24:	080123d1 	.word	0x080123d1

0800ba28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	f100 0308 	add.w	r3, r0, #8
 800ba2e:	4604      	mov	r4, r0
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	460d      	mov	r5, r1
 800ba34:	b159      	cbz	r1, 800ba4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ba36:	4608      	mov	r0, r1
 800ba38:	f7f4 fc3a 	bl	80002b0 <strlen>
 800ba3c:	182a      	adds	r2, r5, r0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7ff ffcb 	bl	800b9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	bd38      	pop	{r3, r4, r5, pc}
 800ba4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba52:	e7f4      	b.n	800ba3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ba54 <_ZSt15get_new_handlerv>:
 800ba54:	4b02      	ldr	r3, [pc, #8]	; (800ba60 <_ZSt15get_new_handlerv+0xc>)
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	f3bf 8f5b 	dmb	ish
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20000258 	.word	0x20000258

0800ba64 <copysign>:
 800ba64:	b082      	sub	sp, #8
 800ba66:	ec51 0b10 	vmov	r0, r1, d0
 800ba6a:	ed8d 1b00 	vstr	d1, [sp]
 800ba6e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800ba72:	9901      	ldr	r1, [sp, #4]
 800ba74:	ee10 2a10 	vmov	r2, s0
 800ba78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ba7c:	ea40 0301 	orr.w	r3, r0, r1
 800ba80:	ec43 2b10 	vmov	d0, r2, r3
 800ba84:	b002      	add	sp, #8
 800ba86:	4770      	bx	lr

0800ba88 <cosf>:
 800ba88:	ee10 3a10 	vmov	r3, s0
 800ba8c:	b507      	push	{r0, r1, r2, lr}
 800ba8e:	4a1c      	ldr	r2, [pc, #112]	; (800bb00 <cosf+0x78>)
 800ba90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba94:	4293      	cmp	r3, r2
 800ba96:	dc04      	bgt.n	800baa2 <cosf+0x1a>
 800ba98:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800bb04 <cosf+0x7c>
 800ba9c:	f000 fd82 	bl	800c5a4 <__kernel_cosf>
 800baa0:	e004      	b.n	800baac <cosf+0x24>
 800baa2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800baa6:	db04      	blt.n	800bab2 <cosf+0x2a>
 800baa8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800baac:	b003      	add	sp, #12
 800baae:	f85d fb04 	ldr.w	pc, [sp], #4
 800bab2:	4668      	mov	r0, sp
 800bab4:	f000 fc3a 	bl	800c32c <__ieee754_rem_pio2f>
 800bab8:	f000 0003 	and.w	r0, r0, #3
 800babc:	2801      	cmp	r0, #1
 800babe:	d007      	beq.n	800bad0 <cosf+0x48>
 800bac0:	2802      	cmp	r0, #2
 800bac2:	d00e      	beq.n	800bae2 <cosf+0x5a>
 800bac4:	b9a0      	cbnz	r0, 800baf0 <cosf+0x68>
 800bac6:	eddd 0a01 	vldr	s1, [sp, #4]
 800baca:	ed9d 0a00 	vldr	s0, [sp]
 800bace:	e7e5      	b.n	800ba9c <cosf+0x14>
 800bad0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bad4:	ed9d 0a00 	vldr	s0, [sp]
 800bad8:	f001 f84e 	bl	800cb78 <__kernel_sinf>
 800badc:	eeb1 0a40 	vneg.f32	s0, s0
 800bae0:	e7e4      	b.n	800baac <cosf+0x24>
 800bae2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bae6:	ed9d 0a00 	vldr	s0, [sp]
 800baea:	f000 fd5b 	bl	800c5a4 <__kernel_cosf>
 800baee:	e7f5      	b.n	800badc <cosf+0x54>
 800baf0:	eddd 0a01 	vldr	s1, [sp, #4]
 800baf4:	ed9d 0a00 	vldr	s0, [sp]
 800baf8:	2001      	movs	r0, #1
 800bafa:	f001 f83d 	bl	800cb78 <__kernel_sinf>
 800bafe:	e7d5      	b.n	800baac <cosf+0x24>
 800bb00:	3f490fd8 	.word	0x3f490fd8
 800bb04:	00000000 	.word	0x00000000

0800bb08 <sinf>:
 800bb08:	ee10 3a10 	vmov	r3, s0
 800bb0c:	b507      	push	{r0, r1, r2, lr}
 800bb0e:	4a1d      	ldr	r2, [pc, #116]	; (800bb84 <sinf+0x7c>)
 800bb10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb14:	4293      	cmp	r3, r2
 800bb16:	dc05      	bgt.n	800bb24 <sinf+0x1c>
 800bb18:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800bb88 <sinf+0x80>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	f001 f82b 	bl	800cb78 <__kernel_sinf>
 800bb22:	e004      	b.n	800bb2e <sinf+0x26>
 800bb24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb28:	db04      	blt.n	800bb34 <sinf+0x2c>
 800bb2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb2e:	b003      	add	sp, #12
 800bb30:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb34:	4668      	mov	r0, sp
 800bb36:	f000 fbf9 	bl	800c32c <__ieee754_rem_pio2f>
 800bb3a:	f000 0003 	and.w	r0, r0, #3
 800bb3e:	2801      	cmp	r0, #1
 800bb40:	d008      	beq.n	800bb54 <sinf+0x4c>
 800bb42:	2802      	cmp	r0, #2
 800bb44:	d00d      	beq.n	800bb62 <sinf+0x5a>
 800bb46:	b9b0      	cbnz	r0, 800bb76 <sinf+0x6e>
 800bb48:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb4c:	ed9d 0a00 	vldr	s0, [sp]
 800bb50:	2001      	movs	r0, #1
 800bb52:	e7e4      	b.n	800bb1e <sinf+0x16>
 800bb54:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb58:	ed9d 0a00 	vldr	s0, [sp]
 800bb5c:	f000 fd22 	bl	800c5a4 <__kernel_cosf>
 800bb60:	e7e5      	b.n	800bb2e <sinf+0x26>
 800bb62:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb66:	ed9d 0a00 	vldr	s0, [sp]
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	f001 f804 	bl	800cb78 <__kernel_sinf>
 800bb70:	eeb1 0a40 	vneg.f32	s0, s0
 800bb74:	e7db      	b.n	800bb2e <sinf+0x26>
 800bb76:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb7a:	ed9d 0a00 	vldr	s0, [sp]
 800bb7e:	f000 fd11 	bl	800c5a4 <__kernel_cosf>
 800bb82:	e7f5      	b.n	800bb70 <sinf+0x68>
 800bb84:	3f490fd8 	.word	0x3f490fd8
 800bb88:	00000000 	.word	0x00000000

0800bb8c <asin>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	ed2d 8b02 	vpush	{d8}
 800bb92:	ec55 4b10 	vmov	r4, r5, d0
 800bb96:	f000 f837 	bl	800bc08 <__ieee754_asin>
 800bb9a:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <asin+0x68>)
 800bb9c:	eeb0 8a40 	vmov.f32	s16, s0
 800bba0:	eef0 8a60 	vmov.f32	s17, s1
 800bba4:	f993 3000 	ldrsb.w	r3, [r3]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	d01c      	beq.n	800bbe6 <asin+0x5a>
 800bbac:	4622      	mov	r2, r4
 800bbae:	462b      	mov	r3, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 ffda 	bl	8000b6c <__aeabi_dcmpun>
 800bbb8:	b9a8      	cbnz	r0, 800bbe6 <asin+0x5a>
 800bbba:	ec45 4b10 	vmov	d0, r4, r5
 800bbbe:	f001 f9c3 	bl	800cf48 <fabs>
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <asin+0x6c>)
 800bbc4:	ec51 0b10 	vmov	r0, r1, d0
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f7f4 ffc5 	bl	8000b58 <__aeabi_dcmpgt>
 800bbce:	b150      	cbz	r0, 800bbe6 <asin+0x5a>
 800bbd0:	f001 fa92 	bl	800d0f8 <__errno>
 800bbd4:	ecbd 8b02 	vpop	{d8}
 800bbd8:	2321      	movs	r3, #33	; 0x21
 800bbda:	6003      	str	r3, [r0, #0]
 800bbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe0:	4806      	ldr	r0, [pc, #24]	; (800bbfc <asin+0x70>)
 800bbe2:	f001 b9bd 	b.w	800cf60 <nan>
 800bbe6:	eeb0 0a48 	vmov.f32	s0, s16
 800bbea:	eef0 0a68 	vmov.f32	s1, s17
 800bbee:	ecbd 8b02 	vpop	{d8}
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20000009 	.word	0x20000009
 800bbf8:	3ff00000 	.word	0x3ff00000
 800bbfc:	08012cab 	.word	0x08012cab

0800bc00 <atan2>:
 800bc00:	f000 ba16 	b.w	800c030 <__ieee754_atan2>
 800bc04:	0000      	movs	r0, r0
	...

0800bc08 <__ieee754_asin>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ed2d 8b04 	vpush	{d8-d9}
 800bc10:	ec55 4b10 	vmov	r4, r5, d0
 800bc14:	4bcc      	ldr	r3, [pc, #816]	; (800bf48 <__ieee754_asin+0x340>)
 800bc16:	b083      	sub	sp, #12
 800bc18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bc1c:	4598      	cmp	r8, r3
 800bc1e:	9501      	str	r5, [sp, #4]
 800bc20:	dd35      	ble.n	800bc8e <__ieee754_asin+0x86>
 800bc22:	ee10 3a10 	vmov	r3, s0
 800bc26:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800bc2a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800bc2e:	ea58 0303 	orrs.w	r3, r8, r3
 800bc32:	d117      	bne.n	800bc64 <__ieee754_asin+0x5c>
 800bc34:	a3aa      	add	r3, pc, #680	; (adr r3, 800bee0 <__ieee754_asin+0x2d8>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	ee10 0a10 	vmov	r0, s0
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fcfa 	bl	8000638 <__aeabi_dmul>
 800bc44:	a3a8      	add	r3, pc, #672	; (adr r3, 800bee8 <__ieee754_asin+0x2e0>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4629      	mov	r1, r5
 800bc52:	f7f4 fcf1 	bl	8000638 <__aeabi_dmul>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 fb35 	bl	80002cc <__adddf3>
 800bc62:	e00b      	b.n	800bc7c <__ieee754_asin+0x74>
 800bc64:	ee10 2a10 	vmov	r2, s0
 800bc68:	462b      	mov	r3, r5
 800bc6a:	ee10 0a10 	vmov	r0, s0
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 fb2a 	bl	80002c8 <__aeabi_dsub>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	f7f4 fe08 	bl	800088c <__aeabi_ddiv>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	ec45 4b10 	vmov	d0, r4, r5
 800bc84:	b003      	add	sp, #12
 800bc86:	ecbd 8b04 	vpop	{d8-d9}
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	4baf      	ldr	r3, [pc, #700]	; (800bf4c <__ieee754_asin+0x344>)
 800bc90:	4598      	cmp	r8, r3
 800bc92:	dc11      	bgt.n	800bcb8 <__ieee754_asin+0xb0>
 800bc94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bc98:	f280 80ae 	bge.w	800bdf8 <__ieee754_asin+0x1f0>
 800bc9c:	a394      	add	r3, pc, #592	; (adr r3, 800bef0 <__ieee754_asin+0x2e8>)
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	ee10 0a10 	vmov	r0, s0
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 fb10 	bl	80002cc <__adddf3>
 800bcac:	4ba8      	ldr	r3, [pc, #672]	; (800bf50 <__ieee754_asin+0x348>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f7f4 ff52 	bl	8000b58 <__aeabi_dcmpgt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1e3      	bne.n	800bc80 <__ieee754_asin+0x78>
 800bcb8:	ec45 4b10 	vmov	d0, r4, r5
 800bcbc:	f001 f944 	bl	800cf48 <fabs>
 800bcc0:	49a3      	ldr	r1, [pc, #652]	; (800bf50 <__ieee754_asin+0x348>)
 800bcc2:	ec53 2b10 	vmov	r2, r3, d0
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	f7f4 fafe 	bl	80002c8 <__aeabi_dsub>
 800bccc:	4ba1      	ldr	r3, [pc, #644]	; (800bf54 <__ieee754_asin+0x34c>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f7f4 fcb2 	bl	8000638 <__aeabi_dmul>
 800bcd4:	a388      	add	r3, pc, #544	; (adr r3, 800bef8 <__ieee754_asin+0x2f0>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	4604      	mov	r4, r0
 800bcdc:	460d      	mov	r5, r1
 800bcde:	f7f4 fcab 	bl	8000638 <__aeabi_dmul>
 800bce2:	a387      	add	r3, pc, #540	; (adr r3, 800bf00 <__ieee754_asin+0x2f8>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f7f4 faf0 	bl	80002cc <__adddf3>
 800bcec:	4622      	mov	r2, r4
 800bcee:	462b      	mov	r3, r5
 800bcf0:	f7f4 fca2 	bl	8000638 <__aeabi_dmul>
 800bcf4:	a384      	add	r3, pc, #528	; (adr r3, 800bf08 <__ieee754_asin+0x300>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f7f4 fae5 	bl	80002c8 <__aeabi_dsub>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	462b      	mov	r3, r5
 800bd02:	f7f4 fc99 	bl	8000638 <__aeabi_dmul>
 800bd06:	a382      	add	r3, pc, #520	; (adr r3, 800bf10 <__ieee754_asin+0x308>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fade 	bl	80002cc <__adddf3>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fc90 	bl	8000638 <__aeabi_dmul>
 800bd18:	a37f      	add	r3, pc, #508	; (adr r3, 800bf18 <__ieee754_asin+0x310>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fad3 	bl	80002c8 <__aeabi_dsub>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 fc87 	bl	8000638 <__aeabi_dmul>
 800bd2a:	a37d      	add	r3, pc, #500	; (adr r3, 800bf20 <__ieee754_asin+0x318>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 facc 	bl	80002cc <__adddf3>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	f7f4 fc7e 	bl	8000638 <__aeabi_dmul>
 800bd3c:	a37a      	add	r3, pc, #488	; (adr r3, 800bf28 <__ieee754_asin+0x320>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	ec41 0b18 	vmov	d8, r0, r1
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fc75 	bl	8000638 <__aeabi_dmul>
 800bd4e:	a378      	add	r3, pc, #480	; (adr r3, 800bf30 <__ieee754_asin+0x328>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fab8 	bl	80002c8 <__aeabi_dsub>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	f7f4 fc6c 	bl	8000638 <__aeabi_dmul>
 800bd60:	a375      	add	r3, pc, #468	; (adr r3, 800bf38 <__ieee754_asin+0x330>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fab1 	bl	80002cc <__adddf3>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fc63 	bl	8000638 <__aeabi_dmul>
 800bd72:	a373      	add	r3, pc, #460	; (adr r3, 800bf40 <__ieee754_asin+0x338>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 faa6 	bl	80002c8 <__aeabi_dsub>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fc5a 	bl	8000638 <__aeabi_dmul>
 800bd84:	4b72      	ldr	r3, [pc, #456]	; (800bf50 <__ieee754_asin+0x348>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	f7f4 faa0 	bl	80002cc <__adddf3>
 800bd8c:	ec45 4b10 	vmov	d0, r4, r5
 800bd90:	4606      	mov	r6, r0
 800bd92:	460f      	mov	r7, r1
 800bd94:	f000 fa16 	bl	800c1c4 <__ieee754_sqrt>
 800bd98:	4b6f      	ldr	r3, [pc, #444]	; (800bf58 <__ieee754_asin+0x350>)
 800bd9a:	4598      	cmp	r8, r3
 800bd9c:	ec5b ab10 	vmov	sl, fp, d0
 800bda0:	f340 80dc 	ble.w	800bf5c <__ieee754_asin+0x354>
 800bda4:	4632      	mov	r2, r6
 800bda6:	463b      	mov	r3, r7
 800bda8:	ec51 0b18 	vmov	r0, r1, d8
 800bdac:	f7f4 fd6e 	bl	800088c <__aeabi_ddiv>
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	465b      	mov	r3, fp
 800bdb4:	f7f4 fc40 	bl	8000638 <__aeabi_dmul>
 800bdb8:	4652      	mov	r2, sl
 800bdba:	465b      	mov	r3, fp
 800bdbc:	f7f4 fa86 	bl	80002cc <__adddf3>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	f7f4 fa82 	bl	80002cc <__adddf3>
 800bdc8:	a347      	add	r3, pc, #284	; (adr r3, 800bee8 <__ieee754_asin+0x2e0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fa7b 	bl	80002c8 <__aeabi_dsub>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	a142      	add	r1, pc, #264	; (adr r1, 800bee0 <__ieee754_asin+0x2d8>)
 800bdd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bddc:	f7f4 fa74 	bl	80002c8 <__aeabi_dsub>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	bfdc      	itt	le
 800bde6:	4602      	movle	r2, r0
 800bde8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bdec:	4604      	mov	r4, r0
 800bdee:	460d      	mov	r5, r1
 800bdf0:	bfdc      	itt	le
 800bdf2:	4614      	movle	r4, r2
 800bdf4:	461d      	movle	r5, r3
 800bdf6:	e743      	b.n	800bc80 <__ieee754_asin+0x78>
 800bdf8:	ee10 2a10 	vmov	r2, s0
 800bdfc:	ee10 0a10 	vmov	r0, s0
 800be00:	462b      	mov	r3, r5
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fc18 	bl	8000638 <__aeabi_dmul>
 800be08:	a33b      	add	r3, pc, #236	; (adr r3, 800bef8 <__ieee754_asin+0x2f0>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	4606      	mov	r6, r0
 800be10:	460f      	mov	r7, r1
 800be12:	f7f4 fc11 	bl	8000638 <__aeabi_dmul>
 800be16:	a33a      	add	r3, pc, #232	; (adr r3, 800bf00 <__ieee754_asin+0x2f8>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fa56 	bl	80002cc <__adddf3>
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	f7f4 fc08 	bl	8000638 <__aeabi_dmul>
 800be28:	a337      	add	r3, pc, #220	; (adr r3, 800bf08 <__ieee754_asin+0x300>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fa4b 	bl	80002c8 <__aeabi_dsub>
 800be32:	4632      	mov	r2, r6
 800be34:	463b      	mov	r3, r7
 800be36:	f7f4 fbff 	bl	8000638 <__aeabi_dmul>
 800be3a:	a335      	add	r3, pc, #212	; (adr r3, 800bf10 <__ieee754_asin+0x308>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f7f4 fa44 	bl	80002cc <__adddf3>
 800be44:	4632      	mov	r2, r6
 800be46:	463b      	mov	r3, r7
 800be48:	f7f4 fbf6 	bl	8000638 <__aeabi_dmul>
 800be4c:	a332      	add	r3, pc, #200	; (adr r3, 800bf18 <__ieee754_asin+0x310>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fa39 	bl	80002c8 <__aeabi_dsub>
 800be56:	4632      	mov	r2, r6
 800be58:	463b      	mov	r3, r7
 800be5a:	f7f4 fbed 	bl	8000638 <__aeabi_dmul>
 800be5e:	a330      	add	r3, pc, #192	; (adr r3, 800bf20 <__ieee754_asin+0x318>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fa32 	bl	80002cc <__adddf3>
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	f7f4 fbe4 	bl	8000638 <__aeabi_dmul>
 800be70:	a32d      	add	r3, pc, #180	; (adr r3, 800bf28 <__ieee754_asin+0x320>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	4680      	mov	r8, r0
 800be78:	4689      	mov	r9, r1
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fbdb 	bl	8000638 <__aeabi_dmul>
 800be82:	a32b      	add	r3, pc, #172	; (adr r3, 800bf30 <__ieee754_asin+0x328>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 fa1e 	bl	80002c8 <__aeabi_dsub>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	f7f4 fbd2 	bl	8000638 <__aeabi_dmul>
 800be94:	a328      	add	r3, pc, #160	; (adr r3, 800bf38 <__ieee754_asin+0x330>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fa17 	bl	80002cc <__adddf3>
 800be9e:	4632      	mov	r2, r6
 800bea0:	463b      	mov	r3, r7
 800bea2:	f7f4 fbc9 	bl	8000638 <__aeabi_dmul>
 800bea6:	a326      	add	r3, pc, #152	; (adr r3, 800bf40 <__ieee754_asin+0x338>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 fa0c 	bl	80002c8 <__aeabi_dsub>
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	f7f4 fbc0 	bl	8000638 <__aeabi_dmul>
 800beb8:	4b25      	ldr	r3, [pc, #148]	; (800bf50 <__ieee754_asin+0x348>)
 800beba:	2200      	movs	r2, #0
 800bebc:	f7f4 fa06 	bl	80002cc <__adddf3>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fce0 	bl	800088c <__aeabi_ddiv>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	f7f4 fbb2 	bl	8000638 <__aeabi_dmul>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4620      	mov	r0, r4
 800beda:	4629      	mov	r1, r5
 800bedc:	e6bf      	b.n	800bc5e <__ieee754_asin+0x56>
 800bede:	bf00      	nop
 800bee0:	54442d18 	.word	0x54442d18
 800bee4:	3ff921fb 	.word	0x3ff921fb
 800bee8:	33145c07 	.word	0x33145c07
 800beec:	3c91a626 	.word	0x3c91a626
 800bef0:	8800759c 	.word	0x8800759c
 800bef4:	7e37e43c 	.word	0x7e37e43c
 800bef8:	0dfdf709 	.word	0x0dfdf709
 800befc:	3f023de1 	.word	0x3f023de1
 800bf00:	7501b288 	.word	0x7501b288
 800bf04:	3f49efe0 	.word	0x3f49efe0
 800bf08:	b5688f3b 	.word	0xb5688f3b
 800bf0c:	3fa48228 	.word	0x3fa48228
 800bf10:	0e884455 	.word	0x0e884455
 800bf14:	3fc9c155 	.word	0x3fc9c155
 800bf18:	03eb6f7d 	.word	0x03eb6f7d
 800bf1c:	3fd4d612 	.word	0x3fd4d612
 800bf20:	55555555 	.word	0x55555555
 800bf24:	3fc55555 	.word	0x3fc55555
 800bf28:	b12e9282 	.word	0xb12e9282
 800bf2c:	3fb3b8c5 	.word	0x3fb3b8c5
 800bf30:	1b8d0159 	.word	0x1b8d0159
 800bf34:	3fe6066c 	.word	0x3fe6066c
 800bf38:	9c598ac8 	.word	0x9c598ac8
 800bf3c:	40002ae5 	.word	0x40002ae5
 800bf40:	1c8a2d4b 	.word	0x1c8a2d4b
 800bf44:	40033a27 	.word	0x40033a27
 800bf48:	3fefffff 	.word	0x3fefffff
 800bf4c:	3fdfffff 	.word	0x3fdfffff
 800bf50:	3ff00000 	.word	0x3ff00000
 800bf54:	3fe00000 	.word	0x3fe00000
 800bf58:	3fef3332 	.word	0x3fef3332
 800bf5c:	ee10 2a10 	vmov	r2, s0
 800bf60:	ee10 0a10 	vmov	r0, s0
 800bf64:	465b      	mov	r3, fp
 800bf66:	4659      	mov	r1, fp
 800bf68:	f7f4 f9b0 	bl	80002cc <__adddf3>
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	463b      	mov	r3, r7
 800bf70:	ec41 0b19 	vmov	d9, r0, r1
 800bf74:	ec51 0b18 	vmov	r0, r1, d8
 800bf78:	f7f4 fc88 	bl	800088c <__aeabi_ddiv>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	ec51 0b19 	vmov	r0, r1, d9
 800bf84:	f7f4 fb58 	bl	8000638 <__aeabi_dmul>
 800bf88:	f04f 0800 	mov.w	r8, #0
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	460f      	mov	r7, r1
 800bf90:	4642      	mov	r2, r8
 800bf92:	465b      	mov	r3, fp
 800bf94:	4640      	mov	r0, r8
 800bf96:	4659      	mov	r1, fp
 800bf98:	f7f4 fb4e 	bl	8000638 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	f7f4 f990 	bl	80002c8 <__aeabi_dsub>
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	4604      	mov	r4, r0
 800bfac:	460d      	mov	r5, r1
 800bfae:	465b      	mov	r3, fp
 800bfb0:	4650      	mov	r0, sl
 800bfb2:	4659      	mov	r1, fp
 800bfb4:	f7f4 f98a 	bl	80002cc <__adddf3>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f4 fc64 	bl	800088c <__aeabi_ddiv>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	f7f4 f980 	bl	80002cc <__adddf3>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	a113      	add	r1, pc, #76	; (adr r1, 800c020 <__ieee754_asin+0x418>)
 800bfd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfd6:	f7f4 f977 	bl	80002c8 <__aeabi_dsub>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	f7f4 f971 	bl	80002c8 <__aeabi_dsub>
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	465b      	mov	r3, fp
 800bfee:	4640      	mov	r0, r8
 800bff0:	4659      	mov	r1, fp
 800bff2:	f7f4 f96b 	bl	80002cc <__adddf3>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	a10b      	add	r1, pc, #44	; (adr r1, 800c028 <__ieee754_asin+0x420>)
 800bffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c000:	f7f4 f962 	bl	80002c8 <__aeabi_dsub>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f95c 	bl	80002c8 <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	a104      	add	r1, pc, #16	; (adr r1, 800c028 <__ieee754_asin+0x420>)
 800c016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c01a:	e6df      	b.n	800bddc <__ieee754_asin+0x1d4>
 800c01c:	f3af 8000 	nop.w
 800c020:	33145c07 	.word	0x33145c07
 800c024:	3c91a626 	.word	0x3c91a626
 800c028:	54442d18 	.word	0x54442d18
 800c02c:	3fe921fb 	.word	0x3fe921fb

0800c030 <__ieee754_atan2>:
 800c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c034:	ec57 6b11 	vmov	r6, r7, d1
 800c038:	4273      	negs	r3, r6
 800c03a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c1c0 <__ieee754_atan2+0x190>
 800c03e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c042:	4333      	orrs	r3, r6
 800c044:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c048:	4573      	cmp	r3, lr
 800c04a:	ec51 0b10 	vmov	r0, r1, d0
 800c04e:	ee11 8a10 	vmov	r8, s2
 800c052:	d80a      	bhi.n	800c06a <__ieee754_atan2+0x3a>
 800c054:	4244      	negs	r4, r0
 800c056:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c05a:	4304      	orrs	r4, r0
 800c05c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c060:	4574      	cmp	r4, lr
 800c062:	ee10 9a10 	vmov	r9, s0
 800c066:	468c      	mov	ip, r1
 800c068:	d907      	bls.n	800c07a <__ieee754_atan2+0x4a>
 800c06a:	4632      	mov	r2, r6
 800c06c:	463b      	mov	r3, r7
 800c06e:	f7f4 f92d 	bl	80002cc <__adddf3>
 800c072:	ec41 0b10 	vmov	d0, r0, r1
 800c076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c07e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c082:	4334      	orrs	r4, r6
 800c084:	d103      	bne.n	800c08e <__ieee754_atan2+0x5e>
 800c086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c08a:	f000 bdbd 	b.w	800cc08 <atan>
 800c08e:	17bc      	asrs	r4, r7, #30
 800c090:	f004 0402 	and.w	r4, r4, #2
 800c094:	ea53 0909 	orrs.w	r9, r3, r9
 800c098:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c09c:	d107      	bne.n	800c0ae <__ieee754_atan2+0x7e>
 800c09e:	2c02      	cmp	r4, #2
 800c0a0:	d060      	beq.n	800c164 <__ieee754_atan2+0x134>
 800c0a2:	2c03      	cmp	r4, #3
 800c0a4:	d1e5      	bne.n	800c072 <__ieee754_atan2+0x42>
 800c0a6:	a142      	add	r1, pc, #264	; (adr r1, 800c1b0 <__ieee754_atan2+0x180>)
 800c0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ac:	e7e1      	b.n	800c072 <__ieee754_atan2+0x42>
 800c0ae:	ea52 0808 	orrs.w	r8, r2, r8
 800c0b2:	d106      	bne.n	800c0c2 <__ieee754_atan2+0x92>
 800c0b4:	f1bc 0f00 	cmp.w	ip, #0
 800c0b8:	da5f      	bge.n	800c17a <__ieee754_atan2+0x14a>
 800c0ba:	a13f      	add	r1, pc, #252	; (adr r1, 800c1b8 <__ieee754_atan2+0x188>)
 800c0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c0:	e7d7      	b.n	800c072 <__ieee754_atan2+0x42>
 800c0c2:	4572      	cmp	r2, lr
 800c0c4:	d10f      	bne.n	800c0e6 <__ieee754_atan2+0xb6>
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	f104 34ff 	add.w	r4, r4, #4294967295
 800c0cc:	d107      	bne.n	800c0de <__ieee754_atan2+0xae>
 800c0ce:	2c02      	cmp	r4, #2
 800c0d0:	d84c      	bhi.n	800c16c <__ieee754_atan2+0x13c>
 800c0d2:	4b35      	ldr	r3, [pc, #212]	; (800c1a8 <__ieee754_atan2+0x178>)
 800c0d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c0d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c0dc:	e7c9      	b.n	800c072 <__ieee754_atan2+0x42>
 800c0de:	2c02      	cmp	r4, #2
 800c0e0:	d848      	bhi.n	800c174 <__ieee754_atan2+0x144>
 800c0e2:	4b32      	ldr	r3, [pc, #200]	; (800c1ac <__ieee754_atan2+0x17c>)
 800c0e4:	e7f6      	b.n	800c0d4 <__ieee754_atan2+0xa4>
 800c0e6:	4573      	cmp	r3, lr
 800c0e8:	d0e4      	beq.n	800c0b4 <__ieee754_atan2+0x84>
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c0f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0f4:	da1e      	bge.n	800c134 <__ieee754_atan2+0x104>
 800c0f6:	2f00      	cmp	r7, #0
 800c0f8:	da01      	bge.n	800c0fe <__ieee754_atan2+0xce>
 800c0fa:	323c      	adds	r2, #60	; 0x3c
 800c0fc:	db1e      	blt.n	800c13c <__ieee754_atan2+0x10c>
 800c0fe:	4632      	mov	r2, r6
 800c100:	463b      	mov	r3, r7
 800c102:	f7f4 fbc3 	bl	800088c <__aeabi_ddiv>
 800c106:	ec41 0b10 	vmov	d0, r0, r1
 800c10a:	f000 ff1d 	bl	800cf48 <fabs>
 800c10e:	f000 fd7b 	bl	800cc08 <atan>
 800c112:	ec51 0b10 	vmov	r0, r1, d0
 800c116:	2c01      	cmp	r4, #1
 800c118:	d013      	beq.n	800c142 <__ieee754_atan2+0x112>
 800c11a:	2c02      	cmp	r4, #2
 800c11c:	d015      	beq.n	800c14a <__ieee754_atan2+0x11a>
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d0a7      	beq.n	800c072 <__ieee754_atan2+0x42>
 800c122:	a319      	add	r3, pc, #100	; (adr r3, 800c188 <__ieee754_atan2+0x158>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f8ce 	bl	80002c8 <__aeabi_dsub>
 800c12c:	a318      	add	r3, pc, #96	; (adr r3, 800c190 <__ieee754_atan2+0x160>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	e014      	b.n	800c15e <__ieee754_atan2+0x12e>
 800c134:	a118      	add	r1, pc, #96	; (adr r1, 800c198 <__ieee754_atan2+0x168>)
 800c136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c13a:	e7ec      	b.n	800c116 <__ieee754_atan2+0xe6>
 800c13c:	2000      	movs	r0, #0
 800c13e:	2100      	movs	r1, #0
 800c140:	e7e9      	b.n	800c116 <__ieee754_atan2+0xe6>
 800c142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c146:	4619      	mov	r1, r3
 800c148:	e793      	b.n	800c072 <__ieee754_atan2+0x42>
 800c14a:	a30f      	add	r3, pc, #60	; (adr r3, 800c188 <__ieee754_atan2+0x158>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f7f4 f8ba 	bl	80002c8 <__aeabi_dsub>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	a10d      	add	r1, pc, #52	; (adr r1, 800c190 <__ieee754_atan2+0x160>)
 800c15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c15e:	f7f4 f8b3 	bl	80002c8 <__aeabi_dsub>
 800c162:	e786      	b.n	800c072 <__ieee754_atan2+0x42>
 800c164:	a10a      	add	r1, pc, #40	; (adr r1, 800c190 <__ieee754_atan2+0x160>)
 800c166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16a:	e782      	b.n	800c072 <__ieee754_atan2+0x42>
 800c16c:	a10c      	add	r1, pc, #48	; (adr r1, 800c1a0 <__ieee754_atan2+0x170>)
 800c16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c172:	e77e      	b.n	800c072 <__ieee754_atan2+0x42>
 800c174:	2000      	movs	r0, #0
 800c176:	2100      	movs	r1, #0
 800c178:	e77b      	b.n	800c072 <__ieee754_atan2+0x42>
 800c17a:	a107      	add	r1, pc, #28	; (adr r1, 800c198 <__ieee754_atan2+0x168>)
 800c17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c180:	e777      	b.n	800c072 <__ieee754_atan2+0x42>
 800c182:	bf00      	nop
 800c184:	f3af 8000 	nop.w
 800c188:	33145c07 	.word	0x33145c07
 800c18c:	3ca1a626 	.word	0x3ca1a626
 800c190:	54442d18 	.word	0x54442d18
 800c194:	400921fb 	.word	0x400921fb
 800c198:	54442d18 	.word	0x54442d18
 800c19c:	3ff921fb 	.word	0x3ff921fb
 800c1a0:	54442d18 	.word	0x54442d18
 800c1a4:	3fe921fb 	.word	0x3fe921fb
 800c1a8:	08012400 	.word	0x08012400
 800c1ac:	08012418 	.word	0x08012418
 800c1b0:	54442d18 	.word	0x54442d18
 800c1b4:	c00921fb 	.word	0xc00921fb
 800c1b8:	54442d18 	.word	0x54442d18
 800c1bc:	bff921fb 	.word	0xbff921fb
 800c1c0:	7ff00000 	.word	0x7ff00000

0800c1c4 <__ieee754_sqrt>:
 800c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c8:	ec55 4b10 	vmov	r4, r5, d0
 800c1cc:	4e56      	ldr	r6, [pc, #344]	; (800c328 <__ieee754_sqrt+0x164>)
 800c1ce:	43ae      	bics	r6, r5
 800c1d0:	ee10 0a10 	vmov	r0, s0
 800c1d4:	ee10 3a10 	vmov	r3, s0
 800c1d8:	4629      	mov	r1, r5
 800c1da:	462a      	mov	r2, r5
 800c1dc:	d110      	bne.n	800c200 <__ieee754_sqrt+0x3c>
 800c1de:	ee10 2a10 	vmov	r2, s0
 800c1e2:	462b      	mov	r3, r5
 800c1e4:	f7f4 fa28 	bl	8000638 <__aeabi_dmul>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	f7f4 f86c 	bl	80002cc <__adddf3>
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	ec45 4b10 	vmov	d0, r4, r5
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	2d00      	cmp	r5, #0
 800c202:	dc10      	bgt.n	800c226 <__ieee754_sqrt+0x62>
 800c204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c208:	4330      	orrs	r0, r6
 800c20a:	d0f5      	beq.n	800c1f8 <__ieee754_sqrt+0x34>
 800c20c:	b15d      	cbz	r5, 800c226 <__ieee754_sqrt+0x62>
 800c20e:	ee10 2a10 	vmov	r2, s0
 800c212:	462b      	mov	r3, r5
 800c214:	ee10 0a10 	vmov	r0, s0
 800c218:	f7f4 f856 	bl	80002c8 <__aeabi_dsub>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	f7f4 fb34 	bl	800088c <__aeabi_ddiv>
 800c224:	e7e6      	b.n	800c1f4 <__ieee754_sqrt+0x30>
 800c226:	1509      	asrs	r1, r1, #20
 800c228:	d076      	beq.n	800c318 <__ieee754_sqrt+0x154>
 800c22a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c22e:	07ce      	lsls	r6, r1, #31
 800c230:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c234:	bf5e      	ittt	pl
 800c236:	0fda      	lsrpl	r2, r3, #31
 800c238:	005b      	lslpl	r3, r3, #1
 800c23a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c23e:	0fda      	lsrs	r2, r3, #31
 800c240:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c244:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c248:	2000      	movs	r0, #0
 800c24a:	106d      	asrs	r5, r5, #1
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	f04f 0e16 	mov.w	lr, #22
 800c252:	4684      	mov	ip, r0
 800c254:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c258:	eb0c 0401 	add.w	r4, ip, r1
 800c25c:	4294      	cmp	r4, r2
 800c25e:	bfde      	ittt	le
 800c260:	1b12      	suble	r2, r2, r4
 800c262:	eb04 0c01 	addle.w	ip, r4, r1
 800c266:	1840      	addle	r0, r0, r1
 800c268:	0052      	lsls	r2, r2, #1
 800c26a:	f1be 0e01 	subs.w	lr, lr, #1
 800c26e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c272:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c27a:	d1ed      	bne.n	800c258 <__ieee754_sqrt+0x94>
 800c27c:	4671      	mov	r1, lr
 800c27e:	2720      	movs	r7, #32
 800c280:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c284:	4562      	cmp	r2, ip
 800c286:	eb04 060e 	add.w	r6, r4, lr
 800c28a:	dc02      	bgt.n	800c292 <__ieee754_sqrt+0xce>
 800c28c:	d113      	bne.n	800c2b6 <__ieee754_sqrt+0xf2>
 800c28e:	429e      	cmp	r6, r3
 800c290:	d811      	bhi.n	800c2b6 <__ieee754_sqrt+0xf2>
 800c292:	2e00      	cmp	r6, #0
 800c294:	eb06 0e04 	add.w	lr, r6, r4
 800c298:	da43      	bge.n	800c322 <__ieee754_sqrt+0x15e>
 800c29a:	f1be 0f00 	cmp.w	lr, #0
 800c29e:	db40      	blt.n	800c322 <__ieee754_sqrt+0x15e>
 800c2a0:	f10c 0801 	add.w	r8, ip, #1
 800c2a4:	eba2 020c 	sub.w	r2, r2, ip
 800c2a8:	429e      	cmp	r6, r3
 800c2aa:	bf88      	it	hi
 800c2ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c2b0:	1b9b      	subs	r3, r3, r6
 800c2b2:	4421      	add	r1, r4
 800c2b4:	46c4      	mov	ip, r8
 800c2b6:	0052      	lsls	r2, r2, #1
 800c2b8:	3f01      	subs	r7, #1
 800c2ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c2be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c2c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2c6:	d1dd      	bne.n	800c284 <__ieee754_sqrt+0xc0>
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	d006      	beq.n	800c2da <__ieee754_sqrt+0x116>
 800c2cc:	1c4c      	adds	r4, r1, #1
 800c2ce:	bf13      	iteet	ne
 800c2d0:	3101      	addne	r1, #1
 800c2d2:	3001      	addeq	r0, #1
 800c2d4:	4639      	moveq	r1, r7
 800c2d6:	f021 0101 	bicne.w	r1, r1, #1
 800c2da:	1043      	asrs	r3, r0, #1
 800c2dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c2e0:	0849      	lsrs	r1, r1, #1
 800c2e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c2e6:	07c2      	lsls	r2, r0, #31
 800c2e8:	bf48      	it	mi
 800c2ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c2ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	463d      	mov	r5, r7
 800c2f6:	e77f      	b.n	800c1f8 <__ieee754_sqrt+0x34>
 800c2f8:	0ada      	lsrs	r2, r3, #11
 800c2fa:	3815      	subs	r0, #21
 800c2fc:	055b      	lsls	r3, r3, #21
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	d0fa      	beq.n	800c2f8 <__ieee754_sqrt+0x134>
 800c302:	02d7      	lsls	r7, r2, #11
 800c304:	d50a      	bpl.n	800c31c <__ieee754_sqrt+0x158>
 800c306:	f1c1 0420 	rsb	r4, r1, #32
 800c30a:	fa23 f404 	lsr.w	r4, r3, r4
 800c30e:	1e4d      	subs	r5, r1, #1
 800c310:	408b      	lsls	r3, r1
 800c312:	4322      	orrs	r2, r4
 800c314:	1b41      	subs	r1, r0, r5
 800c316:	e788      	b.n	800c22a <__ieee754_sqrt+0x66>
 800c318:	4608      	mov	r0, r1
 800c31a:	e7f0      	b.n	800c2fe <__ieee754_sqrt+0x13a>
 800c31c:	0052      	lsls	r2, r2, #1
 800c31e:	3101      	adds	r1, #1
 800c320:	e7ef      	b.n	800c302 <__ieee754_sqrt+0x13e>
 800c322:	46e0      	mov	r8, ip
 800c324:	e7be      	b.n	800c2a4 <__ieee754_sqrt+0xe0>
 800c326:	bf00      	nop
 800c328:	7ff00000 	.word	0x7ff00000

0800c32c <__ieee754_rem_pio2f>:
 800c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32e:	ee10 6a10 	vmov	r6, s0
 800c332:	4b8e      	ldr	r3, [pc, #568]	; (800c56c <__ieee754_rem_pio2f+0x240>)
 800c334:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c338:	429d      	cmp	r5, r3
 800c33a:	b087      	sub	sp, #28
 800c33c:	eef0 7a40 	vmov.f32	s15, s0
 800c340:	4604      	mov	r4, r0
 800c342:	dc05      	bgt.n	800c350 <__ieee754_rem_pio2f+0x24>
 800c344:	2300      	movs	r3, #0
 800c346:	ed80 0a00 	vstr	s0, [r0]
 800c34a:	6043      	str	r3, [r0, #4]
 800c34c:	2000      	movs	r0, #0
 800c34e:	e01a      	b.n	800c386 <__ieee754_rem_pio2f+0x5a>
 800c350:	4b87      	ldr	r3, [pc, #540]	; (800c570 <__ieee754_rem_pio2f+0x244>)
 800c352:	429d      	cmp	r5, r3
 800c354:	dc46      	bgt.n	800c3e4 <__ieee754_rem_pio2f+0xb8>
 800c356:	2e00      	cmp	r6, #0
 800c358:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c574 <__ieee754_rem_pio2f+0x248>
 800c35c:	4b86      	ldr	r3, [pc, #536]	; (800c578 <__ieee754_rem_pio2f+0x24c>)
 800c35e:	f025 050f 	bic.w	r5, r5, #15
 800c362:	dd1f      	ble.n	800c3a4 <__ieee754_rem_pio2f+0x78>
 800c364:	429d      	cmp	r5, r3
 800c366:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c36a:	d00e      	beq.n	800c38a <__ieee754_rem_pio2f+0x5e>
 800c36c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c57c <__ieee754_rem_pio2f+0x250>
 800c370:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c374:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c378:	ed80 0a00 	vstr	s0, [r0]
 800c37c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c380:	2001      	movs	r0, #1
 800c382:	edc4 7a01 	vstr	s15, [r4, #4]
 800c386:	b007      	add	sp, #28
 800c388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c580 <__ieee754_rem_pio2f+0x254>
 800c38e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c584 <__ieee754_rem_pio2f+0x258>
 800c392:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c396:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c39a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c39e:	edc0 6a00 	vstr	s13, [r0]
 800c3a2:	e7eb      	b.n	800c37c <__ieee754_rem_pio2f+0x50>
 800c3a4:	429d      	cmp	r5, r3
 800c3a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c3aa:	d00e      	beq.n	800c3ca <__ieee754_rem_pio2f+0x9e>
 800c3ac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c57c <__ieee754_rem_pio2f+0x250>
 800c3b0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c3b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c3b8:	ed80 0a00 	vstr	s0, [r0]
 800c3bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c4:	edc4 7a01 	vstr	s15, [r4, #4]
 800c3c8:	e7dd      	b.n	800c386 <__ieee754_rem_pio2f+0x5a>
 800c3ca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c580 <__ieee754_rem_pio2f+0x254>
 800c3ce:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c584 <__ieee754_rem_pio2f+0x258>
 800c3d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c3d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c3da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3de:	edc0 6a00 	vstr	s13, [r0]
 800c3e2:	e7eb      	b.n	800c3bc <__ieee754_rem_pio2f+0x90>
 800c3e4:	4b68      	ldr	r3, [pc, #416]	; (800c588 <__ieee754_rem_pio2f+0x25c>)
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	dc72      	bgt.n	800c4d0 <__ieee754_rem_pio2f+0x1a4>
 800c3ea:	f000 fdc1 	bl	800cf70 <fabsf>
 800c3ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c58c <__ieee754_rem_pio2f+0x260>
 800c3f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c3fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c402:	ee17 0a90 	vmov	r0, s15
 800c406:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c574 <__ieee754_rem_pio2f+0x248>
 800c40a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c40e:	281f      	cmp	r0, #31
 800c410:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c57c <__ieee754_rem_pio2f+0x250>
 800c414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c418:	eeb1 6a47 	vneg.f32	s12, s14
 800c41c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c420:	ee16 2a90 	vmov	r2, s13
 800c424:	dc1c      	bgt.n	800c460 <__ieee754_rem_pio2f+0x134>
 800c426:	495a      	ldr	r1, [pc, #360]	; (800c590 <__ieee754_rem_pio2f+0x264>)
 800c428:	1e47      	subs	r7, r0, #1
 800c42a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c42e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c432:	428b      	cmp	r3, r1
 800c434:	d014      	beq.n	800c460 <__ieee754_rem_pio2f+0x134>
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	ed94 7a00 	vldr	s14, [r4]
 800c43c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c440:	2e00      	cmp	r6, #0
 800c442:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c446:	ed84 0a01 	vstr	s0, [r4, #4]
 800c44a:	da9c      	bge.n	800c386 <__ieee754_rem_pio2f+0x5a>
 800c44c:	eeb1 7a47 	vneg.f32	s14, s14
 800c450:	eeb1 0a40 	vneg.f32	s0, s0
 800c454:	ed84 7a00 	vstr	s14, [r4]
 800c458:	ed84 0a01 	vstr	s0, [r4, #4]
 800c45c:	4240      	negs	r0, r0
 800c45e:	e792      	b.n	800c386 <__ieee754_rem_pio2f+0x5a>
 800c460:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c464:	15eb      	asrs	r3, r5, #23
 800c466:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c46a:	2d08      	cmp	r5, #8
 800c46c:	dde3      	ble.n	800c436 <__ieee754_rem_pio2f+0x10a>
 800c46e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c580 <__ieee754_rem_pio2f+0x254>
 800c472:	eef0 6a40 	vmov.f32	s13, s0
 800c476:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c47a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c47e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c482:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c584 <__ieee754_rem_pio2f+0x258>
 800c486:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800c48a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c48e:	eef0 7a40 	vmov.f32	s15, s0
 800c492:	ee15 2a90 	vmov	r2, s11
 800c496:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c49a:	1a5b      	subs	r3, r3, r1
 800c49c:	2b19      	cmp	r3, #25
 800c49e:	dc04      	bgt.n	800c4aa <__ieee754_rem_pio2f+0x17e>
 800c4a0:	edc4 5a00 	vstr	s11, [r4]
 800c4a4:	eeb0 0a66 	vmov.f32	s0, s13
 800c4a8:	e7c6      	b.n	800c438 <__ieee754_rem_pio2f+0x10c>
 800c4aa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c594 <__ieee754_rem_pio2f+0x268>
 800c4ae:	eeb0 0a66 	vmov.f32	s0, s13
 800c4b2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c4b6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c4ba:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c598 <__ieee754_rem_pio2f+0x26c>
 800c4be:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c4c2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c4c6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c4ca:	ed84 7a00 	vstr	s14, [r4]
 800c4ce:	e7b3      	b.n	800c438 <__ieee754_rem_pio2f+0x10c>
 800c4d0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c4d4:	db06      	blt.n	800c4e4 <__ieee754_rem_pio2f+0x1b8>
 800c4d6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c4da:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4de:	edc0 7a00 	vstr	s15, [r0]
 800c4e2:	e733      	b.n	800c34c <__ieee754_rem_pio2f+0x20>
 800c4e4:	15ea      	asrs	r2, r5, #23
 800c4e6:	3a86      	subs	r2, #134	; 0x86
 800c4e8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c4ec:	ee07 3a90 	vmov	s15, r3
 800c4f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4f4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c59c <__ieee754_rem_pio2f+0x270>
 800c4f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c500:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c504:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c508:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c50c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c514:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c51c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c524:	edcd 7a05 	vstr	s15, [sp, #20]
 800c528:	d11e      	bne.n	800c568 <__ieee754_rem_pio2f+0x23c>
 800c52a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c532:	bf14      	ite	ne
 800c534:	2302      	movne	r3, #2
 800c536:	2301      	moveq	r3, #1
 800c538:	4919      	ldr	r1, [pc, #100]	; (800c5a0 <__ieee754_rem_pio2f+0x274>)
 800c53a:	9101      	str	r1, [sp, #4]
 800c53c:	2102      	movs	r1, #2
 800c53e:	9100      	str	r1, [sp, #0]
 800c540:	a803      	add	r0, sp, #12
 800c542:	4621      	mov	r1, r4
 800c544:	f000 f88e 	bl	800c664 <__kernel_rem_pio2f>
 800c548:	2e00      	cmp	r6, #0
 800c54a:	f6bf af1c 	bge.w	800c386 <__ieee754_rem_pio2f+0x5a>
 800c54e:	edd4 7a00 	vldr	s15, [r4]
 800c552:	eef1 7a67 	vneg.f32	s15, s15
 800c556:	edc4 7a00 	vstr	s15, [r4]
 800c55a:	edd4 7a01 	vldr	s15, [r4, #4]
 800c55e:	eef1 7a67 	vneg.f32	s15, s15
 800c562:	edc4 7a01 	vstr	s15, [r4, #4]
 800c566:	e779      	b.n	800c45c <__ieee754_rem_pio2f+0x130>
 800c568:	2303      	movs	r3, #3
 800c56a:	e7e5      	b.n	800c538 <__ieee754_rem_pio2f+0x20c>
 800c56c:	3f490fd8 	.word	0x3f490fd8
 800c570:	4016cbe3 	.word	0x4016cbe3
 800c574:	3fc90f80 	.word	0x3fc90f80
 800c578:	3fc90fd0 	.word	0x3fc90fd0
 800c57c:	37354443 	.word	0x37354443
 800c580:	37354400 	.word	0x37354400
 800c584:	2e85a308 	.word	0x2e85a308
 800c588:	43490f80 	.word	0x43490f80
 800c58c:	3f22f984 	.word	0x3f22f984
 800c590:	08012430 	.word	0x08012430
 800c594:	2e85a300 	.word	0x2e85a300
 800c598:	248d3132 	.word	0x248d3132
 800c59c:	43800000 	.word	0x43800000
 800c5a0:	080124b0 	.word	0x080124b0

0800c5a4 <__kernel_cosf>:
 800c5a4:	ee10 3a10 	vmov	r3, s0
 800c5a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c5b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c5b4:	da05      	bge.n	800c5c2 <__kernel_cosf+0x1e>
 800c5b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c5ba:	ee17 2a90 	vmov	r2, s15
 800c5be:	2a00      	cmp	r2, #0
 800c5c0:	d03d      	beq.n	800c63e <__kernel_cosf+0x9a>
 800c5c2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c5c6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c644 <__kernel_cosf+0xa0>
 800c5ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c648 <__kernel_cosf+0xa4>
 800c5ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c64c <__kernel_cosf+0xa8>
 800c5d2:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <__kernel_cosf+0xac>)
 800c5d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c654 <__kernel_cosf+0xb0>
 800c5de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c5e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c658 <__kernel_cosf+0xb4>
 800c5e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c5ea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c65c <__kernel_cosf+0xb8>
 800c5ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c5f2:	eeb0 7a66 	vmov.f32	s14, s13
 800c5f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c5fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c5fe:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c602:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c606:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c60a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c60e:	dc04      	bgt.n	800c61a <__kernel_cosf+0x76>
 800c610:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c614:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c618:	4770      	bx	lr
 800c61a:	4a11      	ldr	r2, [pc, #68]	; (800c660 <__kernel_cosf+0xbc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	bfda      	itte	le
 800c620:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c624:	ee06 3a90 	vmovle	s13, r3
 800c628:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c62c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c630:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c638:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c63c:	4770      	bx	lr
 800c63e:	eeb0 0a46 	vmov.f32	s0, s12
 800c642:	4770      	bx	lr
 800c644:	ad47d74e 	.word	0xad47d74e
 800c648:	310f74f6 	.word	0x310f74f6
 800c64c:	3d2aaaab 	.word	0x3d2aaaab
 800c650:	3e999999 	.word	0x3e999999
 800c654:	b493f27c 	.word	0xb493f27c
 800c658:	37d00d01 	.word	0x37d00d01
 800c65c:	bab60b61 	.word	0xbab60b61
 800c660:	3f480000 	.word	0x3f480000

0800c664 <__kernel_rem_pio2f>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	ed2d 8b04 	vpush	{d8-d9}
 800c66c:	b0d7      	sub	sp, #348	; 0x15c
 800c66e:	4616      	mov	r6, r2
 800c670:	4698      	mov	r8, r3
 800c672:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c674:	4bbb      	ldr	r3, [pc, #748]	; (800c964 <__kernel_rem_pio2f+0x300>)
 800c676:	9001      	str	r0, [sp, #4]
 800c678:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800c67c:	1d33      	adds	r3, r6, #4
 800c67e:	460d      	mov	r5, r1
 800c680:	f108 39ff 	add.w	r9, r8, #4294967295
 800c684:	db29      	blt.n	800c6da <__kernel_rem_pio2f+0x76>
 800c686:	1ef1      	subs	r1, r6, #3
 800c688:	bf48      	it	mi
 800c68a:	1d31      	addmi	r1, r6, #4
 800c68c:	10c9      	asrs	r1, r1, #3
 800c68e:	1c4c      	adds	r4, r1, #1
 800c690:	00e3      	lsls	r3, r4, #3
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c696:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c974 <__kernel_rem_pio2f+0x310>
 800c69a:	eba1 0009 	sub.w	r0, r1, r9
 800c69e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800c6a2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800c6a6:	eb07 0c09 	add.w	ip, r7, r9
 800c6aa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4563      	cmp	r3, ip
 800c6b2:	dd14      	ble.n	800c6de <__kernel_rem_pio2f+0x7a>
 800c6b4:	ab1a      	add	r3, sp, #104	; 0x68
 800c6b6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800c6ba:	46cc      	mov	ip, r9
 800c6bc:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800c6c0:	f1c8 0b01 	rsb	fp, r8, #1
 800c6c4:	eb0b 020c 	add.w	r2, fp, ip
 800c6c8:	4297      	cmp	r7, r2
 800c6ca:	db27      	blt.n	800c71c <__kernel_rem_pio2f+0xb8>
 800c6cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c6d0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c974 <__kernel_rem_pio2f+0x310>
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	e016      	b.n	800c708 <__kernel_rem_pio2f+0xa4>
 800c6da:	2100      	movs	r1, #0
 800c6dc:	e7d7      	b.n	800c68e <__kernel_rem_pio2f+0x2a>
 800c6de:	42d8      	cmn	r0, r3
 800c6e0:	bf5d      	ittte	pl
 800c6e2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800c6e6:	ee07 2a90 	vmovpl	s15, r2
 800c6ea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c6ee:	eef0 7a47 	vmovmi.f32	s15, s14
 800c6f2:	ecea 7a01 	vstmia	sl!, {s15}
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	e7da      	b.n	800c6b0 <__kernel_rem_pio2f+0x4c>
 800c6fa:	ecfe 6a01 	vldmia	lr!, {s13}
 800c6fe:	ed90 7a00 	vldr	s14, [r0]
 800c702:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c706:	3201      	adds	r2, #1
 800c708:	454a      	cmp	r2, r9
 800c70a:	f1a0 0004 	sub.w	r0, r0, #4
 800c70e:	ddf4      	ble.n	800c6fa <__kernel_rem_pio2f+0x96>
 800c710:	ecea 7a01 	vstmia	sl!, {s15}
 800c714:	3304      	adds	r3, #4
 800c716:	f10c 0c01 	add.w	ip, ip, #1
 800c71a:	e7d3      	b.n	800c6c4 <__kernel_rem_pio2f+0x60>
 800c71c:	ab06      	add	r3, sp, #24
 800c71e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c726:	eddf 8a92 	vldr	s17, [pc, #584]	; 800c970 <__kernel_rem_pio2f+0x30c>
 800c72a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800c96c <__kernel_rem_pio2f+0x308>
 800c72e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	46ba      	mov	sl, r7
 800c736:	ab56      	add	r3, sp, #344	; 0x158
 800c738:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c73c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c740:	ab06      	add	r3, sp, #24
 800c742:	4618      	mov	r0, r3
 800c744:	4652      	mov	r2, sl
 800c746:	2a00      	cmp	r2, #0
 800c748:	dc51      	bgt.n	800c7ee <__kernel_rem_pio2f+0x18a>
 800c74a:	4620      	mov	r0, r4
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	f000 fc59 	bl	800d004 <scalbnf>
 800c752:	eeb0 8a40 	vmov.f32	s16, s0
 800c756:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c75a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c75e:	f000 fc0f 	bl	800cf80 <floorf>
 800c762:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c766:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c76a:	2c00      	cmp	r4, #0
 800c76c:	9b05      	ldr	r3, [sp, #20]
 800c76e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c772:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c776:	edcd 7a00 	vstr	s15, [sp]
 800c77a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c77e:	dd4b      	ble.n	800c818 <__kernel_rem_pio2f+0x1b4>
 800c780:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c784:	aa06      	add	r2, sp, #24
 800c786:	f1c4 0e08 	rsb	lr, r4, #8
 800c78a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c78e:	ee17 1a90 	vmov	r1, s15
 800c792:	fa42 f00e 	asr.w	r0, r2, lr
 800c796:	4401      	add	r1, r0
 800c798:	9100      	str	r1, [sp, #0]
 800c79a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c79e:	a906      	add	r1, sp, #24
 800c7a0:	1a12      	subs	r2, r2, r0
 800c7a2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c7a6:	f1c4 0007 	rsb	r0, r4, #7
 800c7aa:	fa42 fb00 	asr.w	fp, r2, r0
 800c7ae:	f1bb 0f00 	cmp.w	fp, #0
 800c7b2:	dd43      	ble.n	800c83c <__kernel_rem_pio2f+0x1d8>
 800c7b4:	9a00      	ldr	r2, [sp, #0]
 800c7b6:	f04f 0e00 	mov.w	lr, #0
 800c7ba:	3201      	adds	r2, #1
 800c7bc:	9200      	str	r2, [sp, #0]
 800c7be:	4670      	mov	r0, lr
 800c7c0:	45f2      	cmp	sl, lr
 800c7c2:	dc6c      	bgt.n	800c89e <__kernel_rem_pio2f+0x23a>
 800c7c4:	2c00      	cmp	r4, #0
 800c7c6:	dd04      	ble.n	800c7d2 <__kernel_rem_pio2f+0x16e>
 800c7c8:	2c01      	cmp	r4, #1
 800c7ca:	d079      	beq.n	800c8c0 <__kernel_rem_pio2f+0x25c>
 800c7cc:	2c02      	cmp	r4, #2
 800c7ce:	f000 8082 	beq.w	800c8d6 <__kernel_rem_pio2f+0x272>
 800c7d2:	f1bb 0f02 	cmp.w	fp, #2
 800c7d6:	d131      	bne.n	800c83c <__kernel_rem_pio2f+0x1d8>
 800c7d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c7dc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c7e0:	b360      	cbz	r0, 800c83c <__kernel_rem_pio2f+0x1d8>
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fc0e 	bl	800d004 <scalbnf>
 800c7e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c7ec:	e026      	b.n	800c83c <__kernel_rem_pio2f+0x1d8>
 800c7ee:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c7f2:	3a01      	subs	r2, #1
 800c7f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7f8:	a942      	add	r1, sp, #264	; 0x108
 800c7fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7fe:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c802:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c806:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c80a:	eca0 0a01 	vstmia	r0!, {s0}
 800c80e:	ed9c 0a00 	vldr	s0, [ip]
 800c812:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c816:	e796      	b.n	800c746 <__kernel_rem_pio2f+0xe2>
 800c818:	d107      	bne.n	800c82a <__kernel_rem_pio2f+0x1c6>
 800c81a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c81e:	a906      	add	r1, sp, #24
 800c820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c824:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800c828:	e7c1      	b.n	800c7ae <__kernel_rem_pio2f+0x14a>
 800c82a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c82e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c836:	da2f      	bge.n	800c898 <__kernel_rem_pio2f+0x234>
 800c838:	f04f 0b00 	mov.w	fp, #0
 800c83c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c844:	f040 8098 	bne.w	800c978 <__kernel_rem_pio2f+0x314>
 800c848:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c84c:	469c      	mov	ip, r3
 800c84e:	2200      	movs	r2, #0
 800c850:	45bc      	cmp	ip, r7
 800c852:	da48      	bge.n	800c8e6 <__kernel_rem_pio2f+0x282>
 800c854:	2a00      	cmp	r2, #0
 800c856:	d05f      	beq.n	800c918 <__kernel_rem_pio2f+0x2b4>
 800c858:	aa06      	add	r2, sp, #24
 800c85a:	3c08      	subs	r4, #8
 800c85c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c860:	2900      	cmp	r1, #0
 800c862:	d07d      	beq.n	800c960 <__kernel_rem_pio2f+0x2fc>
 800c864:	4620      	mov	r0, r4
 800c866:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	f000 fbca 	bl	800d004 <scalbnf>
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c970 <__kernel_rem_pio2f+0x30c>
 800c876:	4619      	mov	r1, r3
 800c878:	2900      	cmp	r1, #0
 800c87a:	f280 80af 	bge.w	800c9dc <__kernel_rem_pio2f+0x378>
 800c87e:	4618      	mov	r0, r3
 800c880:	2400      	movs	r4, #0
 800c882:	2800      	cmp	r0, #0
 800c884:	f2c0 80d0 	blt.w	800ca28 <__kernel_rem_pio2f+0x3c4>
 800c888:	a942      	add	r1, sp, #264	; 0x108
 800c88a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800c88e:	4a36      	ldr	r2, [pc, #216]	; (800c968 <__kernel_rem_pio2f+0x304>)
 800c890:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c974 <__kernel_rem_pio2f+0x310>
 800c894:	2100      	movs	r1, #0
 800c896:	e0bb      	b.n	800ca10 <__kernel_rem_pio2f+0x3ac>
 800c898:	f04f 0b02 	mov.w	fp, #2
 800c89c:	e78a      	b.n	800c7b4 <__kernel_rem_pio2f+0x150>
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	b948      	cbnz	r0, 800c8b6 <__kernel_rem_pio2f+0x252>
 800c8a2:	b11a      	cbz	r2, 800c8ac <__kernel_rem_pio2f+0x248>
 800c8a4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f10e 0e01 	add.w	lr, lr, #1
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	e784      	b.n	800c7c0 <__kernel_rem_pio2f+0x15c>
 800c8b6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	4602      	mov	r2, r0
 800c8be:	e7f5      	b.n	800c8ac <__kernel_rem_pio2f+0x248>
 800c8c0:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c8c4:	ab06      	add	r3, sp, #24
 800c8c6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ce:	aa06      	add	r2, sp, #24
 800c8d0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800c8d4:	e77d      	b.n	800c7d2 <__kernel_rem_pio2f+0x16e>
 800c8d6:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c8da:	ab06      	add	r3, sp, #24
 800c8dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c8e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e4:	e7f3      	b.n	800c8ce <__kernel_rem_pio2f+0x26a>
 800c8e6:	a906      	add	r1, sp, #24
 800c8e8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800c8ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8f0:	4302      	orrs	r2, r0
 800c8f2:	e7ad      	b.n	800c850 <__kernel_rem_pio2f+0x1ec>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8fa:	2a00      	cmp	r2, #0
 800c8fc:	d0fa      	beq.n	800c8f4 <__kernel_rem_pio2f+0x290>
 800c8fe:	a91a      	add	r1, sp, #104	; 0x68
 800c900:	eb0a 0208 	add.w	r2, sl, r8
 800c904:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c908:	f10a 0301 	add.w	r3, sl, #1
 800c90c:	eb0a 0100 	add.w	r1, sl, r0
 800c910:	4299      	cmp	r1, r3
 800c912:	da04      	bge.n	800c91e <__kernel_rem_pio2f+0x2ba>
 800c914:	468a      	mov	sl, r1
 800c916:	e70e      	b.n	800c736 <__kernel_rem_pio2f+0xd2>
 800c918:	9b04      	ldr	r3, [sp, #16]
 800c91a:	2001      	movs	r0, #1
 800c91c:	e7eb      	b.n	800c8f6 <__kernel_rem_pio2f+0x292>
 800c91e:	9803      	ldr	r0, [sp, #12]
 800c920:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c924:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c928:	9000      	str	r0, [sp, #0]
 800c92a:	ee07 0a90 	vmov	s15, r0
 800c92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c932:	2000      	movs	r0, #0
 800c934:	ece2 7a01 	vstmia	r2!, {s15}
 800c938:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c974 <__kernel_rem_pio2f+0x310>
 800c93c:	4696      	mov	lr, r2
 800c93e:	4548      	cmp	r0, r9
 800c940:	dd06      	ble.n	800c950 <__kernel_rem_pio2f+0x2ec>
 800c942:	a842      	add	r0, sp, #264	; 0x108
 800c944:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c948:	edc0 7a00 	vstr	s15, [r0]
 800c94c:	3301      	adds	r3, #1
 800c94e:	e7df      	b.n	800c910 <__kernel_rem_pio2f+0x2ac>
 800c950:	ecfc 6a01 	vldmia	ip!, {s13}
 800c954:	ed3e 7a01 	vldmdb	lr!, {s14}
 800c958:	3001      	adds	r0, #1
 800c95a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c95e:	e7ee      	b.n	800c93e <__kernel_rem_pio2f+0x2da>
 800c960:	3b01      	subs	r3, #1
 800c962:	e779      	b.n	800c858 <__kernel_rem_pio2f+0x1f4>
 800c964:	080127f4 	.word	0x080127f4
 800c968:	080127c8 	.word	0x080127c8
 800c96c:	43800000 	.word	0x43800000
 800c970:	3b800000 	.word	0x3b800000
 800c974:	00000000 	.word	0x00000000
 800c978:	9b02      	ldr	r3, [sp, #8]
 800c97a:	eeb0 0a48 	vmov.f32	s0, s16
 800c97e:	1b98      	subs	r0, r3, r6
 800c980:	f000 fb40 	bl	800d004 <scalbnf>
 800c984:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c96c <__kernel_rem_pio2f+0x308>
 800c988:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c990:	db1b      	blt.n	800c9ca <__kernel_rem_pio2f+0x366>
 800c992:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c970 <__kernel_rem_pio2f+0x30c>
 800c996:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c99a:	aa06      	add	r2, sp, #24
 800c99c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9a0:	a906      	add	r1, sp, #24
 800c9a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a6:	3408      	adds	r4, #8
 800c9a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c9ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c9b4:	ee10 3a10 	vmov	r3, s0
 800c9b8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c9bc:	ee17 2a90 	vmov	r2, s15
 800c9c0:	f10a 0301 	add.w	r3, sl, #1
 800c9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c9c8:	e74c      	b.n	800c864 <__kernel_rem_pio2f+0x200>
 800c9ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c9ce:	aa06      	add	r2, sp, #24
 800c9d0:	ee10 3a10 	vmov	r3, s0
 800c9d4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c9d8:	4653      	mov	r3, sl
 800c9da:	e743      	b.n	800c864 <__kernel_rem_pio2f+0x200>
 800c9dc:	aa42      	add	r2, sp, #264	; 0x108
 800c9de:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c9e2:	aa06      	add	r2, sp, #24
 800c9e4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c9e8:	9201      	str	r2, [sp, #4]
 800c9ea:	ee07 2a90 	vmov	s15, r2
 800c9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9f2:	3901      	subs	r1, #1
 800c9f4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c9f8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c9fc:	edc0 7a00 	vstr	s15, [r0]
 800ca00:	e73a      	b.n	800c878 <__kernel_rem_pio2f+0x214>
 800ca02:	ecf2 6a01 	vldmia	r2!, {s13}
 800ca06:	ecb6 7a01 	vldmia	r6!, {s14}
 800ca0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca0e:	3101      	adds	r1, #1
 800ca10:	42b9      	cmp	r1, r7
 800ca12:	dc01      	bgt.n	800ca18 <__kernel_rem_pio2f+0x3b4>
 800ca14:	428c      	cmp	r4, r1
 800ca16:	daf4      	bge.n	800ca02 <__kernel_rem_pio2f+0x39e>
 800ca18:	aa56      	add	r2, sp, #344	; 0x158
 800ca1a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800ca1e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ca22:	3801      	subs	r0, #1
 800ca24:	3401      	adds	r4, #1
 800ca26:	e72c      	b.n	800c882 <__kernel_rem_pio2f+0x21e>
 800ca28:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ca2a:	2a02      	cmp	r2, #2
 800ca2c:	dc0a      	bgt.n	800ca44 <__kernel_rem_pio2f+0x3e0>
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	dc61      	bgt.n	800caf6 <__kernel_rem_pio2f+0x492>
 800ca32:	d03c      	beq.n	800caae <__kernel_rem_pio2f+0x44a>
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	f003 0007 	and.w	r0, r3, #7
 800ca3a:	b057      	add	sp, #348	; 0x15c
 800ca3c:	ecbd 8b04 	vpop	{d8-d9}
 800ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ca46:	2a03      	cmp	r2, #3
 800ca48:	d1f4      	bne.n	800ca34 <__kernel_rem_pio2f+0x3d0>
 800ca4a:	aa2e      	add	r2, sp, #184	; 0xb8
 800ca4c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ca50:	4608      	mov	r0, r1
 800ca52:	461c      	mov	r4, r3
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	f1a0 0004 	sub.w	r0, r0, #4
 800ca5a:	dc59      	bgt.n	800cb10 <__kernel_rem_pio2f+0x4ac>
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	2801      	cmp	r0, #1
 800ca60:	f1a1 0104 	sub.w	r1, r1, #4
 800ca64:	dc64      	bgt.n	800cb30 <__kernel_rem_pio2f+0x4cc>
 800ca66:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800c974 <__kernel_rem_pio2f+0x310>
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	dc70      	bgt.n	800cb50 <__kernel_rem_pio2f+0x4ec>
 800ca6e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ca72:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ca76:	f1bb 0f00 	cmp.w	fp, #0
 800ca7a:	d172      	bne.n	800cb62 <__kernel_rem_pio2f+0x4fe>
 800ca7c:	edc5 6a00 	vstr	s13, [r5]
 800ca80:	ed85 7a01 	vstr	s14, [r5, #4]
 800ca84:	edc5 7a02 	vstr	s15, [r5, #8]
 800ca88:	e7d4      	b.n	800ca34 <__kernel_rem_pio2f+0x3d0>
 800ca8a:	aa2e      	add	r2, sp, #184	; 0xb8
 800ca8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ca90:	ed91 7a00 	vldr	s14, [r1]
 800ca94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	daf5      	bge.n	800ca8a <__kernel_rem_pio2f+0x426>
 800ca9e:	f1bb 0f00 	cmp.w	fp, #0
 800caa2:	d001      	beq.n	800caa8 <__kernel_rem_pio2f+0x444>
 800caa4:	eef1 7a67 	vneg.f32	s15, s15
 800caa8:	edc5 7a00 	vstr	s15, [r5]
 800caac:	e7c2      	b.n	800ca34 <__kernel_rem_pio2f+0x3d0>
 800caae:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c974 <__kernel_rem_pio2f+0x310>
 800cab2:	e7f2      	b.n	800ca9a <__kernel_rem_pio2f+0x436>
 800cab4:	aa2e      	add	r2, sp, #184	; 0xb8
 800cab6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800caba:	edd0 7a00 	vldr	s15, [r0]
 800cabe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cac2:	3901      	subs	r1, #1
 800cac4:	2900      	cmp	r1, #0
 800cac6:	daf5      	bge.n	800cab4 <__kernel_rem_pio2f+0x450>
 800cac8:	f1bb 0f00 	cmp.w	fp, #0
 800cacc:	d017      	beq.n	800cafe <__kernel_rem_pio2f+0x49a>
 800cace:	eef1 7a47 	vneg.f32	s15, s14
 800cad2:	edc5 7a00 	vstr	s15, [r5]
 800cad6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800cada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cade:	a82f      	add	r0, sp, #188	; 0xbc
 800cae0:	2101      	movs	r1, #1
 800cae2:	428b      	cmp	r3, r1
 800cae4:	da0e      	bge.n	800cb04 <__kernel_rem_pio2f+0x4a0>
 800cae6:	f1bb 0f00 	cmp.w	fp, #0
 800caea:	d001      	beq.n	800caf0 <__kernel_rem_pio2f+0x48c>
 800caec:	eef1 7a67 	vneg.f32	s15, s15
 800caf0:	edc5 7a01 	vstr	s15, [r5, #4]
 800caf4:	e79e      	b.n	800ca34 <__kernel_rem_pio2f+0x3d0>
 800caf6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800c974 <__kernel_rem_pio2f+0x310>
 800cafa:	4619      	mov	r1, r3
 800cafc:	e7e2      	b.n	800cac4 <__kernel_rem_pio2f+0x460>
 800cafe:	eef0 7a47 	vmov.f32	s15, s14
 800cb02:	e7e6      	b.n	800cad2 <__kernel_rem_pio2f+0x46e>
 800cb04:	ecb0 7a01 	vldmia	r0!, {s14}
 800cb08:	3101      	adds	r1, #1
 800cb0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb0e:	e7e8      	b.n	800cae2 <__kernel_rem_pio2f+0x47e>
 800cb10:	edd0 7a00 	vldr	s15, [r0]
 800cb14:	edd0 6a01 	vldr	s13, [r0, #4]
 800cb18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb1c:	3c01      	subs	r4, #1
 800cb1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb22:	ed80 7a00 	vstr	s14, [r0]
 800cb26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb2a:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb2e:	e791      	b.n	800ca54 <__kernel_rem_pio2f+0x3f0>
 800cb30:	edd1 7a00 	vldr	s15, [r1]
 800cb34:	edd1 6a01 	vldr	s13, [r1, #4]
 800cb38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb3c:	3801      	subs	r0, #1
 800cb3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb42:	ed81 7a00 	vstr	s14, [r1]
 800cb46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4a:	edc1 7a01 	vstr	s15, [r1, #4]
 800cb4e:	e786      	b.n	800ca5e <__kernel_rem_pio2f+0x3fa>
 800cb50:	aa2e      	add	r2, sp, #184	; 0xb8
 800cb52:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800cb56:	ed91 7a00 	vldr	s14, [r1]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb60:	e783      	b.n	800ca6a <__kernel_rem_pio2f+0x406>
 800cb62:	eef1 6a66 	vneg.f32	s13, s13
 800cb66:	eeb1 7a47 	vneg.f32	s14, s14
 800cb6a:	edc5 6a00 	vstr	s13, [r5]
 800cb6e:	ed85 7a01 	vstr	s14, [r5, #4]
 800cb72:	eef1 7a67 	vneg.f32	s15, s15
 800cb76:	e785      	b.n	800ca84 <__kernel_rem_pio2f+0x420>

0800cb78 <__kernel_sinf>:
 800cb78:	ee10 3a10 	vmov	r3, s0
 800cb7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cb84:	da04      	bge.n	800cb90 <__kernel_sinf+0x18>
 800cb86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cb8a:	ee17 3a90 	vmov	r3, s15
 800cb8e:	b35b      	cbz	r3, 800cbe8 <__kernel_sinf+0x70>
 800cb90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb94:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cbec <__kernel_sinf+0x74>
 800cb98:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cbf0 <__kernel_sinf+0x78>
 800cb9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cba0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800cbf4 <__kernel_sinf+0x7c>
 800cba4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cba8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cbf8 <__kernel_sinf+0x80>
 800cbac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cbb0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cbfc <__kernel_sinf+0x84>
 800cbb4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cbb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cbbc:	b930      	cbnz	r0, 800cbcc <__kernel_sinf+0x54>
 800cbbe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800cc00 <__kernel_sinf+0x88>
 800cbc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cbc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cbca:	4770      	bx	lr
 800cbcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cbd0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cbd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cbd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cbdc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cc04 <__kernel_sinf+0x8c>
 800cbe0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cbe4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2f2ec9d3 	.word	0x2f2ec9d3
 800cbf0:	b2d72f34 	.word	0xb2d72f34
 800cbf4:	3638ef1b 	.word	0x3638ef1b
 800cbf8:	b9500d01 	.word	0xb9500d01
 800cbfc:	3c088889 	.word	0x3c088889
 800cc00:	be2aaaab 	.word	0xbe2aaaab
 800cc04:	3e2aaaab 	.word	0x3e2aaaab

0800cc08 <atan>:
 800cc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	ec55 4b10 	vmov	r4, r5, d0
 800cc10:	4bc3      	ldr	r3, [pc, #780]	; (800cf20 <atan+0x318>)
 800cc12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc16:	429e      	cmp	r6, r3
 800cc18:	46ab      	mov	fp, r5
 800cc1a:	dd18      	ble.n	800cc4e <atan+0x46>
 800cc1c:	4bc1      	ldr	r3, [pc, #772]	; (800cf24 <atan+0x31c>)
 800cc1e:	429e      	cmp	r6, r3
 800cc20:	dc01      	bgt.n	800cc26 <atan+0x1e>
 800cc22:	d109      	bne.n	800cc38 <atan+0x30>
 800cc24:	b144      	cbz	r4, 800cc38 <atan+0x30>
 800cc26:	4622      	mov	r2, r4
 800cc28:	462b      	mov	r3, r5
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7f3 fb4d 	bl	80002cc <__adddf3>
 800cc32:	4604      	mov	r4, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	e006      	b.n	800cc46 <atan+0x3e>
 800cc38:	f1bb 0f00 	cmp.w	fp, #0
 800cc3c:	f300 8131 	bgt.w	800cea2 <atan+0x29a>
 800cc40:	a59b      	add	r5, pc, #620	; (adr r5, 800ceb0 <atan+0x2a8>)
 800cc42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc46:	ec45 4b10 	vmov	d0, r4, r5
 800cc4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4e:	4bb6      	ldr	r3, [pc, #728]	; (800cf28 <atan+0x320>)
 800cc50:	429e      	cmp	r6, r3
 800cc52:	dc14      	bgt.n	800cc7e <atan+0x76>
 800cc54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cc58:	429e      	cmp	r6, r3
 800cc5a:	dc0d      	bgt.n	800cc78 <atan+0x70>
 800cc5c:	a396      	add	r3, pc, #600	; (adr r3, 800ceb8 <atan+0x2b0>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	ee10 0a10 	vmov	r0, s0
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7f3 fb30 	bl	80002cc <__adddf3>
 800cc6c:	4baf      	ldr	r3, [pc, #700]	; (800cf2c <atan+0x324>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f7f3 ff72 	bl	8000b58 <__aeabi_dcmpgt>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d1e6      	bne.n	800cc46 <atan+0x3e>
 800cc78:	f04f 3aff 	mov.w	sl, #4294967295
 800cc7c:	e02b      	b.n	800ccd6 <atan+0xce>
 800cc7e:	f000 f963 	bl	800cf48 <fabs>
 800cc82:	4bab      	ldr	r3, [pc, #684]	; (800cf30 <atan+0x328>)
 800cc84:	429e      	cmp	r6, r3
 800cc86:	ec55 4b10 	vmov	r4, r5, d0
 800cc8a:	f300 80bf 	bgt.w	800ce0c <atan+0x204>
 800cc8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cc92:	429e      	cmp	r6, r3
 800cc94:	f300 80a0 	bgt.w	800cdd8 <atan+0x1d0>
 800cc98:	ee10 2a10 	vmov	r2, s0
 800cc9c:	ee10 0a10 	vmov	r0, s0
 800cca0:	462b      	mov	r3, r5
 800cca2:	4629      	mov	r1, r5
 800cca4:	f7f3 fb12 	bl	80002cc <__adddf3>
 800cca8:	4ba0      	ldr	r3, [pc, #640]	; (800cf2c <atan+0x324>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f7f3 fb0c 	bl	80002c8 <__aeabi_dsub>
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccba:	4620      	mov	r0, r4
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	f7f3 fb05 	bl	80002cc <__adddf3>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fddf 	bl	800088c <__aeabi_ddiv>
 800ccce:	f04f 0a00 	mov.w	sl, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	462b      	mov	r3, r5
 800ccda:	4620      	mov	r0, r4
 800ccdc:	4629      	mov	r1, r5
 800ccde:	f7f3 fcab 	bl	8000638 <__aeabi_dmul>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	4680      	mov	r8, r0
 800cce8:	4689      	mov	r9, r1
 800ccea:	f7f3 fca5 	bl	8000638 <__aeabi_dmul>
 800ccee:	a374      	add	r3, pc, #464	; (adr r3, 800cec0 <atan+0x2b8>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	f7f3 fc9e 	bl	8000638 <__aeabi_dmul>
 800ccfc:	a372      	add	r3, pc, #456	; (adr r3, 800cec8 <atan+0x2c0>)
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	f7f3 fae3 	bl	80002cc <__adddf3>
 800cd06:	4632      	mov	r2, r6
 800cd08:	463b      	mov	r3, r7
 800cd0a:	f7f3 fc95 	bl	8000638 <__aeabi_dmul>
 800cd0e:	a370      	add	r3, pc, #448	; (adr r3, 800ced0 <atan+0x2c8>)
 800cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd14:	f7f3 fada 	bl	80002cc <__adddf3>
 800cd18:	4632      	mov	r2, r6
 800cd1a:	463b      	mov	r3, r7
 800cd1c:	f7f3 fc8c 	bl	8000638 <__aeabi_dmul>
 800cd20:	a36d      	add	r3, pc, #436	; (adr r3, 800ced8 <atan+0x2d0>)
 800cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd26:	f7f3 fad1 	bl	80002cc <__adddf3>
 800cd2a:	4632      	mov	r2, r6
 800cd2c:	463b      	mov	r3, r7
 800cd2e:	f7f3 fc83 	bl	8000638 <__aeabi_dmul>
 800cd32:	a36b      	add	r3, pc, #428	; (adr r3, 800cee0 <atan+0x2d8>)
 800cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd38:	f7f3 fac8 	bl	80002cc <__adddf3>
 800cd3c:	4632      	mov	r2, r6
 800cd3e:	463b      	mov	r3, r7
 800cd40:	f7f3 fc7a 	bl	8000638 <__aeabi_dmul>
 800cd44:	a368      	add	r3, pc, #416	; (adr r3, 800cee8 <atan+0x2e0>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 fabf 	bl	80002cc <__adddf3>
 800cd4e:	4642      	mov	r2, r8
 800cd50:	464b      	mov	r3, r9
 800cd52:	f7f3 fc71 	bl	8000638 <__aeabi_dmul>
 800cd56:	a366      	add	r3, pc, #408	; (adr r3, 800cef0 <atan+0x2e8>)
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4689      	mov	r9, r1
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fc68 	bl	8000638 <__aeabi_dmul>
 800cd68:	a363      	add	r3, pc, #396	; (adr r3, 800cef8 <atan+0x2f0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 faab 	bl	80002c8 <__aeabi_dsub>
 800cd72:	4632      	mov	r2, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	f7f3 fc5f 	bl	8000638 <__aeabi_dmul>
 800cd7a:	a361      	add	r3, pc, #388	; (adr r3, 800cf00 <atan+0x2f8>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 faa2 	bl	80002c8 <__aeabi_dsub>
 800cd84:	4632      	mov	r2, r6
 800cd86:	463b      	mov	r3, r7
 800cd88:	f7f3 fc56 	bl	8000638 <__aeabi_dmul>
 800cd8c:	a35e      	add	r3, pc, #376	; (adr r3, 800cf08 <atan+0x300>)
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	f7f3 fa99 	bl	80002c8 <__aeabi_dsub>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	f7f3 fc4d 	bl	8000638 <__aeabi_dmul>
 800cd9e:	a35c      	add	r3, pc, #368	; (adr r3, 800cf10 <atan+0x308>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 fa90 	bl	80002c8 <__aeabi_dsub>
 800cda8:	4632      	mov	r2, r6
 800cdaa:	463b      	mov	r3, r7
 800cdac:	f7f3 fc44 	bl	8000638 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4640      	mov	r0, r8
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	f7f3 fa88 	bl	80002cc <__adddf3>
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	462b      	mov	r3, r5
 800cdc0:	f7f3 fc3a 	bl	8000638 <__aeabi_dmul>
 800cdc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	d14b      	bne.n	800ce66 <atan+0x25e>
 800cdce:	4620      	mov	r0, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	f7f3 fa79 	bl	80002c8 <__aeabi_dsub>
 800cdd6:	e72c      	b.n	800cc32 <atan+0x2a>
 800cdd8:	ee10 0a10 	vmov	r0, s0
 800cddc:	4b53      	ldr	r3, [pc, #332]	; (800cf2c <atan+0x324>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7f3 fa71 	bl	80002c8 <__aeabi_dsub>
 800cde6:	4b51      	ldr	r3, [pc, #324]	; (800cf2c <atan+0x324>)
 800cde8:	4606      	mov	r6, r0
 800cdea:	460f      	mov	r7, r1
 800cdec:	2200      	movs	r2, #0
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fa6b 	bl	80002cc <__adddf3>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	f7f3 fd45 	bl	800088c <__aeabi_ddiv>
 800ce02:	f04f 0a01 	mov.w	sl, #1
 800ce06:	4604      	mov	r4, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	e764      	b.n	800ccd6 <atan+0xce>
 800ce0c:	4b49      	ldr	r3, [pc, #292]	; (800cf34 <atan+0x32c>)
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	da1d      	bge.n	800ce4e <atan+0x246>
 800ce12:	ee10 0a10 	vmov	r0, s0
 800ce16:	4b48      	ldr	r3, [pc, #288]	; (800cf38 <atan+0x330>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	f7f3 fa54 	bl	80002c8 <__aeabi_dsub>
 800ce20:	4b45      	ldr	r3, [pc, #276]	; (800cf38 <atan+0x330>)
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	2200      	movs	r2, #0
 800ce28:	4620      	mov	r0, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f7f3 fc04 	bl	8000638 <__aeabi_dmul>
 800ce30:	4b3e      	ldr	r3, [pc, #248]	; (800cf2c <atan+0x324>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	f7f3 fa4a 	bl	80002cc <__adddf3>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	4639      	mov	r1, r7
 800ce40:	f7f3 fd24 	bl	800088c <__aeabi_ddiv>
 800ce44:	f04f 0a02 	mov.w	sl, #2
 800ce48:	4604      	mov	r4, r0
 800ce4a:	460d      	mov	r5, r1
 800ce4c:	e743      	b.n	800ccd6 <atan+0xce>
 800ce4e:	462b      	mov	r3, r5
 800ce50:	ee10 2a10 	vmov	r2, s0
 800ce54:	4939      	ldr	r1, [pc, #228]	; (800cf3c <atan+0x334>)
 800ce56:	2000      	movs	r0, #0
 800ce58:	f7f3 fd18 	bl	800088c <__aeabi_ddiv>
 800ce5c:	f04f 0a03 	mov.w	sl, #3
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	e737      	b.n	800ccd6 <atan+0xce>
 800ce66:	4b36      	ldr	r3, [pc, #216]	; (800cf40 <atan+0x338>)
 800ce68:	4e36      	ldr	r6, [pc, #216]	; (800cf44 <atan+0x33c>)
 800ce6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ce6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ce72:	e9da 2300 	ldrd	r2, r3, [sl]
 800ce76:	f7f3 fa27 	bl	80002c8 <__aeabi_dsub>
 800ce7a:	4622      	mov	r2, r4
 800ce7c:	462b      	mov	r3, r5
 800ce7e:	f7f3 fa23 	bl	80002c8 <__aeabi_dsub>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ce8a:	f7f3 fa1d 	bl	80002c8 <__aeabi_dsub>
 800ce8e:	f1bb 0f00 	cmp.w	fp, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	460d      	mov	r5, r1
 800ce96:	f6bf aed6 	bge.w	800cc46 <atan+0x3e>
 800ce9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce9e:	461d      	mov	r5, r3
 800cea0:	e6d1      	b.n	800cc46 <atan+0x3e>
 800cea2:	a51d      	add	r5, pc, #116	; (adr r5, 800cf18 <atan+0x310>)
 800cea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cea8:	e6cd      	b.n	800cc46 <atan+0x3e>
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
 800ceb0:	54442d18 	.word	0x54442d18
 800ceb4:	bff921fb 	.word	0xbff921fb
 800ceb8:	8800759c 	.word	0x8800759c
 800cebc:	7e37e43c 	.word	0x7e37e43c
 800cec0:	e322da11 	.word	0xe322da11
 800cec4:	3f90ad3a 	.word	0x3f90ad3a
 800cec8:	24760deb 	.word	0x24760deb
 800cecc:	3fa97b4b 	.word	0x3fa97b4b
 800ced0:	a0d03d51 	.word	0xa0d03d51
 800ced4:	3fb10d66 	.word	0x3fb10d66
 800ced8:	c54c206e 	.word	0xc54c206e
 800cedc:	3fb745cd 	.word	0x3fb745cd
 800cee0:	920083ff 	.word	0x920083ff
 800cee4:	3fc24924 	.word	0x3fc24924
 800cee8:	5555550d 	.word	0x5555550d
 800ceec:	3fd55555 	.word	0x3fd55555
 800cef0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cef4:	bfa2b444 	.word	0xbfa2b444
 800cef8:	52defd9a 	.word	0x52defd9a
 800cefc:	3fadde2d 	.word	0x3fadde2d
 800cf00:	af749a6d 	.word	0xaf749a6d
 800cf04:	3fb3b0f2 	.word	0x3fb3b0f2
 800cf08:	fe231671 	.word	0xfe231671
 800cf0c:	3fbc71c6 	.word	0x3fbc71c6
 800cf10:	9998ebc4 	.word	0x9998ebc4
 800cf14:	3fc99999 	.word	0x3fc99999
 800cf18:	54442d18 	.word	0x54442d18
 800cf1c:	3ff921fb 	.word	0x3ff921fb
 800cf20:	440fffff 	.word	0x440fffff
 800cf24:	7ff00000 	.word	0x7ff00000
 800cf28:	3fdbffff 	.word	0x3fdbffff
 800cf2c:	3ff00000 	.word	0x3ff00000
 800cf30:	3ff2ffff 	.word	0x3ff2ffff
 800cf34:	40038000 	.word	0x40038000
 800cf38:	3ff80000 	.word	0x3ff80000
 800cf3c:	bff00000 	.word	0xbff00000
 800cf40:	08012820 	.word	0x08012820
 800cf44:	08012800 	.word	0x08012800

0800cf48 <fabs>:
 800cf48:	ec51 0b10 	vmov	r0, r1, d0
 800cf4c:	ee10 2a10 	vmov	r2, s0
 800cf50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf54:	ec43 2b10 	vmov	d0, r2, r3
 800cf58:	4770      	bx	lr
 800cf5a:	0000      	movs	r0, r0
 800cf5c:	0000      	movs	r0, r0
	...

0800cf60 <nan>:
 800cf60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf68 <nan+0x8>
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	00000000 	.word	0x00000000
 800cf6c:	7ff80000 	.word	0x7ff80000

0800cf70 <fabsf>:
 800cf70:	ee10 3a10 	vmov	r3, s0
 800cf74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf78:	ee00 3a10 	vmov	s0, r3
 800cf7c:	4770      	bx	lr
	...

0800cf80 <floorf>:
 800cf80:	ee10 3a10 	vmov	r3, s0
 800cf84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cf88:	3a7f      	subs	r2, #127	; 0x7f
 800cf8a:	2a16      	cmp	r2, #22
 800cf8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf90:	dc2a      	bgt.n	800cfe8 <floorf+0x68>
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	da11      	bge.n	800cfba <floorf+0x3a>
 800cf96:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cff8 <floorf+0x78>
 800cf9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	dd05      	ble.n	800cfb4 <floorf+0x34>
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	da23      	bge.n	800cff4 <floorf+0x74>
 800cfac:	4a13      	ldr	r2, [pc, #76]	; (800cffc <floorf+0x7c>)
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	bf18      	it	ne
 800cfb2:	4613      	movne	r3, r2
 800cfb4:	ee00 3a10 	vmov	s0, r3
 800cfb8:	4770      	bx	lr
 800cfba:	4911      	ldr	r1, [pc, #68]	; (800d000 <floorf+0x80>)
 800cfbc:	4111      	asrs	r1, r2
 800cfbe:	420b      	tst	r3, r1
 800cfc0:	d0fa      	beq.n	800cfb8 <floorf+0x38>
 800cfc2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cff8 <floorf+0x78>
 800cfc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cfca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd2:	ddef      	ble.n	800cfb4 <floorf+0x34>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	bfbe      	ittt	lt
 800cfd8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cfdc:	fa40 f202 	asrlt.w	r2, r0, r2
 800cfe0:	189b      	addlt	r3, r3, r2
 800cfe2:	ea23 0301 	bic.w	r3, r3, r1
 800cfe6:	e7e5      	b.n	800cfb4 <floorf+0x34>
 800cfe8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cfec:	d3e4      	bcc.n	800cfb8 <floorf+0x38>
 800cfee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cff2:	4770      	bx	lr
 800cff4:	2300      	movs	r3, #0
 800cff6:	e7dd      	b.n	800cfb4 <floorf+0x34>
 800cff8:	7149f2ca 	.word	0x7149f2ca
 800cffc:	bf800000 	.word	0xbf800000
 800d000:	007fffff 	.word	0x007fffff

0800d004 <scalbnf>:
 800d004:	ee10 3a10 	vmov	r3, s0
 800d008:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d00c:	d025      	beq.n	800d05a <scalbnf+0x56>
 800d00e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d012:	d302      	bcc.n	800d01a <scalbnf+0x16>
 800d014:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d018:	4770      	bx	lr
 800d01a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d01e:	d122      	bne.n	800d066 <scalbnf+0x62>
 800d020:	4b2a      	ldr	r3, [pc, #168]	; (800d0cc <scalbnf+0xc8>)
 800d022:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d0d0 <scalbnf+0xcc>
 800d026:	4298      	cmp	r0, r3
 800d028:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d02c:	db16      	blt.n	800d05c <scalbnf+0x58>
 800d02e:	ee10 3a10 	vmov	r3, s0
 800d032:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d036:	3a19      	subs	r2, #25
 800d038:	4402      	add	r2, r0
 800d03a:	2afe      	cmp	r2, #254	; 0xfe
 800d03c:	dd15      	ble.n	800d06a <scalbnf+0x66>
 800d03e:	ee10 3a10 	vmov	r3, s0
 800d042:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d0d4 <scalbnf+0xd0>
 800d046:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d0d8 <scalbnf+0xd4>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	eeb0 7a67 	vmov.f32	s14, s15
 800d050:	bfb8      	it	lt
 800d052:	eef0 7a66 	vmovlt.f32	s15, s13
 800d056:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d05a:	4770      	bx	lr
 800d05c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d0dc <scalbnf+0xd8>
 800d060:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d064:	4770      	bx	lr
 800d066:	0dd2      	lsrs	r2, r2, #23
 800d068:	e7e6      	b.n	800d038 <scalbnf+0x34>
 800d06a:	2a00      	cmp	r2, #0
 800d06c:	dd06      	ble.n	800d07c <scalbnf+0x78>
 800d06e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d072:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d076:	ee00 3a10 	vmov	s0, r3
 800d07a:	4770      	bx	lr
 800d07c:	f112 0f16 	cmn.w	r2, #22
 800d080:	da1a      	bge.n	800d0b8 <scalbnf+0xb4>
 800d082:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d086:	4298      	cmp	r0, r3
 800d088:	ee10 3a10 	vmov	r3, s0
 800d08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d090:	dd0a      	ble.n	800d0a8 <scalbnf+0xa4>
 800d092:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d0d4 <scalbnf+0xd0>
 800d096:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d0d8 <scalbnf+0xd4>
 800d09a:	eef0 7a40 	vmov.f32	s15, s0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf18      	it	ne
 800d0a2:	eeb0 0a47 	vmovne.f32	s0, s14
 800d0a6:	e7db      	b.n	800d060 <scalbnf+0x5c>
 800d0a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d0dc <scalbnf+0xd8>
 800d0ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d0e0 <scalbnf+0xdc>
 800d0b0:	eef0 7a40 	vmov.f32	s15, s0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	e7f3      	b.n	800d0a0 <scalbnf+0x9c>
 800d0b8:	3219      	adds	r2, #25
 800d0ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d0c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d0e4 <scalbnf+0xe0>
 800d0c6:	ee07 3a10 	vmov	s14, r3
 800d0ca:	e7c4      	b.n	800d056 <scalbnf+0x52>
 800d0cc:	ffff3cb0 	.word	0xffff3cb0
 800d0d0:	4c000000 	.word	0x4c000000
 800d0d4:	7149f2ca 	.word	0x7149f2ca
 800d0d8:	f149f2ca 	.word	0xf149f2ca
 800d0dc:	0da24260 	.word	0x0da24260
 800d0e0:	8da24260 	.word	0x8da24260
 800d0e4:	33000000 	.word	0x33000000

0800d0e8 <abort>:
 800d0e8:	b508      	push	{r3, lr}
 800d0ea:	2006      	movs	r0, #6
 800d0ec:	f000 ffd0 	bl	800e090 <raise>
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	f7f8 fb65 	bl	80057c0 <_exit>
	...

0800d0f8 <__errno>:
 800d0f8:	4b01      	ldr	r3, [pc, #4]	; (800d100 <__errno+0x8>)
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	2000000c 	.word	0x2000000c

0800d104 <__libc_init_array>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	4d0d      	ldr	r5, [pc, #52]	; (800d13c <__libc_init_array+0x38>)
 800d108:	4c0d      	ldr	r4, [pc, #52]	; (800d140 <__libc_init_array+0x3c>)
 800d10a:	1b64      	subs	r4, r4, r5
 800d10c:	10a4      	asrs	r4, r4, #2
 800d10e:	2600      	movs	r6, #0
 800d110:	42a6      	cmp	r6, r4
 800d112:	d109      	bne.n	800d128 <__libc_init_array+0x24>
 800d114:	4d0b      	ldr	r5, [pc, #44]	; (800d144 <__libc_init_array+0x40>)
 800d116:	4c0c      	ldr	r4, [pc, #48]	; (800d148 <__libc_init_array+0x44>)
 800d118:	f005 f87a 	bl	8012210 <_init>
 800d11c:	1b64      	subs	r4, r4, r5
 800d11e:	10a4      	asrs	r4, r4, #2
 800d120:	2600      	movs	r6, #0
 800d122:	42a6      	cmp	r6, r4
 800d124:	d105      	bne.n	800d132 <__libc_init_array+0x2e>
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	f855 3b04 	ldr.w	r3, [r5], #4
 800d12c:	4798      	blx	r3
 800d12e:	3601      	adds	r6, #1
 800d130:	e7ee      	b.n	800d110 <__libc_init_array+0xc>
 800d132:	f855 3b04 	ldr.w	r3, [r5], #4
 800d136:	4798      	blx	r3
 800d138:	3601      	adds	r6, #1
 800d13a:	e7f2      	b.n	800d122 <__libc_init_array+0x1e>
 800d13c:	08012d14 	.word	0x08012d14
 800d140:	08012d14 	.word	0x08012d14
 800d144:	08012d14 	.word	0x08012d14
 800d148:	08012d1c 	.word	0x08012d1c

0800d14c <malloc>:
 800d14c:	4b02      	ldr	r3, [pc, #8]	; (800d158 <malloc+0xc>)
 800d14e:	4601      	mov	r1, r0
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	f000 b88b 	b.w	800d26c <_malloc_r>
 800d156:	bf00      	nop
 800d158:	2000000c 	.word	0x2000000c

0800d15c <free>:
 800d15c:	4b02      	ldr	r3, [pc, #8]	; (800d168 <free+0xc>)
 800d15e:	4601      	mov	r1, r0
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f000 b833 	b.w	800d1cc <_free_r>
 800d166:	bf00      	nop
 800d168:	2000000c 	.word	0x2000000c

0800d16c <memcpy>:
 800d16c:	440a      	add	r2, r1
 800d16e:	4291      	cmp	r1, r2
 800d170:	f100 33ff 	add.w	r3, r0, #4294967295
 800d174:	d100      	bne.n	800d178 <memcpy+0xc>
 800d176:	4770      	bx	lr
 800d178:	b510      	push	{r4, lr}
 800d17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d182:	4291      	cmp	r1, r2
 800d184:	d1f9      	bne.n	800d17a <memcpy+0xe>
 800d186:	bd10      	pop	{r4, pc}

0800d188 <memmove>:
 800d188:	4288      	cmp	r0, r1
 800d18a:	b510      	push	{r4, lr}
 800d18c:	eb01 0402 	add.w	r4, r1, r2
 800d190:	d902      	bls.n	800d198 <memmove+0x10>
 800d192:	4284      	cmp	r4, r0
 800d194:	4623      	mov	r3, r4
 800d196:	d807      	bhi.n	800d1a8 <memmove+0x20>
 800d198:	1e43      	subs	r3, r0, #1
 800d19a:	42a1      	cmp	r1, r4
 800d19c:	d008      	beq.n	800d1b0 <memmove+0x28>
 800d19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1a6:	e7f8      	b.n	800d19a <memmove+0x12>
 800d1a8:	4402      	add	r2, r0
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	428a      	cmp	r2, r1
 800d1ae:	d100      	bne.n	800d1b2 <memmove+0x2a>
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ba:	e7f7      	b.n	800d1ac <memmove+0x24>

0800d1bc <memset>:
 800d1bc:	4402      	add	r2, r0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d100      	bne.n	800d1c6 <memset+0xa>
 800d1c4:	4770      	bx	lr
 800d1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ca:	e7f9      	b.n	800d1c0 <memset+0x4>

0800d1cc <_free_r>:
 800d1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ce:	2900      	cmp	r1, #0
 800d1d0:	d048      	beq.n	800d264 <_free_r+0x98>
 800d1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d6:	9001      	str	r0, [sp, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f1a1 0404 	sub.w	r4, r1, #4
 800d1de:	bfb8      	it	lt
 800d1e0:	18e4      	addlt	r4, r4, r3
 800d1e2:	f003 f8e9 	bl	80103b8 <__malloc_lock>
 800d1e6:	4a20      	ldr	r2, [pc, #128]	; (800d268 <_free_r+0x9c>)
 800d1e8:	9801      	ldr	r0, [sp, #4]
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	4615      	mov	r5, r2
 800d1ee:	b933      	cbnz	r3, 800d1fe <_free_r+0x32>
 800d1f0:	6063      	str	r3, [r4, #4]
 800d1f2:	6014      	str	r4, [r2, #0]
 800d1f4:	b003      	add	sp, #12
 800d1f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1fa:	f003 b8e3 	b.w	80103c4 <__malloc_unlock>
 800d1fe:	42a3      	cmp	r3, r4
 800d200:	d90b      	bls.n	800d21a <_free_r+0x4e>
 800d202:	6821      	ldr	r1, [r4, #0]
 800d204:	1862      	adds	r2, r4, r1
 800d206:	4293      	cmp	r3, r2
 800d208:	bf04      	itt	eq
 800d20a:	681a      	ldreq	r2, [r3, #0]
 800d20c:	685b      	ldreq	r3, [r3, #4]
 800d20e:	6063      	str	r3, [r4, #4]
 800d210:	bf04      	itt	eq
 800d212:	1852      	addeq	r2, r2, r1
 800d214:	6022      	streq	r2, [r4, #0]
 800d216:	602c      	str	r4, [r5, #0]
 800d218:	e7ec      	b.n	800d1f4 <_free_r+0x28>
 800d21a:	461a      	mov	r2, r3
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	b10b      	cbz	r3, 800d224 <_free_r+0x58>
 800d220:	42a3      	cmp	r3, r4
 800d222:	d9fa      	bls.n	800d21a <_free_r+0x4e>
 800d224:	6811      	ldr	r1, [r2, #0]
 800d226:	1855      	adds	r5, r2, r1
 800d228:	42a5      	cmp	r5, r4
 800d22a:	d10b      	bne.n	800d244 <_free_r+0x78>
 800d22c:	6824      	ldr	r4, [r4, #0]
 800d22e:	4421      	add	r1, r4
 800d230:	1854      	adds	r4, r2, r1
 800d232:	42a3      	cmp	r3, r4
 800d234:	6011      	str	r1, [r2, #0]
 800d236:	d1dd      	bne.n	800d1f4 <_free_r+0x28>
 800d238:	681c      	ldr	r4, [r3, #0]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	6053      	str	r3, [r2, #4]
 800d23e:	4421      	add	r1, r4
 800d240:	6011      	str	r1, [r2, #0]
 800d242:	e7d7      	b.n	800d1f4 <_free_r+0x28>
 800d244:	d902      	bls.n	800d24c <_free_r+0x80>
 800d246:	230c      	movs	r3, #12
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	e7d3      	b.n	800d1f4 <_free_r+0x28>
 800d24c:	6825      	ldr	r5, [r4, #0]
 800d24e:	1961      	adds	r1, r4, r5
 800d250:	428b      	cmp	r3, r1
 800d252:	bf04      	itt	eq
 800d254:	6819      	ldreq	r1, [r3, #0]
 800d256:	685b      	ldreq	r3, [r3, #4]
 800d258:	6063      	str	r3, [r4, #4]
 800d25a:	bf04      	itt	eq
 800d25c:	1949      	addeq	r1, r1, r5
 800d25e:	6021      	streq	r1, [r4, #0]
 800d260:	6054      	str	r4, [r2, #4]
 800d262:	e7c7      	b.n	800d1f4 <_free_r+0x28>
 800d264:	b003      	add	sp, #12
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	2000025c 	.word	0x2000025c

0800d26c <_malloc_r>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	1ccd      	adds	r5, r1, #3
 800d270:	f025 0503 	bic.w	r5, r5, #3
 800d274:	3508      	adds	r5, #8
 800d276:	2d0c      	cmp	r5, #12
 800d278:	bf38      	it	cc
 800d27a:	250c      	movcc	r5, #12
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	4606      	mov	r6, r0
 800d280:	db01      	blt.n	800d286 <_malloc_r+0x1a>
 800d282:	42a9      	cmp	r1, r5
 800d284:	d903      	bls.n	800d28e <_malloc_r+0x22>
 800d286:	230c      	movs	r3, #12
 800d288:	6033      	str	r3, [r6, #0]
 800d28a:	2000      	movs	r0, #0
 800d28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d28e:	f003 f893 	bl	80103b8 <__malloc_lock>
 800d292:	4921      	ldr	r1, [pc, #132]	; (800d318 <_malloc_r+0xac>)
 800d294:	680a      	ldr	r2, [r1, #0]
 800d296:	4614      	mov	r4, r2
 800d298:	b99c      	cbnz	r4, 800d2c2 <_malloc_r+0x56>
 800d29a:	4f20      	ldr	r7, [pc, #128]	; (800d31c <_malloc_r+0xb0>)
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	b923      	cbnz	r3, 800d2aa <_malloc_r+0x3e>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f000 feb6 	bl	800e014 <_sbrk_r>
 800d2a8:	6038      	str	r0, [r7, #0]
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f000 feb1 	bl	800e014 <_sbrk_r>
 800d2b2:	1c43      	adds	r3, r0, #1
 800d2b4:	d123      	bne.n	800d2fe <_malloc_r+0x92>
 800d2b6:	230c      	movs	r3, #12
 800d2b8:	6033      	str	r3, [r6, #0]
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f003 f882 	bl	80103c4 <__malloc_unlock>
 800d2c0:	e7e3      	b.n	800d28a <_malloc_r+0x1e>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	1b5b      	subs	r3, r3, r5
 800d2c6:	d417      	bmi.n	800d2f8 <_malloc_r+0x8c>
 800d2c8:	2b0b      	cmp	r3, #11
 800d2ca:	d903      	bls.n	800d2d4 <_malloc_r+0x68>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	441c      	add	r4, r3
 800d2d0:	6025      	str	r5, [r4, #0]
 800d2d2:	e004      	b.n	800d2de <_malloc_r+0x72>
 800d2d4:	6863      	ldr	r3, [r4, #4]
 800d2d6:	42a2      	cmp	r2, r4
 800d2d8:	bf0c      	ite	eq
 800d2da:	600b      	streq	r3, [r1, #0]
 800d2dc:	6053      	strne	r3, [r2, #4]
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f003 f870 	bl	80103c4 <__malloc_unlock>
 800d2e4:	f104 000b 	add.w	r0, r4, #11
 800d2e8:	1d23      	adds	r3, r4, #4
 800d2ea:	f020 0007 	bic.w	r0, r0, #7
 800d2ee:	1ac2      	subs	r2, r0, r3
 800d2f0:	d0cc      	beq.n	800d28c <_malloc_r+0x20>
 800d2f2:	1a1b      	subs	r3, r3, r0
 800d2f4:	50a3      	str	r3, [r4, r2]
 800d2f6:	e7c9      	b.n	800d28c <_malloc_r+0x20>
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	6864      	ldr	r4, [r4, #4]
 800d2fc:	e7cc      	b.n	800d298 <_malloc_r+0x2c>
 800d2fe:	1cc4      	adds	r4, r0, #3
 800d300:	f024 0403 	bic.w	r4, r4, #3
 800d304:	42a0      	cmp	r0, r4
 800d306:	d0e3      	beq.n	800d2d0 <_malloc_r+0x64>
 800d308:	1a21      	subs	r1, r4, r0
 800d30a:	4630      	mov	r0, r6
 800d30c:	f000 fe82 	bl	800e014 <_sbrk_r>
 800d310:	3001      	adds	r0, #1
 800d312:	d1dd      	bne.n	800d2d0 <_malloc_r+0x64>
 800d314:	e7cf      	b.n	800d2b6 <_malloc_r+0x4a>
 800d316:	bf00      	nop
 800d318:	2000025c 	.word	0x2000025c
 800d31c:	20000260 	.word	0x20000260

0800d320 <__cvt>:
 800d320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d324:	ec55 4b10 	vmov	r4, r5, d0
 800d328:	2d00      	cmp	r5, #0
 800d32a:	460e      	mov	r6, r1
 800d32c:	4619      	mov	r1, r3
 800d32e:	462b      	mov	r3, r5
 800d330:	bfbb      	ittet	lt
 800d332:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d336:	461d      	movlt	r5, r3
 800d338:	2300      	movge	r3, #0
 800d33a:	232d      	movlt	r3, #45	; 0x2d
 800d33c:	700b      	strb	r3, [r1, #0]
 800d33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d340:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d344:	4691      	mov	r9, r2
 800d346:	f023 0820 	bic.w	r8, r3, #32
 800d34a:	bfbc      	itt	lt
 800d34c:	4622      	movlt	r2, r4
 800d34e:	4614      	movlt	r4, r2
 800d350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d354:	d005      	beq.n	800d362 <__cvt+0x42>
 800d356:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d35a:	d100      	bne.n	800d35e <__cvt+0x3e>
 800d35c:	3601      	adds	r6, #1
 800d35e:	2102      	movs	r1, #2
 800d360:	e000      	b.n	800d364 <__cvt+0x44>
 800d362:	2103      	movs	r1, #3
 800d364:	ab03      	add	r3, sp, #12
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	ab02      	add	r3, sp, #8
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	ec45 4b10 	vmov	d0, r4, r5
 800d370:	4653      	mov	r3, sl
 800d372:	4632      	mov	r2, r6
 800d374:	f001 fe9c 	bl	800f0b0 <_dtoa_r>
 800d378:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d37c:	4607      	mov	r7, r0
 800d37e:	d102      	bne.n	800d386 <__cvt+0x66>
 800d380:	f019 0f01 	tst.w	r9, #1
 800d384:	d022      	beq.n	800d3cc <__cvt+0xac>
 800d386:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d38a:	eb07 0906 	add.w	r9, r7, r6
 800d38e:	d110      	bne.n	800d3b2 <__cvt+0x92>
 800d390:	783b      	ldrb	r3, [r7, #0]
 800d392:	2b30      	cmp	r3, #48	; 0x30
 800d394:	d10a      	bne.n	800d3ac <__cvt+0x8c>
 800d396:	2200      	movs	r2, #0
 800d398:	2300      	movs	r3, #0
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f3 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 800d3a2:	b918      	cbnz	r0, 800d3ac <__cvt+0x8c>
 800d3a4:	f1c6 0601 	rsb	r6, r6, #1
 800d3a8:	f8ca 6000 	str.w	r6, [sl]
 800d3ac:	f8da 3000 	ldr.w	r3, [sl]
 800d3b0:	4499      	add	r9, r3
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	f7f3 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 800d3be:	b108      	cbz	r0, 800d3c4 <__cvt+0xa4>
 800d3c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d3c4:	2230      	movs	r2, #48	; 0x30
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	454b      	cmp	r3, r9
 800d3ca:	d307      	bcc.n	800d3dc <__cvt+0xbc>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3d0:	1bdb      	subs	r3, r3, r7
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	b004      	add	sp, #16
 800d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3dc:	1c59      	adds	r1, r3, #1
 800d3de:	9103      	str	r1, [sp, #12]
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	e7f0      	b.n	800d3c6 <__cvt+0xa6>

0800d3e4 <__exponent>:
 800d3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	bfb8      	it	lt
 800d3ec:	4249      	neglt	r1, r1
 800d3ee:	f803 2b02 	strb.w	r2, [r3], #2
 800d3f2:	bfb4      	ite	lt
 800d3f4:	222d      	movlt	r2, #45	; 0x2d
 800d3f6:	222b      	movge	r2, #43	; 0x2b
 800d3f8:	2909      	cmp	r1, #9
 800d3fa:	7042      	strb	r2, [r0, #1]
 800d3fc:	dd2a      	ble.n	800d454 <__exponent+0x70>
 800d3fe:	f10d 0407 	add.w	r4, sp, #7
 800d402:	46a4      	mov	ip, r4
 800d404:	270a      	movs	r7, #10
 800d406:	46a6      	mov	lr, r4
 800d408:	460a      	mov	r2, r1
 800d40a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d40e:	fb07 1516 	mls	r5, r7, r6, r1
 800d412:	3530      	adds	r5, #48	; 0x30
 800d414:	2a63      	cmp	r2, #99	; 0x63
 800d416:	f104 34ff 	add.w	r4, r4, #4294967295
 800d41a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d41e:	4631      	mov	r1, r6
 800d420:	dcf1      	bgt.n	800d406 <__exponent+0x22>
 800d422:	3130      	adds	r1, #48	; 0x30
 800d424:	f1ae 0502 	sub.w	r5, lr, #2
 800d428:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d42c:	1c44      	adds	r4, r0, #1
 800d42e:	4629      	mov	r1, r5
 800d430:	4561      	cmp	r1, ip
 800d432:	d30a      	bcc.n	800d44a <__exponent+0x66>
 800d434:	f10d 0209 	add.w	r2, sp, #9
 800d438:	eba2 020e 	sub.w	r2, r2, lr
 800d43c:	4565      	cmp	r5, ip
 800d43e:	bf88      	it	hi
 800d440:	2200      	movhi	r2, #0
 800d442:	4413      	add	r3, r2
 800d444:	1a18      	subs	r0, r3, r0
 800d446:	b003      	add	sp, #12
 800d448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d44e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d452:	e7ed      	b.n	800d430 <__exponent+0x4c>
 800d454:	2330      	movs	r3, #48	; 0x30
 800d456:	3130      	adds	r1, #48	; 0x30
 800d458:	7083      	strb	r3, [r0, #2]
 800d45a:	70c1      	strb	r1, [r0, #3]
 800d45c:	1d03      	adds	r3, r0, #4
 800d45e:	e7f1      	b.n	800d444 <__exponent+0x60>

0800d460 <_printf_float>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	ed2d 8b02 	vpush	{d8}
 800d468:	b08d      	sub	sp, #52	; 0x34
 800d46a:	460c      	mov	r4, r1
 800d46c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d470:	4616      	mov	r6, r2
 800d472:	461f      	mov	r7, r3
 800d474:	4605      	mov	r5, r0
 800d476:	f002 ff77 	bl	8010368 <_localeconv_r>
 800d47a:	f8d0 a000 	ldr.w	sl, [r0]
 800d47e:	4650      	mov	r0, sl
 800d480:	f7f2 ff16 	bl	80002b0 <strlen>
 800d484:	2300      	movs	r3, #0
 800d486:	930a      	str	r3, [sp, #40]	; 0x28
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	9305      	str	r3, [sp, #20]
 800d48c:	f8d8 3000 	ldr.w	r3, [r8]
 800d490:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d494:	3307      	adds	r3, #7
 800d496:	f023 0307 	bic.w	r3, r3, #7
 800d49a:	f103 0208 	add.w	r2, r3, #8
 800d49e:	f8c8 2000 	str.w	r2, [r8]
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d4aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d4ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d4b8:	ee08 0a10 	vmov	s16, r0
 800d4bc:	4b9f      	ldr	r3, [pc, #636]	; (800d73c <_printf_float+0x2dc>)
 800d4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c6:	f7f3 fb51 	bl	8000b6c <__aeabi_dcmpun>
 800d4ca:	bb88      	cbnz	r0, 800d530 <_printf_float+0xd0>
 800d4cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4d0:	4b9a      	ldr	r3, [pc, #616]	; (800d73c <_printf_float+0x2dc>)
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	f7f3 fb2b 	bl	8000b30 <__aeabi_dcmple>
 800d4da:	bb48      	cbnz	r0, 800d530 <_printf_float+0xd0>
 800d4dc:	2200      	movs	r2, #0
 800d4de:	2300      	movs	r3, #0
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	f7f3 fb1a 	bl	8000b1c <__aeabi_dcmplt>
 800d4e8:	b110      	cbz	r0, 800d4f0 <_printf_float+0x90>
 800d4ea:	232d      	movs	r3, #45	; 0x2d
 800d4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4f0:	4b93      	ldr	r3, [pc, #588]	; (800d740 <_printf_float+0x2e0>)
 800d4f2:	4894      	ldr	r0, [pc, #592]	; (800d744 <_printf_float+0x2e4>)
 800d4f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d4f8:	bf94      	ite	ls
 800d4fa:	4698      	movls	r8, r3
 800d4fc:	4680      	movhi	r8, r0
 800d4fe:	2303      	movs	r3, #3
 800d500:	6123      	str	r3, [r4, #16]
 800d502:	9b05      	ldr	r3, [sp, #20]
 800d504:	f023 0204 	bic.w	r2, r3, #4
 800d508:	6022      	str	r2, [r4, #0]
 800d50a:	f04f 0900 	mov.w	r9, #0
 800d50e:	9700      	str	r7, [sp, #0]
 800d510:	4633      	mov	r3, r6
 800d512:	aa0b      	add	r2, sp, #44	; 0x2c
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f000 f9d8 	bl	800d8cc <_printf_common>
 800d51c:	3001      	adds	r0, #1
 800d51e:	f040 8090 	bne.w	800d642 <_printf_float+0x1e2>
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	b00d      	add	sp, #52	; 0x34
 800d528:	ecbd 8b02 	vpop	{d8}
 800d52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d530:	4642      	mov	r2, r8
 800d532:	464b      	mov	r3, r9
 800d534:	4640      	mov	r0, r8
 800d536:	4649      	mov	r1, r9
 800d538:	f7f3 fb18 	bl	8000b6c <__aeabi_dcmpun>
 800d53c:	b140      	cbz	r0, 800d550 <_printf_float+0xf0>
 800d53e:	464b      	mov	r3, r9
 800d540:	2b00      	cmp	r3, #0
 800d542:	bfbc      	itt	lt
 800d544:	232d      	movlt	r3, #45	; 0x2d
 800d546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d54a:	487f      	ldr	r0, [pc, #508]	; (800d748 <_printf_float+0x2e8>)
 800d54c:	4b7f      	ldr	r3, [pc, #508]	; (800d74c <_printf_float+0x2ec>)
 800d54e:	e7d1      	b.n	800d4f4 <_printf_float+0x94>
 800d550:	6863      	ldr	r3, [r4, #4]
 800d552:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d556:	9206      	str	r2, [sp, #24]
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	d13f      	bne.n	800d5dc <_printf_float+0x17c>
 800d55c:	2306      	movs	r3, #6
 800d55e:	6063      	str	r3, [r4, #4]
 800d560:	9b05      	ldr	r3, [sp, #20]
 800d562:	6861      	ldr	r1, [r4, #4]
 800d564:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d568:	2300      	movs	r3, #0
 800d56a:	9303      	str	r3, [sp, #12]
 800d56c:	ab0a      	add	r3, sp, #40	; 0x28
 800d56e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d572:	ab09      	add	r3, sp, #36	; 0x24
 800d574:	ec49 8b10 	vmov	d0, r8, r9
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	6022      	str	r2, [r4, #0]
 800d57c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d580:	4628      	mov	r0, r5
 800d582:	f7ff fecd 	bl	800d320 <__cvt>
 800d586:	9b06      	ldr	r3, [sp, #24]
 800d588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d58a:	2b47      	cmp	r3, #71	; 0x47
 800d58c:	4680      	mov	r8, r0
 800d58e:	d108      	bne.n	800d5a2 <_printf_float+0x142>
 800d590:	1cc8      	adds	r0, r1, #3
 800d592:	db02      	blt.n	800d59a <_printf_float+0x13a>
 800d594:	6863      	ldr	r3, [r4, #4]
 800d596:	4299      	cmp	r1, r3
 800d598:	dd41      	ble.n	800d61e <_printf_float+0x1be>
 800d59a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d59e:	fa5f fb8b 	uxtb.w	fp, fp
 800d5a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d5a6:	d820      	bhi.n	800d5ea <_printf_float+0x18a>
 800d5a8:	3901      	subs	r1, #1
 800d5aa:	465a      	mov	r2, fp
 800d5ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d5b0:	9109      	str	r1, [sp, #36]	; 0x24
 800d5b2:	f7ff ff17 	bl	800d3e4 <__exponent>
 800d5b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5b8:	1813      	adds	r3, r2, r0
 800d5ba:	2a01      	cmp	r2, #1
 800d5bc:	4681      	mov	r9, r0
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	dc02      	bgt.n	800d5c8 <_printf_float+0x168>
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	07d2      	lsls	r2, r2, #31
 800d5c6:	d501      	bpl.n	800d5cc <_printf_float+0x16c>
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d09c      	beq.n	800d50e <_printf_float+0xae>
 800d5d4:	232d      	movs	r3, #45	; 0x2d
 800d5d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5da:	e798      	b.n	800d50e <_printf_float+0xae>
 800d5dc:	9a06      	ldr	r2, [sp, #24]
 800d5de:	2a47      	cmp	r2, #71	; 0x47
 800d5e0:	d1be      	bne.n	800d560 <_printf_float+0x100>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1bc      	bne.n	800d560 <_printf_float+0x100>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e7b9      	b.n	800d55e <_printf_float+0xfe>
 800d5ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d5ee:	d118      	bne.n	800d622 <_printf_float+0x1c2>
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	6863      	ldr	r3, [r4, #4]
 800d5f4:	dd0b      	ble.n	800d60e <_printf_float+0x1ae>
 800d5f6:	6121      	str	r1, [r4, #16]
 800d5f8:	b913      	cbnz	r3, 800d600 <_printf_float+0x1a0>
 800d5fa:	6822      	ldr	r2, [r4, #0]
 800d5fc:	07d0      	lsls	r0, r2, #31
 800d5fe:	d502      	bpl.n	800d606 <_printf_float+0x1a6>
 800d600:	3301      	adds	r3, #1
 800d602:	440b      	add	r3, r1
 800d604:	6123      	str	r3, [r4, #16]
 800d606:	65a1      	str	r1, [r4, #88]	; 0x58
 800d608:	f04f 0900 	mov.w	r9, #0
 800d60c:	e7de      	b.n	800d5cc <_printf_float+0x16c>
 800d60e:	b913      	cbnz	r3, 800d616 <_printf_float+0x1b6>
 800d610:	6822      	ldr	r2, [r4, #0]
 800d612:	07d2      	lsls	r2, r2, #31
 800d614:	d501      	bpl.n	800d61a <_printf_float+0x1ba>
 800d616:	3302      	adds	r3, #2
 800d618:	e7f4      	b.n	800d604 <_printf_float+0x1a4>
 800d61a:	2301      	movs	r3, #1
 800d61c:	e7f2      	b.n	800d604 <_printf_float+0x1a4>
 800d61e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d624:	4299      	cmp	r1, r3
 800d626:	db05      	blt.n	800d634 <_printf_float+0x1d4>
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	6121      	str	r1, [r4, #16]
 800d62c:	07d8      	lsls	r0, r3, #31
 800d62e:	d5ea      	bpl.n	800d606 <_printf_float+0x1a6>
 800d630:	1c4b      	adds	r3, r1, #1
 800d632:	e7e7      	b.n	800d604 <_printf_float+0x1a4>
 800d634:	2900      	cmp	r1, #0
 800d636:	bfd4      	ite	le
 800d638:	f1c1 0202 	rsble	r2, r1, #2
 800d63c:	2201      	movgt	r2, #1
 800d63e:	4413      	add	r3, r2
 800d640:	e7e0      	b.n	800d604 <_printf_float+0x1a4>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	055a      	lsls	r2, r3, #21
 800d646:	d407      	bmi.n	800d658 <_printf_float+0x1f8>
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	4642      	mov	r2, r8
 800d64c:	4631      	mov	r1, r6
 800d64e:	4628      	mov	r0, r5
 800d650:	47b8      	blx	r7
 800d652:	3001      	adds	r0, #1
 800d654:	d12c      	bne.n	800d6b0 <_printf_float+0x250>
 800d656:	e764      	b.n	800d522 <_printf_float+0xc2>
 800d658:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d65c:	f240 80e0 	bls.w	800d820 <_printf_float+0x3c0>
 800d660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	f7f3 fa4e 	bl	8000b08 <__aeabi_dcmpeq>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	d034      	beq.n	800d6da <_printf_float+0x27a>
 800d670:	4a37      	ldr	r2, [pc, #220]	; (800d750 <_printf_float+0x2f0>)
 800d672:	2301      	movs	r3, #1
 800d674:	4631      	mov	r1, r6
 800d676:	4628      	mov	r0, r5
 800d678:	47b8      	blx	r7
 800d67a:	3001      	adds	r0, #1
 800d67c:	f43f af51 	beq.w	800d522 <_printf_float+0xc2>
 800d680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d684:	429a      	cmp	r2, r3
 800d686:	db02      	blt.n	800d68e <_printf_float+0x22e>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	07d8      	lsls	r0, r3, #31
 800d68c:	d510      	bpl.n	800d6b0 <_printf_float+0x250>
 800d68e:	ee18 3a10 	vmov	r3, s16
 800d692:	4652      	mov	r2, sl
 800d694:	4631      	mov	r1, r6
 800d696:	4628      	mov	r0, r5
 800d698:	47b8      	blx	r7
 800d69a:	3001      	adds	r0, #1
 800d69c:	f43f af41 	beq.w	800d522 <_printf_float+0xc2>
 800d6a0:	f04f 0800 	mov.w	r8, #0
 800d6a4:	f104 091a 	add.w	r9, r4, #26
 800d6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	4543      	cmp	r3, r8
 800d6ae:	dc09      	bgt.n	800d6c4 <_printf_float+0x264>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	079b      	lsls	r3, r3, #30
 800d6b4:	f100 8105 	bmi.w	800d8c2 <_printf_float+0x462>
 800d6b8:	68e0      	ldr	r0, [r4, #12]
 800d6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6bc:	4298      	cmp	r0, r3
 800d6be:	bfb8      	it	lt
 800d6c0:	4618      	movlt	r0, r3
 800d6c2:	e730      	b.n	800d526 <_printf_float+0xc6>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	464a      	mov	r2, r9
 800d6c8:	4631      	mov	r1, r6
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	47b8      	blx	r7
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	f43f af27 	beq.w	800d522 <_printf_float+0xc2>
 800d6d4:	f108 0801 	add.w	r8, r8, #1
 800d6d8:	e7e6      	b.n	800d6a8 <_printf_float+0x248>
 800d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dc39      	bgt.n	800d754 <_printf_float+0x2f4>
 800d6e0:	4a1b      	ldr	r2, [pc, #108]	; (800d750 <_printf_float+0x2f0>)
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	47b8      	blx	r7
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	f43f af19 	beq.w	800d522 <_printf_float+0xc2>
 800d6f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	d102      	bne.n	800d6fe <_printf_float+0x29e>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	07d9      	lsls	r1, r3, #31
 800d6fc:	d5d8      	bpl.n	800d6b0 <_printf_float+0x250>
 800d6fe:	ee18 3a10 	vmov	r3, s16
 800d702:	4652      	mov	r2, sl
 800d704:	4631      	mov	r1, r6
 800d706:	4628      	mov	r0, r5
 800d708:	47b8      	blx	r7
 800d70a:	3001      	adds	r0, #1
 800d70c:	f43f af09 	beq.w	800d522 <_printf_float+0xc2>
 800d710:	f04f 0900 	mov.w	r9, #0
 800d714:	f104 0a1a 	add.w	sl, r4, #26
 800d718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71a:	425b      	negs	r3, r3
 800d71c:	454b      	cmp	r3, r9
 800d71e:	dc01      	bgt.n	800d724 <_printf_float+0x2c4>
 800d720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d722:	e792      	b.n	800d64a <_printf_float+0x1ea>
 800d724:	2301      	movs	r3, #1
 800d726:	4652      	mov	r2, sl
 800d728:	4631      	mov	r1, r6
 800d72a:	4628      	mov	r0, r5
 800d72c:	47b8      	blx	r7
 800d72e:	3001      	adds	r0, #1
 800d730:	f43f aef7 	beq.w	800d522 <_printf_float+0xc2>
 800d734:	f109 0901 	add.w	r9, r9, #1
 800d738:	e7ee      	b.n	800d718 <_printf_float+0x2b8>
 800d73a:	bf00      	nop
 800d73c:	7fefffff 	.word	0x7fefffff
 800d740:	08012844 	.word	0x08012844
 800d744:	08012848 	.word	0x08012848
 800d748:	08012850 	.word	0x08012850
 800d74c:	0801284c 	.word	0x0801284c
 800d750:	08012c59 	.word	0x08012c59
 800d754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d758:	429a      	cmp	r2, r3
 800d75a:	bfa8      	it	ge
 800d75c:	461a      	movge	r2, r3
 800d75e:	2a00      	cmp	r2, #0
 800d760:	4691      	mov	r9, r2
 800d762:	dc37      	bgt.n	800d7d4 <_printf_float+0x374>
 800d764:	f04f 0b00 	mov.w	fp, #0
 800d768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d76c:	f104 021a 	add.w	r2, r4, #26
 800d770:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	eba3 0309 	sub.w	r3, r3, r9
 800d778:	455b      	cmp	r3, fp
 800d77a:	dc33      	bgt.n	800d7e4 <_printf_float+0x384>
 800d77c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d780:	429a      	cmp	r2, r3
 800d782:	db3b      	blt.n	800d7fc <_printf_float+0x39c>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	07da      	lsls	r2, r3, #31
 800d788:	d438      	bmi.n	800d7fc <_printf_float+0x39c>
 800d78a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d78c:	9b05      	ldr	r3, [sp, #20]
 800d78e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	eba2 0901 	sub.w	r9, r2, r1
 800d796:	4599      	cmp	r9, r3
 800d798:	bfa8      	it	ge
 800d79a:	4699      	movge	r9, r3
 800d79c:	f1b9 0f00 	cmp.w	r9, #0
 800d7a0:	dc35      	bgt.n	800d80e <_printf_float+0x3ae>
 800d7a2:	f04f 0800 	mov.w	r8, #0
 800d7a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7aa:	f104 0a1a 	add.w	sl, r4, #26
 800d7ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	eba3 0309 	sub.w	r3, r3, r9
 800d7b8:	4543      	cmp	r3, r8
 800d7ba:	f77f af79 	ble.w	800d6b0 <_printf_float+0x250>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4652      	mov	r2, sl
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	47b8      	blx	r7
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	f43f aeaa 	beq.w	800d522 <_printf_float+0xc2>
 800d7ce:	f108 0801 	add.w	r8, r8, #1
 800d7d2:	e7ec      	b.n	800d7ae <_printf_float+0x34e>
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	4642      	mov	r2, r8
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d1c0      	bne.n	800d764 <_printf_float+0x304>
 800d7e2:	e69e      	b.n	800d522 <_printf_float+0xc2>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	9205      	str	r2, [sp, #20]
 800d7ec:	47b8      	blx	r7
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	f43f ae97 	beq.w	800d522 <_printf_float+0xc2>
 800d7f4:	9a05      	ldr	r2, [sp, #20]
 800d7f6:	f10b 0b01 	add.w	fp, fp, #1
 800d7fa:	e7b9      	b.n	800d770 <_printf_float+0x310>
 800d7fc:	ee18 3a10 	vmov	r3, s16
 800d800:	4652      	mov	r2, sl
 800d802:	4631      	mov	r1, r6
 800d804:	4628      	mov	r0, r5
 800d806:	47b8      	blx	r7
 800d808:	3001      	adds	r0, #1
 800d80a:	d1be      	bne.n	800d78a <_printf_float+0x32a>
 800d80c:	e689      	b.n	800d522 <_printf_float+0xc2>
 800d80e:	9a05      	ldr	r2, [sp, #20]
 800d810:	464b      	mov	r3, r9
 800d812:	4442      	add	r2, r8
 800d814:	4631      	mov	r1, r6
 800d816:	4628      	mov	r0, r5
 800d818:	47b8      	blx	r7
 800d81a:	3001      	adds	r0, #1
 800d81c:	d1c1      	bne.n	800d7a2 <_printf_float+0x342>
 800d81e:	e680      	b.n	800d522 <_printf_float+0xc2>
 800d820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d822:	2a01      	cmp	r2, #1
 800d824:	dc01      	bgt.n	800d82a <_printf_float+0x3ca>
 800d826:	07db      	lsls	r3, r3, #31
 800d828:	d538      	bpl.n	800d89c <_printf_float+0x43c>
 800d82a:	2301      	movs	r3, #1
 800d82c:	4642      	mov	r2, r8
 800d82e:	4631      	mov	r1, r6
 800d830:	4628      	mov	r0, r5
 800d832:	47b8      	blx	r7
 800d834:	3001      	adds	r0, #1
 800d836:	f43f ae74 	beq.w	800d522 <_printf_float+0xc2>
 800d83a:	ee18 3a10 	vmov	r3, s16
 800d83e:	4652      	mov	r2, sl
 800d840:	4631      	mov	r1, r6
 800d842:	4628      	mov	r0, r5
 800d844:	47b8      	blx	r7
 800d846:	3001      	adds	r0, #1
 800d848:	f43f ae6b 	beq.w	800d522 <_printf_float+0xc2>
 800d84c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d850:	2200      	movs	r2, #0
 800d852:	2300      	movs	r3, #0
 800d854:	f7f3 f958 	bl	8000b08 <__aeabi_dcmpeq>
 800d858:	b9d8      	cbnz	r0, 800d892 <_printf_float+0x432>
 800d85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d85c:	f108 0201 	add.w	r2, r8, #1
 800d860:	3b01      	subs	r3, #1
 800d862:	4631      	mov	r1, r6
 800d864:	4628      	mov	r0, r5
 800d866:	47b8      	blx	r7
 800d868:	3001      	adds	r0, #1
 800d86a:	d10e      	bne.n	800d88a <_printf_float+0x42a>
 800d86c:	e659      	b.n	800d522 <_printf_float+0xc2>
 800d86e:	2301      	movs	r3, #1
 800d870:	4652      	mov	r2, sl
 800d872:	4631      	mov	r1, r6
 800d874:	4628      	mov	r0, r5
 800d876:	47b8      	blx	r7
 800d878:	3001      	adds	r0, #1
 800d87a:	f43f ae52 	beq.w	800d522 <_printf_float+0xc2>
 800d87e:	f108 0801 	add.w	r8, r8, #1
 800d882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d884:	3b01      	subs	r3, #1
 800d886:	4543      	cmp	r3, r8
 800d888:	dcf1      	bgt.n	800d86e <_printf_float+0x40e>
 800d88a:	464b      	mov	r3, r9
 800d88c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d890:	e6dc      	b.n	800d64c <_printf_float+0x1ec>
 800d892:	f04f 0800 	mov.w	r8, #0
 800d896:	f104 0a1a 	add.w	sl, r4, #26
 800d89a:	e7f2      	b.n	800d882 <_printf_float+0x422>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4642      	mov	r2, r8
 800d8a0:	e7df      	b.n	800d862 <_printf_float+0x402>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	464a      	mov	r2, r9
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	f43f ae38 	beq.w	800d522 <_printf_float+0xc2>
 800d8b2:	f108 0801 	add.w	r8, r8, #1
 800d8b6:	68e3      	ldr	r3, [r4, #12]
 800d8b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8ba:	1a5b      	subs	r3, r3, r1
 800d8bc:	4543      	cmp	r3, r8
 800d8be:	dcf0      	bgt.n	800d8a2 <_printf_float+0x442>
 800d8c0:	e6fa      	b.n	800d6b8 <_printf_float+0x258>
 800d8c2:	f04f 0800 	mov.w	r8, #0
 800d8c6:	f104 0919 	add.w	r9, r4, #25
 800d8ca:	e7f4      	b.n	800d8b6 <_printf_float+0x456>

0800d8cc <_printf_common>:
 800d8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	4699      	mov	r9, r3
 800d8d4:	688a      	ldr	r2, [r1, #8]
 800d8d6:	690b      	ldr	r3, [r1, #16]
 800d8d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	bfb8      	it	lt
 800d8e0:	4613      	movlt	r3, r2
 800d8e2:	6033      	str	r3, [r6, #0]
 800d8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	b10a      	cbz	r2, 800d8f2 <_printf_common+0x26>
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	0699      	lsls	r1, r3, #26
 800d8f6:	bf42      	ittt	mi
 800d8f8:	6833      	ldrmi	r3, [r6, #0]
 800d8fa:	3302      	addmi	r3, #2
 800d8fc:	6033      	strmi	r3, [r6, #0]
 800d8fe:	6825      	ldr	r5, [r4, #0]
 800d900:	f015 0506 	ands.w	r5, r5, #6
 800d904:	d106      	bne.n	800d914 <_printf_common+0x48>
 800d906:	f104 0a19 	add.w	sl, r4, #25
 800d90a:	68e3      	ldr	r3, [r4, #12]
 800d90c:	6832      	ldr	r2, [r6, #0]
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	42ab      	cmp	r3, r5
 800d912:	dc26      	bgt.n	800d962 <_printf_common+0x96>
 800d914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d918:	1e13      	subs	r3, r2, #0
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	bf18      	it	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	0692      	lsls	r2, r2, #26
 800d922:	d42b      	bmi.n	800d97c <_printf_common+0xb0>
 800d924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d928:	4649      	mov	r1, r9
 800d92a:	4638      	mov	r0, r7
 800d92c:	47c0      	blx	r8
 800d92e:	3001      	adds	r0, #1
 800d930:	d01e      	beq.n	800d970 <_printf_common+0xa4>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	68e5      	ldr	r5, [r4, #12]
 800d936:	6832      	ldr	r2, [r6, #0]
 800d938:	f003 0306 	and.w	r3, r3, #6
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	bf08      	it	eq
 800d940:	1aad      	subeq	r5, r5, r2
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	6922      	ldr	r2, [r4, #16]
 800d946:	bf0c      	ite	eq
 800d948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d94c:	2500      	movne	r5, #0
 800d94e:	4293      	cmp	r3, r2
 800d950:	bfc4      	itt	gt
 800d952:	1a9b      	subgt	r3, r3, r2
 800d954:	18ed      	addgt	r5, r5, r3
 800d956:	2600      	movs	r6, #0
 800d958:	341a      	adds	r4, #26
 800d95a:	42b5      	cmp	r5, r6
 800d95c:	d11a      	bne.n	800d994 <_printf_common+0xc8>
 800d95e:	2000      	movs	r0, #0
 800d960:	e008      	b.n	800d974 <_printf_common+0xa8>
 800d962:	2301      	movs	r3, #1
 800d964:	4652      	mov	r2, sl
 800d966:	4649      	mov	r1, r9
 800d968:	4638      	mov	r0, r7
 800d96a:	47c0      	blx	r8
 800d96c:	3001      	adds	r0, #1
 800d96e:	d103      	bne.n	800d978 <_printf_common+0xac>
 800d970:	f04f 30ff 	mov.w	r0, #4294967295
 800d974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d978:	3501      	adds	r5, #1
 800d97a:	e7c6      	b.n	800d90a <_printf_common+0x3e>
 800d97c:	18e1      	adds	r1, r4, r3
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	2030      	movs	r0, #48	; 0x30
 800d982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d986:	4422      	add	r2, r4
 800d988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d98c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d990:	3302      	adds	r3, #2
 800d992:	e7c7      	b.n	800d924 <_printf_common+0x58>
 800d994:	2301      	movs	r3, #1
 800d996:	4622      	mov	r2, r4
 800d998:	4649      	mov	r1, r9
 800d99a:	4638      	mov	r0, r7
 800d99c:	47c0      	blx	r8
 800d99e:	3001      	adds	r0, #1
 800d9a0:	d0e6      	beq.n	800d970 <_printf_common+0xa4>
 800d9a2:	3601      	adds	r6, #1
 800d9a4:	e7d9      	b.n	800d95a <_printf_common+0x8e>
	...

0800d9a8 <_printf_i>:
 800d9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	4691      	mov	r9, r2
 800d9b0:	7e27      	ldrb	r7, [r4, #24]
 800d9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d9b4:	2f78      	cmp	r7, #120	; 0x78
 800d9b6:	4680      	mov	r8, r0
 800d9b8:	469a      	mov	sl, r3
 800d9ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9be:	d807      	bhi.n	800d9d0 <_printf_i+0x28>
 800d9c0:	2f62      	cmp	r7, #98	; 0x62
 800d9c2:	d80a      	bhi.n	800d9da <_printf_i+0x32>
 800d9c4:	2f00      	cmp	r7, #0
 800d9c6:	f000 80d8 	beq.w	800db7a <_printf_i+0x1d2>
 800d9ca:	2f58      	cmp	r7, #88	; 0x58
 800d9cc:	f000 80a3 	beq.w	800db16 <_printf_i+0x16e>
 800d9d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9d8:	e03a      	b.n	800da50 <_printf_i+0xa8>
 800d9da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9de:	2b15      	cmp	r3, #21
 800d9e0:	d8f6      	bhi.n	800d9d0 <_printf_i+0x28>
 800d9e2:	a001      	add	r0, pc, #4	; (adr r0, 800d9e8 <_printf_i+0x40>)
 800d9e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d9e8:	0800da41 	.word	0x0800da41
 800d9ec:	0800da55 	.word	0x0800da55
 800d9f0:	0800d9d1 	.word	0x0800d9d1
 800d9f4:	0800d9d1 	.word	0x0800d9d1
 800d9f8:	0800d9d1 	.word	0x0800d9d1
 800d9fc:	0800d9d1 	.word	0x0800d9d1
 800da00:	0800da55 	.word	0x0800da55
 800da04:	0800d9d1 	.word	0x0800d9d1
 800da08:	0800d9d1 	.word	0x0800d9d1
 800da0c:	0800d9d1 	.word	0x0800d9d1
 800da10:	0800d9d1 	.word	0x0800d9d1
 800da14:	0800db61 	.word	0x0800db61
 800da18:	0800da85 	.word	0x0800da85
 800da1c:	0800db43 	.word	0x0800db43
 800da20:	0800d9d1 	.word	0x0800d9d1
 800da24:	0800d9d1 	.word	0x0800d9d1
 800da28:	0800db83 	.word	0x0800db83
 800da2c:	0800d9d1 	.word	0x0800d9d1
 800da30:	0800da85 	.word	0x0800da85
 800da34:	0800d9d1 	.word	0x0800d9d1
 800da38:	0800d9d1 	.word	0x0800d9d1
 800da3c:	0800db4b 	.word	0x0800db4b
 800da40:	680b      	ldr	r3, [r1, #0]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	600a      	str	r2, [r1, #0]
 800da48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da50:	2301      	movs	r3, #1
 800da52:	e0a3      	b.n	800db9c <_printf_i+0x1f4>
 800da54:	6825      	ldr	r5, [r4, #0]
 800da56:	6808      	ldr	r0, [r1, #0]
 800da58:	062e      	lsls	r6, r5, #24
 800da5a:	f100 0304 	add.w	r3, r0, #4
 800da5e:	d50a      	bpl.n	800da76 <_printf_i+0xce>
 800da60:	6805      	ldr	r5, [r0, #0]
 800da62:	600b      	str	r3, [r1, #0]
 800da64:	2d00      	cmp	r5, #0
 800da66:	da03      	bge.n	800da70 <_printf_i+0xc8>
 800da68:	232d      	movs	r3, #45	; 0x2d
 800da6a:	426d      	negs	r5, r5
 800da6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da70:	485e      	ldr	r0, [pc, #376]	; (800dbec <_printf_i+0x244>)
 800da72:	230a      	movs	r3, #10
 800da74:	e019      	b.n	800daaa <_printf_i+0x102>
 800da76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800da7a:	6805      	ldr	r5, [r0, #0]
 800da7c:	600b      	str	r3, [r1, #0]
 800da7e:	bf18      	it	ne
 800da80:	b22d      	sxthne	r5, r5
 800da82:	e7ef      	b.n	800da64 <_printf_i+0xbc>
 800da84:	680b      	ldr	r3, [r1, #0]
 800da86:	6825      	ldr	r5, [r4, #0]
 800da88:	1d18      	adds	r0, r3, #4
 800da8a:	6008      	str	r0, [r1, #0]
 800da8c:	0628      	lsls	r0, r5, #24
 800da8e:	d501      	bpl.n	800da94 <_printf_i+0xec>
 800da90:	681d      	ldr	r5, [r3, #0]
 800da92:	e002      	b.n	800da9a <_printf_i+0xf2>
 800da94:	0669      	lsls	r1, r5, #25
 800da96:	d5fb      	bpl.n	800da90 <_printf_i+0xe8>
 800da98:	881d      	ldrh	r5, [r3, #0]
 800da9a:	4854      	ldr	r0, [pc, #336]	; (800dbec <_printf_i+0x244>)
 800da9c:	2f6f      	cmp	r7, #111	; 0x6f
 800da9e:	bf0c      	ite	eq
 800daa0:	2308      	moveq	r3, #8
 800daa2:	230a      	movne	r3, #10
 800daa4:	2100      	movs	r1, #0
 800daa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daaa:	6866      	ldr	r6, [r4, #4]
 800daac:	60a6      	str	r6, [r4, #8]
 800daae:	2e00      	cmp	r6, #0
 800dab0:	bfa2      	ittt	ge
 800dab2:	6821      	ldrge	r1, [r4, #0]
 800dab4:	f021 0104 	bicge.w	r1, r1, #4
 800dab8:	6021      	strge	r1, [r4, #0]
 800daba:	b90d      	cbnz	r5, 800dac0 <_printf_i+0x118>
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	d04d      	beq.n	800db5c <_printf_i+0x1b4>
 800dac0:	4616      	mov	r6, r2
 800dac2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dac6:	fb03 5711 	mls	r7, r3, r1, r5
 800daca:	5dc7      	ldrb	r7, [r0, r7]
 800dacc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dad0:	462f      	mov	r7, r5
 800dad2:	42bb      	cmp	r3, r7
 800dad4:	460d      	mov	r5, r1
 800dad6:	d9f4      	bls.n	800dac2 <_printf_i+0x11a>
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d10b      	bne.n	800daf4 <_printf_i+0x14c>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	07df      	lsls	r7, r3, #31
 800dae0:	d508      	bpl.n	800daf4 <_printf_i+0x14c>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	6861      	ldr	r1, [r4, #4]
 800dae6:	4299      	cmp	r1, r3
 800dae8:	bfde      	ittt	le
 800daea:	2330      	movle	r3, #48	; 0x30
 800daec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800daf4:	1b92      	subs	r2, r2, r6
 800daf6:	6122      	str	r2, [r4, #16]
 800daf8:	f8cd a000 	str.w	sl, [sp]
 800dafc:	464b      	mov	r3, r9
 800dafe:	aa03      	add	r2, sp, #12
 800db00:	4621      	mov	r1, r4
 800db02:	4640      	mov	r0, r8
 800db04:	f7ff fee2 	bl	800d8cc <_printf_common>
 800db08:	3001      	adds	r0, #1
 800db0a:	d14c      	bne.n	800dba6 <_printf_i+0x1fe>
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	b004      	add	sp, #16
 800db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db16:	4835      	ldr	r0, [pc, #212]	; (800dbec <_printf_i+0x244>)
 800db18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	680e      	ldr	r6, [r1, #0]
 800db20:	061f      	lsls	r7, r3, #24
 800db22:	f856 5b04 	ldr.w	r5, [r6], #4
 800db26:	600e      	str	r6, [r1, #0]
 800db28:	d514      	bpl.n	800db54 <_printf_i+0x1ac>
 800db2a:	07d9      	lsls	r1, r3, #31
 800db2c:	bf44      	itt	mi
 800db2e:	f043 0320 	orrmi.w	r3, r3, #32
 800db32:	6023      	strmi	r3, [r4, #0]
 800db34:	b91d      	cbnz	r5, 800db3e <_printf_i+0x196>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	f023 0320 	bic.w	r3, r3, #32
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	2310      	movs	r3, #16
 800db40:	e7b0      	b.n	800daa4 <_printf_i+0xfc>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	f043 0320 	orr.w	r3, r3, #32
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	2378      	movs	r3, #120	; 0x78
 800db4c:	4828      	ldr	r0, [pc, #160]	; (800dbf0 <_printf_i+0x248>)
 800db4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db52:	e7e3      	b.n	800db1c <_printf_i+0x174>
 800db54:	065e      	lsls	r6, r3, #25
 800db56:	bf48      	it	mi
 800db58:	b2ad      	uxthmi	r5, r5
 800db5a:	e7e6      	b.n	800db2a <_printf_i+0x182>
 800db5c:	4616      	mov	r6, r2
 800db5e:	e7bb      	b.n	800dad8 <_printf_i+0x130>
 800db60:	680b      	ldr	r3, [r1, #0]
 800db62:	6826      	ldr	r6, [r4, #0]
 800db64:	6960      	ldr	r0, [r4, #20]
 800db66:	1d1d      	adds	r5, r3, #4
 800db68:	600d      	str	r5, [r1, #0]
 800db6a:	0635      	lsls	r5, r6, #24
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	d501      	bpl.n	800db74 <_printf_i+0x1cc>
 800db70:	6018      	str	r0, [r3, #0]
 800db72:	e002      	b.n	800db7a <_printf_i+0x1d2>
 800db74:	0671      	lsls	r1, r6, #25
 800db76:	d5fb      	bpl.n	800db70 <_printf_i+0x1c8>
 800db78:	8018      	strh	r0, [r3, #0]
 800db7a:	2300      	movs	r3, #0
 800db7c:	6123      	str	r3, [r4, #16]
 800db7e:	4616      	mov	r6, r2
 800db80:	e7ba      	b.n	800daf8 <_printf_i+0x150>
 800db82:	680b      	ldr	r3, [r1, #0]
 800db84:	1d1a      	adds	r2, r3, #4
 800db86:	600a      	str	r2, [r1, #0]
 800db88:	681e      	ldr	r6, [r3, #0]
 800db8a:	6862      	ldr	r2, [r4, #4]
 800db8c:	2100      	movs	r1, #0
 800db8e:	4630      	mov	r0, r6
 800db90:	f7f2 fb3e 	bl	8000210 <memchr>
 800db94:	b108      	cbz	r0, 800db9a <_printf_i+0x1f2>
 800db96:	1b80      	subs	r0, r0, r6
 800db98:	6060      	str	r0, [r4, #4]
 800db9a:	6863      	ldr	r3, [r4, #4]
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	2300      	movs	r3, #0
 800dba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba4:	e7a8      	b.n	800daf8 <_printf_i+0x150>
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	4632      	mov	r2, r6
 800dbaa:	4649      	mov	r1, r9
 800dbac:	4640      	mov	r0, r8
 800dbae:	47d0      	blx	sl
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d0ab      	beq.n	800db0c <_printf_i+0x164>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	079b      	lsls	r3, r3, #30
 800dbb8:	d413      	bmi.n	800dbe2 <_printf_i+0x23a>
 800dbba:	68e0      	ldr	r0, [r4, #12]
 800dbbc:	9b03      	ldr	r3, [sp, #12]
 800dbbe:	4298      	cmp	r0, r3
 800dbc0:	bfb8      	it	lt
 800dbc2:	4618      	movlt	r0, r3
 800dbc4:	e7a4      	b.n	800db10 <_printf_i+0x168>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4649      	mov	r1, r9
 800dbcc:	4640      	mov	r0, r8
 800dbce:	47d0      	blx	sl
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d09b      	beq.n	800db0c <_printf_i+0x164>
 800dbd4:	3501      	adds	r5, #1
 800dbd6:	68e3      	ldr	r3, [r4, #12]
 800dbd8:	9903      	ldr	r1, [sp, #12]
 800dbda:	1a5b      	subs	r3, r3, r1
 800dbdc:	42ab      	cmp	r3, r5
 800dbde:	dcf2      	bgt.n	800dbc6 <_printf_i+0x21e>
 800dbe0:	e7eb      	b.n	800dbba <_printf_i+0x212>
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	f104 0619 	add.w	r6, r4, #25
 800dbe8:	e7f5      	b.n	800dbd6 <_printf_i+0x22e>
 800dbea:	bf00      	nop
 800dbec:	08012854 	.word	0x08012854
 800dbf0:	08012865 	.word	0x08012865

0800dbf4 <_scanf_float>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	b087      	sub	sp, #28
 800dbfa:	4617      	mov	r7, r2
 800dbfc:	9303      	str	r3, [sp, #12]
 800dbfe:	688b      	ldr	r3, [r1, #8]
 800dc00:	1e5a      	subs	r2, r3, #1
 800dc02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dc06:	bf83      	ittte	hi
 800dc08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dc0c:	195b      	addhi	r3, r3, r5
 800dc0e:	9302      	strhi	r3, [sp, #8]
 800dc10:	2300      	movls	r3, #0
 800dc12:	bf86      	itte	hi
 800dc14:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dc18:	608b      	strhi	r3, [r1, #8]
 800dc1a:	9302      	strls	r3, [sp, #8]
 800dc1c:	680b      	ldr	r3, [r1, #0]
 800dc1e:	468b      	mov	fp, r1
 800dc20:	2500      	movs	r5, #0
 800dc22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dc26:	f84b 3b1c 	str.w	r3, [fp], #28
 800dc2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dc2e:	4680      	mov	r8, r0
 800dc30:	460c      	mov	r4, r1
 800dc32:	465e      	mov	r6, fp
 800dc34:	46aa      	mov	sl, r5
 800dc36:	46a9      	mov	r9, r5
 800dc38:	9501      	str	r5, [sp, #4]
 800dc3a:	68a2      	ldr	r2, [r4, #8]
 800dc3c:	b152      	cbz	r2, 800dc54 <_scanf_float+0x60>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b4e      	cmp	r3, #78	; 0x4e
 800dc44:	d864      	bhi.n	800dd10 <_scanf_float+0x11c>
 800dc46:	2b40      	cmp	r3, #64	; 0x40
 800dc48:	d83c      	bhi.n	800dcc4 <_scanf_float+0xd0>
 800dc4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dc4e:	b2c8      	uxtb	r0, r1
 800dc50:	280e      	cmp	r0, #14
 800dc52:	d93a      	bls.n	800dcca <_scanf_float+0xd6>
 800dc54:	f1b9 0f00 	cmp.w	r9, #0
 800dc58:	d003      	beq.n	800dc62 <_scanf_float+0x6e>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc66:	f1ba 0f01 	cmp.w	sl, #1
 800dc6a:	f200 8113 	bhi.w	800de94 <_scanf_float+0x2a0>
 800dc6e:	455e      	cmp	r6, fp
 800dc70:	f200 8105 	bhi.w	800de7e <_scanf_float+0x28a>
 800dc74:	2501      	movs	r5, #1
 800dc76:	4628      	mov	r0, r5
 800dc78:	b007      	add	sp, #28
 800dc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dc82:	2a0d      	cmp	r2, #13
 800dc84:	d8e6      	bhi.n	800dc54 <_scanf_float+0x60>
 800dc86:	a101      	add	r1, pc, #4	; (adr r1, 800dc8c <_scanf_float+0x98>)
 800dc88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc8c:	0800ddcb 	.word	0x0800ddcb
 800dc90:	0800dc55 	.word	0x0800dc55
 800dc94:	0800dc55 	.word	0x0800dc55
 800dc98:	0800dc55 	.word	0x0800dc55
 800dc9c:	0800de2b 	.word	0x0800de2b
 800dca0:	0800de03 	.word	0x0800de03
 800dca4:	0800dc55 	.word	0x0800dc55
 800dca8:	0800dc55 	.word	0x0800dc55
 800dcac:	0800ddd9 	.word	0x0800ddd9
 800dcb0:	0800dc55 	.word	0x0800dc55
 800dcb4:	0800dc55 	.word	0x0800dc55
 800dcb8:	0800dc55 	.word	0x0800dc55
 800dcbc:	0800dc55 	.word	0x0800dc55
 800dcc0:	0800dd91 	.word	0x0800dd91
 800dcc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dcc8:	e7db      	b.n	800dc82 <_scanf_float+0x8e>
 800dcca:	290e      	cmp	r1, #14
 800dccc:	d8c2      	bhi.n	800dc54 <_scanf_float+0x60>
 800dcce:	a001      	add	r0, pc, #4	; (adr r0, 800dcd4 <_scanf_float+0xe0>)
 800dcd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dcd4:	0800dd83 	.word	0x0800dd83
 800dcd8:	0800dc55 	.word	0x0800dc55
 800dcdc:	0800dd83 	.word	0x0800dd83
 800dce0:	0800de17 	.word	0x0800de17
 800dce4:	0800dc55 	.word	0x0800dc55
 800dce8:	0800dd31 	.word	0x0800dd31
 800dcec:	0800dd6d 	.word	0x0800dd6d
 800dcf0:	0800dd6d 	.word	0x0800dd6d
 800dcf4:	0800dd6d 	.word	0x0800dd6d
 800dcf8:	0800dd6d 	.word	0x0800dd6d
 800dcfc:	0800dd6d 	.word	0x0800dd6d
 800dd00:	0800dd6d 	.word	0x0800dd6d
 800dd04:	0800dd6d 	.word	0x0800dd6d
 800dd08:	0800dd6d 	.word	0x0800dd6d
 800dd0c:	0800dd6d 	.word	0x0800dd6d
 800dd10:	2b6e      	cmp	r3, #110	; 0x6e
 800dd12:	d809      	bhi.n	800dd28 <_scanf_float+0x134>
 800dd14:	2b60      	cmp	r3, #96	; 0x60
 800dd16:	d8b2      	bhi.n	800dc7e <_scanf_float+0x8a>
 800dd18:	2b54      	cmp	r3, #84	; 0x54
 800dd1a:	d077      	beq.n	800de0c <_scanf_float+0x218>
 800dd1c:	2b59      	cmp	r3, #89	; 0x59
 800dd1e:	d199      	bne.n	800dc54 <_scanf_float+0x60>
 800dd20:	2d07      	cmp	r5, #7
 800dd22:	d197      	bne.n	800dc54 <_scanf_float+0x60>
 800dd24:	2508      	movs	r5, #8
 800dd26:	e029      	b.n	800dd7c <_scanf_float+0x188>
 800dd28:	2b74      	cmp	r3, #116	; 0x74
 800dd2a:	d06f      	beq.n	800de0c <_scanf_float+0x218>
 800dd2c:	2b79      	cmp	r3, #121	; 0x79
 800dd2e:	e7f6      	b.n	800dd1e <_scanf_float+0x12a>
 800dd30:	6821      	ldr	r1, [r4, #0]
 800dd32:	05c8      	lsls	r0, r1, #23
 800dd34:	d51a      	bpl.n	800dd6c <_scanf_float+0x178>
 800dd36:	9b02      	ldr	r3, [sp, #8]
 800dd38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dd3c:	6021      	str	r1, [r4, #0]
 800dd3e:	f109 0901 	add.w	r9, r9, #1
 800dd42:	b11b      	cbz	r3, 800dd4c <_scanf_float+0x158>
 800dd44:	3b01      	subs	r3, #1
 800dd46:	3201      	adds	r2, #1
 800dd48:	9302      	str	r3, [sp, #8]
 800dd4a:	60a2      	str	r2, [r4, #8]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	60a3      	str	r3, [r4, #8]
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	3301      	adds	r3, #1
 800dd56:	6123      	str	r3, [r4, #16]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	607b      	str	r3, [r7, #4]
 800dd60:	f340 8084 	ble.w	800de6c <_scanf_float+0x278>
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	3301      	adds	r3, #1
 800dd68:	603b      	str	r3, [r7, #0]
 800dd6a:	e766      	b.n	800dc3a <_scanf_float+0x46>
 800dd6c:	eb1a 0f05 	cmn.w	sl, r5
 800dd70:	f47f af70 	bne.w	800dc54 <_scanf_float+0x60>
 800dd74:	6822      	ldr	r2, [r4, #0]
 800dd76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dd7a:	6022      	str	r2, [r4, #0]
 800dd7c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd80:	e7e4      	b.n	800dd4c <_scanf_float+0x158>
 800dd82:	6822      	ldr	r2, [r4, #0]
 800dd84:	0610      	lsls	r0, r2, #24
 800dd86:	f57f af65 	bpl.w	800dc54 <_scanf_float+0x60>
 800dd8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd8e:	e7f4      	b.n	800dd7a <_scanf_float+0x186>
 800dd90:	f1ba 0f00 	cmp.w	sl, #0
 800dd94:	d10e      	bne.n	800ddb4 <_scanf_float+0x1c0>
 800dd96:	f1b9 0f00 	cmp.w	r9, #0
 800dd9a:	d10e      	bne.n	800ddba <_scanf_float+0x1c6>
 800dd9c:	6822      	ldr	r2, [r4, #0]
 800dd9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dda2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dda6:	d108      	bne.n	800ddba <_scanf_float+0x1c6>
 800dda8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ddac:	6022      	str	r2, [r4, #0]
 800ddae:	f04f 0a01 	mov.w	sl, #1
 800ddb2:	e7e3      	b.n	800dd7c <_scanf_float+0x188>
 800ddb4:	f1ba 0f02 	cmp.w	sl, #2
 800ddb8:	d055      	beq.n	800de66 <_scanf_float+0x272>
 800ddba:	2d01      	cmp	r5, #1
 800ddbc:	d002      	beq.n	800ddc4 <_scanf_float+0x1d0>
 800ddbe:	2d04      	cmp	r5, #4
 800ddc0:	f47f af48 	bne.w	800dc54 <_scanf_float+0x60>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	b2ed      	uxtb	r5, r5
 800ddc8:	e7d8      	b.n	800dd7c <_scanf_float+0x188>
 800ddca:	f1ba 0f01 	cmp.w	sl, #1
 800ddce:	f47f af41 	bne.w	800dc54 <_scanf_float+0x60>
 800ddd2:	f04f 0a02 	mov.w	sl, #2
 800ddd6:	e7d1      	b.n	800dd7c <_scanf_float+0x188>
 800ddd8:	b97d      	cbnz	r5, 800ddfa <_scanf_float+0x206>
 800ddda:	f1b9 0f00 	cmp.w	r9, #0
 800ddde:	f47f af3c 	bne.w	800dc5a <_scanf_float+0x66>
 800dde2:	6822      	ldr	r2, [r4, #0]
 800dde4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dde8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ddec:	f47f af39 	bne.w	800dc62 <_scanf_float+0x6e>
 800ddf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ddf4:	6022      	str	r2, [r4, #0]
 800ddf6:	2501      	movs	r5, #1
 800ddf8:	e7c0      	b.n	800dd7c <_scanf_float+0x188>
 800ddfa:	2d03      	cmp	r5, #3
 800ddfc:	d0e2      	beq.n	800ddc4 <_scanf_float+0x1d0>
 800ddfe:	2d05      	cmp	r5, #5
 800de00:	e7de      	b.n	800ddc0 <_scanf_float+0x1cc>
 800de02:	2d02      	cmp	r5, #2
 800de04:	f47f af26 	bne.w	800dc54 <_scanf_float+0x60>
 800de08:	2503      	movs	r5, #3
 800de0a:	e7b7      	b.n	800dd7c <_scanf_float+0x188>
 800de0c:	2d06      	cmp	r5, #6
 800de0e:	f47f af21 	bne.w	800dc54 <_scanf_float+0x60>
 800de12:	2507      	movs	r5, #7
 800de14:	e7b2      	b.n	800dd7c <_scanf_float+0x188>
 800de16:	6822      	ldr	r2, [r4, #0]
 800de18:	0591      	lsls	r1, r2, #22
 800de1a:	f57f af1b 	bpl.w	800dc54 <_scanf_float+0x60>
 800de1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800de22:	6022      	str	r2, [r4, #0]
 800de24:	f8cd 9004 	str.w	r9, [sp, #4]
 800de28:	e7a8      	b.n	800dd7c <_scanf_float+0x188>
 800de2a:	6822      	ldr	r2, [r4, #0]
 800de2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800de30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800de34:	d006      	beq.n	800de44 <_scanf_float+0x250>
 800de36:	0550      	lsls	r0, r2, #21
 800de38:	f57f af0c 	bpl.w	800dc54 <_scanf_float+0x60>
 800de3c:	f1b9 0f00 	cmp.w	r9, #0
 800de40:	f43f af0f 	beq.w	800dc62 <_scanf_float+0x6e>
 800de44:	0591      	lsls	r1, r2, #22
 800de46:	bf58      	it	pl
 800de48:	9901      	ldrpl	r1, [sp, #4]
 800de4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800de4e:	bf58      	it	pl
 800de50:	eba9 0101 	subpl.w	r1, r9, r1
 800de54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800de58:	bf58      	it	pl
 800de5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800de5e:	6022      	str	r2, [r4, #0]
 800de60:	f04f 0900 	mov.w	r9, #0
 800de64:	e78a      	b.n	800dd7c <_scanf_float+0x188>
 800de66:	f04f 0a03 	mov.w	sl, #3
 800de6a:	e787      	b.n	800dd7c <_scanf_float+0x188>
 800de6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de70:	4639      	mov	r1, r7
 800de72:	4640      	mov	r0, r8
 800de74:	4798      	blx	r3
 800de76:	2800      	cmp	r0, #0
 800de78:	f43f aedf 	beq.w	800dc3a <_scanf_float+0x46>
 800de7c:	e6ea      	b.n	800dc54 <_scanf_float+0x60>
 800de7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de86:	463a      	mov	r2, r7
 800de88:	4640      	mov	r0, r8
 800de8a:	4798      	blx	r3
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	3b01      	subs	r3, #1
 800de90:	6123      	str	r3, [r4, #16]
 800de92:	e6ec      	b.n	800dc6e <_scanf_float+0x7a>
 800de94:	1e6b      	subs	r3, r5, #1
 800de96:	2b06      	cmp	r3, #6
 800de98:	d825      	bhi.n	800dee6 <_scanf_float+0x2f2>
 800de9a:	2d02      	cmp	r5, #2
 800de9c:	d836      	bhi.n	800df0c <_scanf_float+0x318>
 800de9e:	455e      	cmp	r6, fp
 800dea0:	f67f aee8 	bls.w	800dc74 <_scanf_float+0x80>
 800dea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dea8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800deac:	463a      	mov	r2, r7
 800deae:	4640      	mov	r0, r8
 800deb0:	4798      	blx	r3
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	e7f1      	b.n	800de9e <_scanf_float+0x2aa>
 800deba:	9802      	ldr	r0, [sp, #8]
 800debc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dec0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dec4:	9002      	str	r0, [sp, #8]
 800dec6:	463a      	mov	r2, r7
 800dec8:	4640      	mov	r0, r8
 800deca:	4798      	blx	r3
 800decc:	6923      	ldr	r3, [r4, #16]
 800dece:	3b01      	subs	r3, #1
 800ded0:	6123      	str	r3, [r4, #16]
 800ded2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ded6:	fa5f fa8a 	uxtb.w	sl, sl
 800deda:	f1ba 0f02 	cmp.w	sl, #2
 800dede:	d1ec      	bne.n	800deba <_scanf_float+0x2c6>
 800dee0:	3d03      	subs	r5, #3
 800dee2:	b2ed      	uxtb	r5, r5
 800dee4:	1b76      	subs	r6, r6, r5
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	05da      	lsls	r2, r3, #23
 800deea:	d52f      	bpl.n	800df4c <_scanf_float+0x358>
 800deec:	055b      	lsls	r3, r3, #21
 800deee:	d510      	bpl.n	800df12 <_scanf_float+0x31e>
 800def0:	455e      	cmp	r6, fp
 800def2:	f67f aebf 	bls.w	800dc74 <_scanf_float+0x80>
 800def6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800defa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800defe:	463a      	mov	r2, r7
 800df00:	4640      	mov	r0, r8
 800df02:	4798      	blx	r3
 800df04:	6923      	ldr	r3, [r4, #16]
 800df06:	3b01      	subs	r3, #1
 800df08:	6123      	str	r3, [r4, #16]
 800df0a:	e7f1      	b.n	800def0 <_scanf_float+0x2fc>
 800df0c:	46aa      	mov	sl, r5
 800df0e:	9602      	str	r6, [sp, #8]
 800df10:	e7df      	b.n	800ded2 <_scanf_float+0x2de>
 800df12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800df16:	6923      	ldr	r3, [r4, #16]
 800df18:	2965      	cmp	r1, #101	; 0x65
 800df1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800df1e:	f106 35ff 	add.w	r5, r6, #4294967295
 800df22:	6123      	str	r3, [r4, #16]
 800df24:	d00c      	beq.n	800df40 <_scanf_float+0x34c>
 800df26:	2945      	cmp	r1, #69	; 0x45
 800df28:	d00a      	beq.n	800df40 <_scanf_float+0x34c>
 800df2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df2e:	463a      	mov	r2, r7
 800df30:	4640      	mov	r0, r8
 800df32:	4798      	blx	r3
 800df34:	6923      	ldr	r3, [r4, #16]
 800df36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	1eb5      	subs	r5, r6, #2
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df44:	463a      	mov	r2, r7
 800df46:	4640      	mov	r0, r8
 800df48:	4798      	blx	r3
 800df4a:	462e      	mov	r6, r5
 800df4c:	6825      	ldr	r5, [r4, #0]
 800df4e:	f015 0510 	ands.w	r5, r5, #16
 800df52:	d158      	bne.n	800e006 <_scanf_float+0x412>
 800df54:	7035      	strb	r5, [r6, #0]
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800df5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df60:	d11c      	bne.n	800df9c <_scanf_float+0x3a8>
 800df62:	9b01      	ldr	r3, [sp, #4]
 800df64:	454b      	cmp	r3, r9
 800df66:	eba3 0209 	sub.w	r2, r3, r9
 800df6a:	d124      	bne.n	800dfb6 <_scanf_float+0x3c2>
 800df6c:	2200      	movs	r2, #0
 800df6e:	4659      	mov	r1, fp
 800df70:	4640      	mov	r0, r8
 800df72:	f000 ff63 	bl	800ee3c <_strtod_r>
 800df76:	9b03      	ldr	r3, [sp, #12]
 800df78:	6821      	ldr	r1, [r4, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f011 0f02 	tst.w	r1, #2
 800df80:	ec57 6b10 	vmov	r6, r7, d0
 800df84:	f103 0204 	add.w	r2, r3, #4
 800df88:	d020      	beq.n	800dfcc <_scanf_float+0x3d8>
 800df8a:	9903      	ldr	r1, [sp, #12]
 800df8c:	600a      	str	r2, [r1, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	e9c3 6700 	strd	r6, r7, [r3]
 800df94:	68e3      	ldr	r3, [r4, #12]
 800df96:	3301      	adds	r3, #1
 800df98:	60e3      	str	r3, [r4, #12]
 800df9a:	e66c      	b.n	800dc76 <_scanf_float+0x82>
 800df9c:	9b04      	ldr	r3, [sp, #16]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0e4      	beq.n	800df6c <_scanf_float+0x378>
 800dfa2:	9905      	ldr	r1, [sp, #20]
 800dfa4:	230a      	movs	r3, #10
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	3101      	adds	r1, #1
 800dfaa:	4640      	mov	r0, r8
 800dfac:	f000 ffd0 	bl	800ef50 <_strtol_r>
 800dfb0:	9b04      	ldr	r3, [sp, #16]
 800dfb2:	9e05      	ldr	r6, [sp, #20]
 800dfb4:	1ac2      	subs	r2, r0, r3
 800dfb6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dfba:	429e      	cmp	r6, r3
 800dfbc:	bf28      	it	cs
 800dfbe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dfc2:	4912      	ldr	r1, [pc, #72]	; (800e00c <_scanf_float+0x418>)
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f000 f87f 	bl	800e0c8 <siprintf>
 800dfca:	e7cf      	b.n	800df6c <_scanf_float+0x378>
 800dfcc:	f011 0f04 	tst.w	r1, #4
 800dfd0:	9903      	ldr	r1, [sp, #12]
 800dfd2:	600a      	str	r2, [r1, #0]
 800dfd4:	d1db      	bne.n	800df8e <_scanf_float+0x39a>
 800dfd6:	f8d3 8000 	ldr.w	r8, [r3]
 800dfda:	ee10 2a10 	vmov	r2, s0
 800dfde:	ee10 0a10 	vmov	r0, s0
 800dfe2:	463b      	mov	r3, r7
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	f7f2 fdc1 	bl	8000b6c <__aeabi_dcmpun>
 800dfea:	b128      	cbz	r0, 800dff8 <_scanf_float+0x404>
 800dfec:	4808      	ldr	r0, [pc, #32]	; (800e010 <_scanf_float+0x41c>)
 800dfee:	f000 f821 	bl	800e034 <nanf>
 800dff2:	ed88 0a00 	vstr	s0, [r8]
 800dff6:	e7cd      	b.n	800df94 <_scanf_float+0x3a0>
 800dff8:	4630      	mov	r0, r6
 800dffa:	4639      	mov	r1, r7
 800dffc:	f7f2 fe14 	bl	8000c28 <__aeabi_d2f>
 800e000:	f8c8 0000 	str.w	r0, [r8]
 800e004:	e7c6      	b.n	800df94 <_scanf_float+0x3a0>
 800e006:	2500      	movs	r5, #0
 800e008:	e635      	b.n	800dc76 <_scanf_float+0x82>
 800e00a:	bf00      	nop
 800e00c:	08012876 	.word	0x08012876
 800e010:	08012cab 	.word	0x08012cab

0800e014 <_sbrk_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	4d06      	ldr	r5, [pc, #24]	; (800e030 <_sbrk_r+0x1c>)
 800e018:	2300      	movs	r3, #0
 800e01a:	4604      	mov	r4, r0
 800e01c:	4608      	mov	r0, r1
 800e01e:	602b      	str	r3, [r5, #0]
 800e020:	f7f7 fc46 	bl	80058b0 <_sbrk>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	d102      	bne.n	800e02e <_sbrk_r+0x1a>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	b103      	cbz	r3, 800e02e <_sbrk_r+0x1a>
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	20000624 	.word	0x20000624

0800e034 <nanf>:
 800e034:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e03c <nanf+0x8>
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	7fc00000 	.word	0x7fc00000

0800e040 <_raise_r>:
 800e040:	291f      	cmp	r1, #31
 800e042:	b538      	push	{r3, r4, r5, lr}
 800e044:	4604      	mov	r4, r0
 800e046:	460d      	mov	r5, r1
 800e048:	d904      	bls.n	800e054 <_raise_r+0x14>
 800e04a:	2316      	movs	r3, #22
 800e04c:	6003      	str	r3, [r0, #0]
 800e04e:	f04f 30ff 	mov.w	r0, #4294967295
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e056:	b112      	cbz	r2, 800e05e <_raise_r+0x1e>
 800e058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e05c:	b94b      	cbnz	r3, 800e072 <_raise_r+0x32>
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f830 	bl	800e0c4 <_getpid_r>
 800e064:	462a      	mov	r2, r5
 800e066:	4601      	mov	r1, r0
 800e068:	4620      	mov	r0, r4
 800e06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06e:	f000 b817 	b.w	800e0a0 <_kill_r>
 800e072:	2b01      	cmp	r3, #1
 800e074:	d00a      	beq.n	800e08c <_raise_r+0x4c>
 800e076:	1c59      	adds	r1, r3, #1
 800e078:	d103      	bne.n	800e082 <_raise_r+0x42>
 800e07a:	2316      	movs	r3, #22
 800e07c:	6003      	str	r3, [r0, #0]
 800e07e:	2001      	movs	r0, #1
 800e080:	e7e7      	b.n	800e052 <_raise_r+0x12>
 800e082:	2400      	movs	r4, #0
 800e084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e088:	4628      	mov	r0, r5
 800e08a:	4798      	blx	r3
 800e08c:	2000      	movs	r0, #0
 800e08e:	e7e0      	b.n	800e052 <_raise_r+0x12>

0800e090 <raise>:
 800e090:	4b02      	ldr	r3, [pc, #8]	; (800e09c <raise+0xc>)
 800e092:	4601      	mov	r1, r0
 800e094:	6818      	ldr	r0, [r3, #0]
 800e096:	f7ff bfd3 	b.w	800e040 <_raise_r>
 800e09a:	bf00      	nop
 800e09c:	2000000c 	.word	0x2000000c

0800e0a0 <_kill_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d07      	ldr	r5, [pc, #28]	; (800e0c0 <_kill_r+0x20>)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	4608      	mov	r0, r1
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	602b      	str	r3, [r5, #0]
 800e0ae:	f7f7 fb77 	bl	80057a0 <_kill>
 800e0b2:	1c43      	adds	r3, r0, #1
 800e0b4:	d102      	bne.n	800e0bc <_kill_r+0x1c>
 800e0b6:	682b      	ldr	r3, [r5, #0]
 800e0b8:	b103      	cbz	r3, 800e0bc <_kill_r+0x1c>
 800e0ba:	6023      	str	r3, [r4, #0]
 800e0bc:	bd38      	pop	{r3, r4, r5, pc}
 800e0be:	bf00      	nop
 800e0c0:	20000624 	.word	0x20000624

0800e0c4 <_getpid_r>:
 800e0c4:	f7f7 bb64 	b.w	8005790 <_getpid>

0800e0c8 <siprintf>:
 800e0c8:	b40e      	push	{r1, r2, r3}
 800e0ca:	b500      	push	{lr}
 800e0cc:	b09c      	sub	sp, #112	; 0x70
 800e0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800e0d0:	9002      	str	r0, [sp, #8]
 800e0d2:	9006      	str	r0, [sp, #24]
 800e0d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0d8:	4809      	ldr	r0, [pc, #36]	; (800e100 <siprintf+0x38>)
 800e0da:	9107      	str	r1, [sp, #28]
 800e0dc:	9104      	str	r1, [sp, #16]
 800e0de:	4909      	ldr	r1, [pc, #36]	; (800e104 <siprintf+0x3c>)
 800e0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e4:	9105      	str	r1, [sp, #20]
 800e0e6:	6800      	ldr	r0, [r0, #0]
 800e0e8:	9301      	str	r3, [sp, #4]
 800e0ea:	a902      	add	r1, sp, #8
 800e0ec:	f002 fe96 	bl	8010e1c <_svfiprintf_r>
 800e0f0:	9b02      	ldr	r3, [sp, #8]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	701a      	strb	r2, [r3, #0]
 800e0f6:	b01c      	add	sp, #112	; 0x70
 800e0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0fc:	b003      	add	sp, #12
 800e0fe:	4770      	bx	lr
 800e100:	2000000c 	.word	0x2000000c
 800e104:	ffff0208 	.word	0xffff0208

0800e108 <siscanf>:
 800e108:	b40e      	push	{r1, r2, r3}
 800e10a:	b510      	push	{r4, lr}
 800e10c:	b09f      	sub	sp, #124	; 0x7c
 800e10e:	ac21      	add	r4, sp, #132	; 0x84
 800e110:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e114:	f854 2b04 	ldr.w	r2, [r4], #4
 800e118:	9201      	str	r2, [sp, #4]
 800e11a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e11e:	9004      	str	r0, [sp, #16]
 800e120:	9008      	str	r0, [sp, #32]
 800e122:	f7f2 f8c5 	bl	80002b0 <strlen>
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <siscanf+0x50>)
 800e128:	9005      	str	r0, [sp, #20]
 800e12a:	9009      	str	r0, [sp, #36]	; 0x24
 800e12c:	930d      	str	r3, [sp, #52]	; 0x34
 800e12e:	480b      	ldr	r0, [pc, #44]	; (800e15c <siscanf+0x54>)
 800e130:	9a01      	ldr	r2, [sp, #4]
 800e132:	6800      	ldr	r0, [r0, #0]
 800e134:	9403      	str	r4, [sp, #12]
 800e136:	2300      	movs	r3, #0
 800e138:	9311      	str	r3, [sp, #68]	; 0x44
 800e13a:	9316      	str	r3, [sp, #88]	; 0x58
 800e13c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e140:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e144:	a904      	add	r1, sp, #16
 800e146:	4623      	mov	r3, r4
 800e148:	f002 ffc2 	bl	80110d0 <__ssvfiscanf_r>
 800e14c:	b01f      	add	sp, #124	; 0x7c
 800e14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e152:	b003      	add	sp, #12
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	0800e183 	.word	0x0800e183
 800e15c:	2000000c 	.word	0x2000000c

0800e160 <__sread>:
 800e160:	b510      	push	{r4, lr}
 800e162:	460c      	mov	r4, r1
 800e164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e168:	f003 fa76 	bl	8011658 <_read_r>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	bfab      	itete	ge
 800e170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e172:	89a3      	ldrhlt	r3, [r4, #12]
 800e174:	181b      	addge	r3, r3, r0
 800e176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e17a:	bfac      	ite	ge
 800e17c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e17e:	81a3      	strhlt	r3, [r4, #12]
 800e180:	bd10      	pop	{r4, pc}

0800e182 <__seofread>:
 800e182:	2000      	movs	r0, #0
 800e184:	4770      	bx	lr

0800e186 <__swrite>:
 800e186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e18a:	461f      	mov	r7, r3
 800e18c:	898b      	ldrh	r3, [r1, #12]
 800e18e:	05db      	lsls	r3, r3, #23
 800e190:	4605      	mov	r5, r0
 800e192:	460c      	mov	r4, r1
 800e194:	4616      	mov	r6, r2
 800e196:	d505      	bpl.n	800e1a4 <__swrite+0x1e>
 800e198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e19c:	2302      	movs	r3, #2
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f002 f8e6 	bl	8010370 <_lseek_r>
 800e1a4:	89a3      	ldrh	r3, [r4, #12]
 800e1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1ae:	81a3      	strh	r3, [r4, #12]
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ba:	f000 becb 	b.w	800ef54 <_write_r>

0800e1be <__sseek>:
 800e1be:	b510      	push	{r4, lr}
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c6:	f002 f8d3 	bl	8010370 <_lseek_r>
 800e1ca:	1c43      	adds	r3, r0, #1
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	bf15      	itete	ne
 800e1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1da:	81a3      	strheq	r3, [r4, #12]
 800e1dc:	bf18      	it	ne
 800e1de:	81a3      	strhne	r3, [r4, #12]
 800e1e0:	bd10      	pop	{r4, pc}

0800e1e2 <__sclose>:
 800e1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e6:	f000 bec7 	b.w	800ef78 <_close_r>

0800e1ea <sulp>:
 800e1ea:	b570      	push	{r4, r5, r6, lr}
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	ec45 4b10 	vmov	d0, r4, r5
 800e1f4:	4616      	mov	r6, r2
 800e1f6:	f002 fc57 	bl	8010aa8 <__ulp>
 800e1fa:	ec51 0b10 	vmov	r0, r1, d0
 800e1fe:	b17e      	cbz	r6, 800e220 <sulp+0x36>
 800e200:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dd09      	ble.n	800e220 <sulp+0x36>
 800e20c:	051b      	lsls	r3, r3, #20
 800e20e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e212:	2400      	movs	r4, #0
 800e214:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	f7f2 fa0c 	bl	8000638 <__aeabi_dmul>
 800e220:	bd70      	pop	{r4, r5, r6, pc}
 800e222:	0000      	movs	r0, r0
 800e224:	0000      	movs	r0, r0
	...

0800e228 <_strtod_l>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	b0a3      	sub	sp, #140	; 0x8c
 800e22e:	461f      	mov	r7, r3
 800e230:	2300      	movs	r3, #0
 800e232:	931e      	str	r3, [sp, #120]	; 0x78
 800e234:	4ba4      	ldr	r3, [pc, #656]	; (800e4c8 <_strtod_l+0x2a0>)
 800e236:	9219      	str	r2, [sp, #100]	; 0x64
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	9307      	str	r3, [sp, #28]
 800e23c:	4604      	mov	r4, r0
 800e23e:	4618      	mov	r0, r3
 800e240:	4688      	mov	r8, r1
 800e242:	f7f2 f835 	bl	80002b0 <strlen>
 800e246:	f04f 0a00 	mov.w	sl, #0
 800e24a:	4605      	mov	r5, r0
 800e24c:	f04f 0b00 	mov.w	fp, #0
 800e250:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e256:	781a      	ldrb	r2, [r3, #0]
 800e258:	2a2b      	cmp	r2, #43	; 0x2b
 800e25a:	d04c      	beq.n	800e2f6 <_strtod_l+0xce>
 800e25c:	d839      	bhi.n	800e2d2 <_strtod_l+0xaa>
 800e25e:	2a0d      	cmp	r2, #13
 800e260:	d832      	bhi.n	800e2c8 <_strtod_l+0xa0>
 800e262:	2a08      	cmp	r2, #8
 800e264:	d832      	bhi.n	800e2cc <_strtod_l+0xa4>
 800e266:	2a00      	cmp	r2, #0
 800e268:	d03c      	beq.n	800e2e4 <_strtod_l+0xbc>
 800e26a:	2300      	movs	r3, #0
 800e26c:	930e      	str	r3, [sp, #56]	; 0x38
 800e26e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e270:	7833      	ldrb	r3, [r6, #0]
 800e272:	2b30      	cmp	r3, #48	; 0x30
 800e274:	f040 80b4 	bne.w	800e3e0 <_strtod_l+0x1b8>
 800e278:	7873      	ldrb	r3, [r6, #1]
 800e27a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e27e:	2b58      	cmp	r3, #88	; 0x58
 800e280:	d16c      	bne.n	800e35c <_strtod_l+0x134>
 800e282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	ab1e      	add	r3, sp, #120	; 0x78
 800e288:	9702      	str	r7, [sp, #8]
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	4a8f      	ldr	r2, [pc, #572]	; (800e4cc <_strtod_l+0x2a4>)
 800e28e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e290:	a91d      	add	r1, sp, #116	; 0x74
 800e292:	4620      	mov	r0, r4
 800e294:	f001 fd60 	bl	800fd58 <__gethex>
 800e298:	f010 0707 	ands.w	r7, r0, #7
 800e29c:	4605      	mov	r5, r0
 800e29e:	d005      	beq.n	800e2ac <_strtod_l+0x84>
 800e2a0:	2f06      	cmp	r7, #6
 800e2a2:	d12a      	bne.n	800e2fa <_strtod_l+0xd2>
 800e2a4:	3601      	adds	r6, #1
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	961d      	str	r6, [sp, #116]	; 0x74
 800e2aa:	930e      	str	r3, [sp, #56]	; 0x38
 800e2ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 8596 	bne.w	800ede0 <_strtod_l+0xbb8>
 800e2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2b6:	b1db      	cbz	r3, 800e2f0 <_strtod_l+0xc8>
 800e2b8:	4652      	mov	r2, sl
 800e2ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2be:	ec43 2b10 	vmov	d0, r2, r3
 800e2c2:	b023      	add	sp, #140	; 0x8c
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	2a20      	cmp	r2, #32
 800e2ca:	d1ce      	bne.n	800e26a <_strtod_l+0x42>
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	931d      	str	r3, [sp, #116]	; 0x74
 800e2d0:	e7c0      	b.n	800e254 <_strtod_l+0x2c>
 800e2d2:	2a2d      	cmp	r2, #45	; 0x2d
 800e2d4:	d1c9      	bne.n	800e26a <_strtod_l+0x42>
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	920e      	str	r2, [sp, #56]	; 0x38
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	921d      	str	r2, [sp, #116]	; 0x74
 800e2de:	785b      	ldrb	r3, [r3, #1]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1c4      	bne.n	800e26e <_strtod_l+0x46>
 800e2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f040 8576 	bne.w	800eddc <_strtod_l+0xbb4>
 800e2f0:	4652      	mov	r2, sl
 800e2f2:	465b      	mov	r3, fp
 800e2f4:	e7e3      	b.n	800e2be <_strtod_l+0x96>
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	e7ee      	b.n	800e2d8 <_strtod_l+0xb0>
 800e2fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2fc:	b13a      	cbz	r2, 800e30e <_strtod_l+0xe6>
 800e2fe:	2135      	movs	r1, #53	; 0x35
 800e300:	a820      	add	r0, sp, #128	; 0x80
 800e302:	f002 fcdc 	bl	8010cbe <__copybits>
 800e306:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e308:	4620      	mov	r0, r4
 800e30a:	f002 f8a1 	bl	8010450 <_Bfree>
 800e30e:	3f01      	subs	r7, #1
 800e310:	2f05      	cmp	r7, #5
 800e312:	d807      	bhi.n	800e324 <_strtod_l+0xfc>
 800e314:	e8df f007 	tbb	[pc, r7]
 800e318:	1d180b0e 	.word	0x1d180b0e
 800e31c:	030e      	.short	0x030e
 800e31e:	f04f 0b00 	mov.w	fp, #0
 800e322:	46da      	mov	sl, fp
 800e324:	0728      	lsls	r0, r5, #28
 800e326:	d5c1      	bpl.n	800e2ac <_strtod_l+0x84>
 800e328:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e32c:	e7be      	b.n	800e2ac <_strtod_l+0x84>
 800e32e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e332:	e7f7      	b.n	800e324 <_strtod_l+0xfc>
 800e334:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e338:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e33a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e33e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e342:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e346:	e7ed      	b.n	800e324 <_strtod_l+0xfc>
 800e348:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e4d0 <_strtod_l+0x2a8>
 800e34c:	f04f 0a00 	mov.w	sl, #0
 800e350:	e7e8      	b.n	800e324 <_strtod_l+0xfc>
 800e352:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e356:	f04f 3aff 	mov.w	sl, #4294967295
 800e35a:	e7e3      	b.n	800e324 <_strtod_l+0xfc>
 800e35c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	921d      	str	r2, [sp, #116]	; 0x74
 800e362:	785b      	ldrb	r3, [r3, #1]
 800e364:	2b30      	cmp	r3, #48	; 0x30
 800e366:	d0f9      	beq.n	800e35c <_strtod_l+0x134>
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d09f      	beq.n	800e2ac <_strtod_l+0x84>
 800e36c:	2301      	movs	r3, #1
 800e36e:	f04f 0900 	mov.w	r9, #0
 800e372:	9304      	str	r3, [sp, #16]
 800e374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e376:	930a      	str	r3, [sp, #40]	; 0x28
 800e378:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e37c:	464f      	mov	r7, r9
 800e37e:	220a      	movs	r2, #10
 800e380:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e382:	7806      	ldrb	r6, [r0, #0]
 800e384:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e388:	b2d9      	uxtb	r1, r3
 800e38a:	2909      	cmp	r1, #9
 800e38c:	d92a      	bls.n	800e3e4 <_strtod_l+0x1bc>
 800e38e:	9907      	ldr	r1, [sp, #28]
 800e390:	462a      	mov	r2, r5
 800e392:	f003 f9ad 	bl	80116f0 <strncmp>
 800e396:	b398      	cbz	r0, 800e400 <_strtod_l+0x1d8>
 800e398:	2000      	movs	r0, #0
 800e39a:	4633      	mov	r3, r6
 800e39c:	463d      	mov	r5, r7
 800e39e:	9007      	str	r0, [sp, #28]
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	2b65      	cmp	r3, #101	; 0x65
 800e3a4:	d001      	beq.n	800e3aa <_strtod_l+0x182>
 800e3a6:	2b45      	cmp	r3, #69	; 0x45
 800e3a8:	d118      	bne.n	800e3dc <_strtod_l+0x1b4>
 800e3aa:	b91d      	cbnz	r5, 800e3b4 <_strtod_l+0x18c>
 800e3ac:	9b04      	ldr	r3, [sp, #16]
 800e3ae:	4303      	orrs	r3, r0
 800e3b0:	d098      	beq.n	800e2e4 <_strtod_l+0xbc>
 800e3b2:	2500      	movs	r5, #0
 800e3b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e3b8:	f108 0301 	add.w	r3, r8, #1
 800e3bc:	931d      	str	r3, [sp, #116]	; 0x74
 800e3be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3c2:	2b2b      	cmp	r3, #43	; 0x2b
 800e3c4:	d075      	beq.n	800e4b2 <_strtod_l+0x28a>
 800e3c6:	2b2d      	cmp	r3, #45	; 0x2d
 800e3c8:	d07b      	beq.n	800e4c2 <_strtod_l+0x29a>
 800e3ca:	f04f 0c00 	mov.w	ip, #0
 800e3ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e3d2:	2909      	cmp	r1, #9
 800e3d4:	f240 8082 	bls.w	800e4dc <_strtod_l+0x2b4>
 800e3d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e3dc:	2600      	movs	r6, #0
 800e3de:	e09d      	b.n	800e51c <_strtod_l+0x2f4>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e7c4      	b.n	800e36e <_strtod_l+0x146>
 800e3e4:	2f08      	cmp	r7, #8
 800e3e6:	bfd8      	it	le
 800e3e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e3ea:	f100 0001 	add.w	r0, r0, #1
 800e3ee:	bfda      	itte	le
 800e3f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e3f4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e3f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e3fa:	3701      	adds	r7, #1
 800e3fc:	901d      	str	r0, [sp, #116]	; 0x74
 800e3fe:	e7bf      	b.n	800e380 <_strtod_l+0x158>
 800e400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e402:	195a      	adds	r2, r3, r5
 800e404:	921d      	str	r2, [sp, #116]	; 0x74
 800e406:	5d5b      	ldrb	r3, [r3, r5]
 800e408:	2f00      	cmp	r7, #0
 800e40a:	d037      	beq.n	800e47c <_strtod_l+0x254>
 800e40c:	9007      	str	r0, [sp, #28]
 800e40e:	463d      	mov	r5, r7
 800e410:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e414:	2a09      	cmp	r2, #9
 800e416:	d912      	bls.n	800e43e <_strtod_l+0x216>
 800e418:	2201      	movs	r2, #1
 800e41a:	e7c2      	b.n	800e3a2 <_strtod_l+0x17a>
 800e41c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	921d      	str	r2, [sp, #116]	; 0x74
 800e422:	785b      	ldrb	r3, [r3, #1]
 800e424:	3001      	adds	r0, #1
 800e426:	2b30      	cmp	r3, #48	; 0x30
 800e428:	d0f8      	beq.n	800e41c <_strtod_l+0x1f4>
 800e42a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e42e:	2a08      	cmp	r2, #8
 800e430:	f200 84db 	bhi.w	800edea <_strtod_l+0xbc2>
 800e434:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e436:	9007      	str	r0, [sp, #28]
 800e438:	2000      	movs	r0, #0
 800e43a:	920a      	str	r2, [sp, #40]	; 0x28
 800e43c:	4605      	mov	r5, r0
 800e43e:	3b30      	subs	r3, #48	; 0x30
 800e440:	f100 0201 	add.w	r2, r0, #1
 800e444:	d014      	beq.n	800e470 <_strtod_l+0x248>
 800e446:	9907      	ldr	r1, [sp, #28]
 800e448:	4411      	add	r1, r2
 800e44a:	9107      	str	r1, [sp, #28]
 800e44c:	462a      	mov	r2, r5
 800e44e:	eb00 0e05 	add.w	lr, r0, r5
 800e452:	210a      	movs	r1, #10
 800e454:	4572      	cmp	r2, lr
 800e456:	d113      	bne.n	800e480 <_strtod_l+0x258>
 800e458:	182a      	adds	r2, r5, r0
 800e45a:	2a08      	cmp	r2, #8
 800e45c:	f105 0501 	add.w	r5, r5, #1
 800e460:	4405      	add	r5, r0
 800e462:	dc1c      	bgt.n	800e49e <_strtod_l+0x276>
 800e464:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e466:	220a      	movs	r2, #10
 800e468:	fb02 3301 	mla	r3, r2, r1, r3
 800e46c:	9309      	str	r3, [sp, #36]	; 0x24
 800e46e:	2200      	movs	r2, #0
 800e470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e472:	1c59      	adds	r1, r3, #1
 800e474:	911d      	str	r1, [sp, #116]	; 0x74
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	4610      	mov	r0, r2
 800e47a:	e7c9      	b.n	800e410 <_strtod_l+0x1e8>
 800e47c:	4638      	mov	r0, r7
 800e47e:	e7d2      	b.n	800e426 <_strtod_l+0x1fe>
 800e480:	2a08      	cmp	r2, #8
 800e482:	dc04      	bgt.n	800e48e <_strtod_l+0x266>
 800e484:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e486:	434e      	muls	r6, r1
 800e488:	9609      	str	r6, [sp, #36]	; 0x24
 800e48a:	3201      	adds	r2, #1
 800e48c:	e7e2      	b.n	800e454 <_strtod_l+0x22c>
 800e48e:	f102 0c01 	add.w	ip, r2, #1
 800e492:	f1bc 0f10 	cmp.w	ip, #16
 800e496:	bfd8      	it	le
 800e498:	fb01 f909 	mulle.w	r9, r1, r9
 800e49c:	e7f5      	b.n	800e48a <_strtod_l+0x262>
 800e49e:	2d10      	cmp	r5, #16
 800e4a0:	bfdc      	itt	le
 800e4a2:	220a      	movle	r2, #10
 800e4a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e4a8:	e7e1      	b.n	800e46e <_strtod_l+0x246>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9307      	str	r3, [sp, #28]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	e77c      	b.n	800e3ac <_strtod_l+0x184>
 800e4b2:	f04f 0c00 	mov.w	ip, #0
 800e4b6:	f108 0302 	add.w	r3, r8, #2
 800e4ba:	931d      	str	r3, [sp, #116]	; 0x74
 800e4bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e4c0:	e785      	b.n	800e3ce <_strtod_l+0x1a6>
 800e4c2:	f04f 0c01 	mov.w	ip, #1
 800e4c6:	e7f6      	b.n	800e4b6 <_strtod_l+0x28e>
 800e4c8:	08012ad0 	.word	0x08012ad0
 800e4cc:	0801287c 	.word	0x0801287c
 800e4d0:	7ff00000 	.word	0x7ff00000
 800e4d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4d6:	1c59      	adds	r1, r3, #1
 800e4d8:	911d      	str	r1, [sp, #116]	; 0x74
 800e4da:	785b      	ldrb	r3, [r3, #1]
 800e4dc:	2b30      	cmp	r3, #48	; 0x30
 800e4de:	d0f9      	beq.n	800e4d4 <_strtod_l+0x2ac>
 800e4e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e4e4:	2908      	cmp	r1, #8
 800e4e6:	f63f af79 	bhi.w	800e3dc <_strtod_l+0x1b4>
 800e4ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e4ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4f0:	9308      	str	r3, [sp, #32]
 800e4f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4f4:	1c59      	adds	r1, r3, #1
 800e4f6:	911d      	str	r1, [sp, #116]	; 0x74
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e4fe:	2e09      	cmp	r6, #9
 800e500:	d937      	bls.n	800e572 <_strtod_l+0x34a>
 800e502:	9e08      	ldr	r6, [sp, #32]
 800e504:	1b89      	subs	r1, r1, r6
 800e506:	2908      	cmp	r1, #8
 800e508:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e50c:	dc02      	bgt.n	800e514 <_strtod_l+0x2ec>
 800e50e:	4576      	cmp	r6, lr
 800e510:	bfa8      	it	ge
 800e512:	4676      	movge	r6, lr
 800e514:	f1bc 0f00 	cmp.w	ip, #0
 800e518:	d000      	beq.n	800e51c <_strtod_l+0x2f4>
 800e51a:	4276      	negs	r6, r6
 800e51c:	2d00      	cmp	r5, #0
 800e51e:	d14f      	bne.n	800e5c0 <_strtod_l+0x398>
 800e520:	9904      	ldr	r1, [sp, #16]
 800e522:	4301      	orrs	r1, r0
 800e524:	f47f aec2 	bne.w	800e2ac <_strtod_l+0x84>
 800e528:	2a00      	cmp	r2, #0
 800e52a:	f47f aedb 	bne.w	800e2e4 <_strtod_l+0xbc>
 800e52e:	2b69      	cmp	r3, #105	; 0x69
 800e530:	d027      	beq.n	800e582 <_strtod_l+0x35a>
 800e532:	dc24      	bgt.n	800e57e <_strtod_l+0x356>
 800e534:	2b49      	cmp	r3, #73	; 0x49
 800e536:	d024      	beq.n	800e582 <_strtod_l+0x35a>
 800e538:	2b4e      	cmp	r3, #78	; 0x4e
 800e53a:	f47f aed3 	bne.w	800e2e4 <_strtod_l+0xbc>
 800e53e:	499e      	ldr	r1, [pc, #632]	; (800e7b8 <_strtod_l+0x590>)
 800e540:	a81d      	add	r0, sp, #116	; 0x74
 800e542:	f001 fe61 	bl	8010208 <__match>
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f aecc 	beq.w	800e2e4 <_strtod_l+0xbc>
 800e54c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b28      	cmp	r3, #40	; 0x28
 800e552:	d12d      	bne.n	800e5b0 <_strtod_l+0x388>
 800e554:	4999      	ldr	r1, [pc, #612]	; (800e7bc <_strtod_l+0x594>)
 800e556:	aa20      	add	r2, sp, #128	; 0x80
 800e558:	a81d      	add	r0, sp, #116	; 0x74
 800e55a:	f001 fe69 	bl	8010230 <__hexnan>
 800e55e:	2805      	cmp	r0, #5
 800e560:	d126      	bne.n	800e5b0 <_strtod_l+0x388>
 800e562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e564:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e568:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e56c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e570:	e69c      	b.n	800e2ac <_strtod_l+0x84>
 800e572:	210a      	movs	r1, #10
 800e574:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e578:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e57c:	e7b9      	b.n	800e4f2 <_strtod_l+0x2ca>
 800e57e:	2b6e      	cmp	r3, #110	; 0x6e
 800e580:	e7db      	b.n	800e53a <_strtod_l+0x312>
 800e582:	498f      	ldr	r1, [pc, #572]	; (800e7c0 <_strtod_l+0x598>)
 800e584:	a81d      	add	r0, sp, #116	; 0x74
 800e586:	f001 fe3f 	bl	8010208 <__match>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f43f aeaa 	beq.w	800e2e4 <_strtod_l+0xbc>
 800e590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e592:	498c      	ldr	r1, [pc, #560]	; (800e7c4 <_strtod_l+0x59c>)
 800e594:	3b01      	subs	r3, #1
 800e596:	a81d      	add	r0, sp, #116	; 0x74
 800e598:	931d      	str	r3, [sp, #116]	; 0x74
 800e59a:	f001 fe35 	bl	8010208 <__match>
 800e59e:	b910      	cbnz	r0, 800e5a6 <_strtod_l+0x37e>
 800e5a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	931d      	str	r3, [sp, #116]	; 0x74
 800e5a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e7d4 <_strtod_l+0x5ac>
 800e5aa:	f04f 0a00 	mov.w	sl, #0
 800e5ae:	e67d      	b.n	800e2ac <_strtod_l+0x84>
 800e5b0:	4885      	ldr	r0, [pc, #532]	; (800e7c8 <_strtod_l+0x5a0>)
 800e5b2:	f7fe fcd5 	bl	800cf60 <nan>
 800e5b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e5ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e5be:	e675      	b.n	800e2ac <_strtod_l+0x84>
 800e5c0:	9b07      	ldr	r3, [sp, #28]
 800e5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5c4:	1af3      	subs	r3, r6, r3
 800e5c6:	2f00      	cmp	r7, #0
 800e5c8:	bf08      	it	eq
 800e5ca:	462f      	moveq	r7, r5
 800e5cc:	2d10      	cmp	r5, #16
 800e5ce:	9308      	str	r3, [sp, #32]
 800e5d0:	46a8      	mov	r8, r5
 800e5d2:	bfa8      	it	ge
 800e5d4:	f04f 0810 	movge.w	r8, #16
 800e5d8:	f7f1 ffb4 	bl	8000544 <__aeabi_ui2d>
 800e5dc:	2d09      	cmp	r5, #9
 800e5de:	4682      	mov	sl, r0
 800e5e0:	468b      	mov	fp, r1
 800e5e2:	dd13      	ble.n	800e60c <_strtod_l+0x3e4>
 800e5e4:	4b79      	ldr	r3, [pc, #484]	; (800e7cc <_strtod_l+0x5a4>)
 800e5e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e5ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e5ee:	f7f2 f823 	bl	8000638 <__aeabi_dmul>
 800e5f2:	4682      	mov	sl, r0
 800e5f4:	4648      	mov	r0, r9
 800e5f6:	468b      	mov	fp, r1
 800e5f8:	f7f1 ffa4 	bl	8000544 <__aeabi_ui2d>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	4650      	mov	r0, sl
 800e602:	4659      	mov	r1, fp
 800e604:	f7f1 fe62 	bl	80002cc <__adddf3>
 800e608:	4682      	mov	sl, r0
 800e60a:	468b      	mov	fp, r1
 800e60c:	2d0f      	cmp	r5, #15
 800e60e:	dc38      	bgt.n	800e682 <_strtod_l+0x45a>
 800e610:	9b08      	ldr	r3, [sp, #32]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f43f ae4a 	beq.w	800e2ac <_strtod_l+0x84>
 800e618:	dd24      	ble.n	800e664 <_strtod_l+0x43c>
 800e61a:	2b16      	cmp	r3, #22
 800e61c:	dc0b      	bgt.n	800e636 <_strtod_l+0x40e>
 800e61e:	4d6b      	ldr	r5, [pc, #428]	; (800e7cc <_strtod_l+0x5a4>)
 800e620:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e624:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e628:	4652      	mov	r2, sl
 800e62a:	465b      	mov	r3, fp
 800e62c:	f7f2 f804 	bl	8000638 <__aeabi_dmul>
 800e630:	4682      	mov	sl, r0
 800e632:	468b      	mov	fp, r1
 800e634:	e63a      	b.n	800e2ac <_strtod_l+0x84>
 800e636:	9a08      	ldr	r2, [sp, #32]
 800e638:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e63c:	4293      	cmp	r3, r2
 800e63e:	db20      	blt.n	800e682 <_strtod_l+0x45a>
 800e640:	4c62      	ldr	r4, [pc, #392]	; (800e7cc <_strtod_l+0x5a4>)
 800e642:	f1c5 050f 	rsb	r5, r5, #15
 800e646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e64a:	4652      	mov	r2, sl
 800e64c:	465b      	mov	r3, fp
 800e64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e652:	f7f1 fff1 	bl	8000638 <__aeabi_dmul>
 800e656:	9b08      	ldr	r3, [sp, #32]
 800e658:	1b5d      	subs	r5, r3, r5
 800e65a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e65e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e662:	e7e3      	b.n	800e62c <_strtod_l+0x404>
 800e664:	9b08      	ldr	r3, [sp, #32]
 800e666:	3316      	adds	r3, #22
 800e668:	db0b      	blt.n	800e682 <_strtod_l+0x45a>
 800e66a:	9b07      	ldr	r3, [sp, #28]
 800e66c:	4a57      	ldr	r2, [pc, #348]	; (800e7cc <_strtod_l+0x5a4>)
 800e66e:	1b9e      	subs	r6, r3, r6
 800e670:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e674:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e678:	4650      	mov	r0, sl
 800e67a:	4659      	mov	r1, fp
 800e67c:	f7f2 f906 	bl	800088c <__aeabi_ddiv>
 800e680:	e7d6      	b.n	800e630 <_strtod_l+0x408>
 800e682:	9b08      	ldr	r3, [sp, #32]
 800e684:	eba5 0808 	sub.w	r8, r5, r8
 800e688:	4498      	add	r8, r3
 800e68a:	f1b8 0f00 	cmp.w	r8, #0
 800e68e:	dd71      	ble.n	800e774 <_strtod_l+0x54c>
 800e690:	f018 030f 	ands.w	r3, r8, #15
 800e694:	d00a      	beq.n	800e6ac <_strtod_l+0x484>
 800e696:	494d      	ldr	r1, [pc, #308]	; (800e7cc <_strtod_l+0x5a4>)
 800e698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e69c:	4652      	mov	r2, sl
 800e69e:	465b      	mov	r3, fp
 800e6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a4:	f7f1 ffc8 	bl	8000638 <__aeabi_dmul>
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	468b      	mov	fp, r1
 800e6ac:	f038 080f 	bics.w	r8, r8, #15
 800e6b0:	d04d      	beq.n	800e74e <_strtod_l+0x526>
 800e6b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6b6:	dd22      	ble.n	800e6fe <_strtod_l+0x4d6>
 800e6b8:	2500      	movs	r5, #0
 800e6ba:	462e      	mov	r6, r5
 800e6bc:	9509      	str	r5, [sp, #36]	; 0x24
 800e6be:	9507      	str	r5, [sp, #28]
 800e6c0:	2322      	movs	r3, #34	; 0x22
 800e6c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e7d4 <_strtod_l+0x5ac>
 800e6c6:	6023      	str	r3, [r4, #0]
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f43f adec 	beq.w	800e2ac <_strtod_l+0x84>
 800e6d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f001 feba 	bl	8010450 <_Bfree>
 800e6dc:	9907      	ldr	r1, [sp, #28]
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f001 feb6 	bl	8010450 <_Bfree>
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f001 feb2 	bl	8010450 <_Bfree>
 800e6ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f001 feae 	bl	8010450 <_Bfree>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f001 feaa 	bl	8010450 <_Bfree>
 800e6fc:	e5d6      	b.n	800e2ac <_strtod_l+0x84>
 800e6fe:	2300      	movs	r3, #0
 800e700:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e704:	4650      	mov	r0, sl
 800e706:	4659      	mov	r1, fp
 800e708:	4699      	mov	r9, r3
 800e70a:	f1b8 0f01 	cmp.w	r8, #1
 800e70e:	dc21      	bgt.n	800e754 <_strtod_l+0x52c>
 800e710:	b10b      	cbz	r3, 800e716 <_strtod_l+0x4ee>
 800e712:	4682      	mov	sl, r0
 800e714:	468b      	mov	fp, r1
 800e716:	4b2e      	ldr	r3, [pc, #184]	; (800e7d0 <_strtod_l+0x5a8>)
 800e718:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e71c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e720:	4652      	mov	r2, sl
 800e722:	465b      	mov	r3, fp
 800e724:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e728:	f7f1 ff86 	bl	8000638 <__aeabi_dmul>
 800e72c:	4b29      	ldr	r3, [pc, #164]	; (800e7d4 <_strtod_l+0x5ac>)
 800e72e:	460a      	mov	r2, r1
 800e730:	400b      	ands	r3, r1
 800e732:	4929      	ldr	r1, [pc, #164]	; (800e7d8 <_strtod_l+0x5b0>)
 800e734:	428b      	cmp	r3, r1
 800e736:	4682      	mov	sl, r0
 800e738:	d8be      	bhi.n	800e6b8 <_strtod_l+0x490>
 800e73a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e73e:	428b      	cmp	r3, r1
 800e740:	bf86      	itte	hi
 800e742:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e7dc <_strtod_l+0x5b4>
 800e746:	f04f 3aff 	movhi.w	sl, #4294967295
 800e74a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e74e:	2300      	movs	r3, #0
 800e750:	9304      	str	r3, [sp, #16]
 800e752:	e081      	b.n	800e858 <_strtod_l+0x630>
 800e754:	f018 0f01 	tst.w	r8, #1
 800e758:	d007      	beq.n	800e76a <_strtod_l+0x542>
 800e75a:	4b1d      	ldr	r3, [pc, #116]	; (800e7d0 <_strtod_l+0x5a8>)
 800e75c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	f7f1 ff68 	bl	8000638 <__aeabi_dmul>
 800e768:	2301      	movs	r3, #1
 800e76a:	f109 0901 	add.w	r9, r9, #1
 800e76e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e772:	e7ca      	b.n	800e70a <_strtod_l+0x4e2>
 800e774:	d0eb      	beq.n	800e74e <_strtod_l+0x526>
 800e776:	f1c8 0800 	rsb	r8, r8, #0
 800e77a:	f018 020f 	ands.w	r2, r8, #15
 800e77e:	d00a      	beq.n	800e796 <_strtod_l+0x56e>
 800e780:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <_strtod_l+0x5a4>)
 800e782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e786:	4650      	mov	r0, sl
 800e788:	4659      	mov	r1, fp
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f7f2 f87d 	bl	800088c <__aeabi_ddiv>
 800e792:	4682      	mov	sl, r0
 800e794:	468b      	mov	fp, r1
 800e796:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e79a:	d0d8      	beq.n	800e74e <_strtod_l+0x526>
 800e79c:	f1b8 0f1f 	cmp.w	r8, #31
 800e7a0:	dd1e      	ble.n	800e7e0 <_strtod_l+0x5b8>
 800e7a2:	2500      	movs	r5, #0
 800e7a4:	462e      	mov	r6, r5
 800e7a6:	9509      	str	r5, [sp, #36]	; 0x24
 800e7a8:	9507      	str	r5, [sp, #28]
 800e7aa:	2322      	movs	r3, #34	; 0x22
 800e7ac:	f04f 0a00 	mov.w	sl, #0
 800e7b0:	f04f 0b00 	mov.w	fp, #0
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	e789      	b.n	800e6cc <_strtod_l+0x4a4>
 800e7b8:	08012851 	.word	0x08012851
 800e7bc:	08012890 	.word	0x08012890
 800e7c0:	08012849 	.word	0x08012849
 800e7c4:	080129d4 	.word	0x080129d4
 800e7c8:	08012cab 	.word	0x08012cab
 800e7cc:	08012b70 	.word	0x08012b70
 800e7d0:	08012b48 	.word	0x08012b48
 800e7d4:	7ff00000 	.word	0x7ff00000
 800e7d8:	7ca00000 	.word	0x7ca00000
 800e7dc:	7fefffff 	.word	0x7fefffff
 800e7e0:	f018 0310 	ands.w	r3, r8, #16
 800e7e4:	bf18      	it	ne
 800e7e6:	236a      	movne	r3, #106	; 0x6a
 800e7e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eba0 <_strtod_l+0x978>
 800e7ec:	9304      	str	r3, [sp, #16]
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	4659      	mov	r1, fp
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f018 0f01 	tst.w	r8, #1
 800e7f8:	d004      	beq.n	800e804 <_strtod_l+0x5dc>
 800e7fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7fe:	f7f1 ff1b 	bl	8000638 <__aeabi_dmul>
 800e802:	2301      	movs	r3, #1
 800e804:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e808:	f109 0908 	add.w	r9, r9, #8
 800e80c:	d1f2      	bne.n	800e7f4 <_strtod_l+0x5cc>
 800e80e:	b10b      	cbz	r3, 800e814 <_strtod_l+0x5ec>
 800e810:	4682      	mov	sl, r0
 800e812:	468b      	mov	fp, r1
 800e814:	9b04      	ldr	r3, [sp, #16]
 800e816:	b1bb      	cbz	r3, 800e848 <_strtod_l+0x620>
 800e818:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e81c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e820:	2b00      	cmp	r3, #0
 800e822:	4659      	mov	r1, fp
 800e824:	dd10      	ble.n	800e848 <_strtod_l+0x620>
 800e826:	2b1f      	cmp	r3, #31
 800e828:	f340 8128 	ble.w	800ea7c <_strtod_l+0x854>
 800e82c:	2b34      	cmp	r3, #52	; 0x34
 800e82e:	bfde      	ittt	le
 800e830:	3b20      	suble	r3, #32
 800e832:	f04f 32ff 	movle.w	r2, #4294967295
 800e836:	fa02 f303 	lslle.w	r3, r2, r3
 800e83a:	f04f 0a00 	mov.w	sl, #0
 800e83e:	bfcc      	ite	gt
 800e840:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e844:	ea03 0b01 	andle.w	fp, r3, r1
 800e848:	2200      	movs	r2, #0
 800e84a:	2300      	movs	r3, #0
 800e84c:	4650      	mov	r0, sl
 800e84e:	4659      	mov	r1, fp
 800e850:	f7f2 f95a 	bl	8000b08 <__aeabi_dcmpeq>
 800e854:	2800      	cmp	r0, #0
 800e856:	d1a4      	bne.n	800e7a2 <_strtod_l+0x57a>
 800e858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e85e:	462b      	mov	r3, r5
 800e860:	463a      	mov	r2, r7
 800e862:	4620      	mov	r0, r4
 800e864:	f001 fe60 	bl	8010528 <__s2b>
 800e868:	9009      	str	r0, [sp, #36]	; 0x24
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f43f af24 	beq.w	800e6b8 <_strtod_l+0x490>
 800e870:	9b07      	ldr	r3, [sp, #28]
 800e872:	1b9e      	subs	r6, r3, r6
 800e874:	9b08      	ldr	r3, [sp, #32]
 800e876:	2b00      	cmp	r3, #0
 800e878:	bfb4      	ite	lt
 800e87a:	4633      	movlt	r3, r6
 800e87c:	2300      	movge	r3, #0
 800e87e:	9310      	str	r3, [sp, #64]	; 0x40
 800e880:	9b08      	ldr	r3, [sp, #32]
 800e882:	2500      	movs	r5, #0
 800e884:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e888:	9318      	str	r3, [sp, #96]	; 0x60
 800e88a:	462e      	mov	r6, r5
 800e88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e88e:	4620      	mov	r0, r4
 800e890:	6859      	ldr	r1, [r3, #4]
 800e892:	f001 fd9d 	bl	80103d0 <_Balloc>
 800e896:	9007      	str	r0, [sp, #28]
 800e898:	2800      	cmp	r0, #0
 800e89a:	f43f af11 	beq.w	800e6c0 <_strtod_l+0x498>
 800e89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a0:	691a      	ldr	r2, [r3, #16]
 800e8a2:	3202      	adds	r2, #2
 800e8a4:	f103 010c 	add.w	r1, r3, #12
 800e8a8:	0092      	lsls	r2, r2, #2
 800e8aa:	300c      	adds	r0, #12
 800e8ac:	f7fe fc5e 	bl	800d16c <memcpy>
 800e8b0:	ec4b ab10 	vmov	d0, sl, fp
 800e8b4:	aa20      	add	r2, sp, #128	; 0x80
 800e8b6:	a91f      	add	r1, sp, #124	; 0x7c
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e8be:	f002 f96f 	bl	8010ba0 <__d2b>
 800e8c2:	901e      	str	r0, [sp, #120]	; 0x78
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	f43f aefb 	beq.w	800e6c0 <_strtod_l+0x498>
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f001 fec5 	bl	801065c <__i2b>
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	f43f aef3 	beq.w	800e6c0 <_strtod_l+0x498>
 800e8da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e8dc:	9904      	ldr	r1, [sp, #16]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	bfab      	itete	ge
 800e8e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e8e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e8e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e8e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e8ec:	bfac      	ite	ge
 800e8ee:	eb03 0902 	addge.w	r9, r3, r2
 800e8f2:	1ad7      	sublt	r7, r2, r3
 800e8f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e8f6:	eba3 0801 	sub.w	r8, r3, r1
 800e8fa:	4490      	add	r8, r2
 800e8fc:	4ba3      	ldr	r3, [pc, #652]	; (800eb8c <_strtod_l+0x964>)
 800e8fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800e902:	4598      	cmp	r8, r3
 800e904:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e908:	f280 80cc 	bge.w	800eaa4 <_strtod_l+0x87c>
 800e90c:	eba3 0308 	sub.w	r3, r3, r8
 800e910:	2b1f      	cmp	r3, #31
 800e912:	eba2 0203 	sub.w	r2, r2, r3
 800e916:	f04f 0101 	mov.w	r1, #1
 800e91a:	f300 80b6 	bgt.w	800ea8a <_strtod_l+0x862>
 800e91e:	fa01 f303 	lsl.w	r3, r1, r3
 800e922:	9311      	str	r3, [sp, #68]	; 0x44
 800e924:	2300      	movs	r3, #0
 800e926:	930c      	str	r3, [sp, #48]	; 0x30
 800e928:	eb09 0802 	add.w	r8, r9, r2
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	45c1      	cmp	r9, r8
 800e930:	4417      	add	r7, r2
 800e932:	441f      	add	r7, r3
 800e934:	464b      	mov	r3, r9
 800e936:	bfa8      	it	ge
 800e938:	4643      	movge	r3, r8
 800e93a:	42bb      	cmp	r3, r7
 800e93c:	bfa8      	it	ge
 800e93e:	463b      	movge	r3, r7
 800e940:	2b00      	cmp	r3, #0
 800e942:	bfc2      	ittt	gt
 800e944:	eba8 0803 	subgt.w	r8, r8, r3
 800e948:	1aff      	subgt	r7, r7, r3
 800e94a:	eba9 0903 	subgt.w	r9, r9, r3
 800e94e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e950:	2b00      	cmp	r3, #0
 800e952:	dd17      	ble.n	800e984 <_strtod_l+0x75c>
 800e954:	4631      	mov	r1, r6
 800e956:	461a      	mov	r2, r3
 800e958:	4620      	mov	r0, r4
 800e95a:	f001 ff3b 	bl	80107d4 <__pow5mult>
 800e95e:	4606      	mov	r6, r0
 800e960:	2800      	cmp	r0, #0
 800e962:	f43f aead 	beq.w	800e6c0 <_strtod_l+0x498>
 800e966:	4601      	mov	r1, r0
 800e968:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e96a:	4620      	mov	r0, r4
 800e96c:	f001 fe8c 	bl	8010688 <__multiply>
 800e970:	900f      	str	r0, [sp, #60]	; 0x3c
 800e972:	2800      	cmp	r0, #0
 800e974:	f43f aea4 	beq.w	800e6c0 <_strtod_l+0x498>
 800e978:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e97a:	4620      	mov	r0, r4
 800e97c:	f001 fd68 	bl	8010450 <_Bfree>
 800e980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e982:	931e      	str	r3, [sp, #120]	; 0x78
 800e984:	f1b8 0f00 	cmp.w	r8, #0
 800e988:	f300 8091 	bgt.w	800eaae <_strtod_l+0x886>
 800e98c:	9b08      	ldr	r3, [sp, #32]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	dd08      	ble.n	800e9a4 <_strtod_l+0x77c>
 800e992:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e994:	9907      	ldr	r1, [sp, #28]
 800e996:	4620      	mov	r0, r4
 800e998:	f001 ff1c 	bl	80107d4 <__pow5mult>
 800e99c:	9007      	str	r0, [sp, #28]
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f ae8e 	beq.w	800e6c0 <_strtod_l+0x498>
 800e9a4:	2f00      	cmp	r7, #0
 800e9a6:	dd08      	ble.n	800e9ba <_strtod_l+0x792>
 800e9a8:	9907      	ldr	r1, [sp, #28]
 800e9aa:	463a      	mov	r2, r7
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f001 ff6b 	bl	8010888 <__lshift>
 800e9b2:	9007      	str	r0, [sp, #28]
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	f43f ae83 	beq.w	800e6c0 <_strtod_l+0x498>
 800e9ba:	f1b9 0f00 	cmp.w	r9, #0
 800e9be:	dd08      	ble.n	800e9d2 <_strtod_l+0x7aa>
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	464a      	mov	r2, r9
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f001 ff5f 	bl	8010888 <__lshift>
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	f43f ae77 	beq.w	800e6c0 <_strtod_l+0x498>
 800e9d2:	9a07      	ldr	r2, [sp, #28]
 800e9d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f001 ffde 	bl	8010998 <__mdiff>
 800e9dc:	4605      	mov	r5, r0
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f43f ae6e 	beq.w	800e6c0 <_strtod_l+0x498>
 800e9e4:	68c3      	ldr	r3, [r0, #12]
 800e9e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60c3      	str	r3, [r0, #12]
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	f001 ffb7 	bl	8010960 <__mcmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	da65      	bge.n	800eac2 <_strtod_l+0x89a>
 800e9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9f8:	ea53 030a 	orrs.w	r3, r3, sl
 800e9fc:	f040 8087 	bne.w	800eb0e <_strtod_l+0x8e6>
 800ea00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 8082 	bne.w	800eb0e <_strtod_l+0x8e6>
 800ea0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea0e:	0d1b      	lsrs	r3, r3, #20
 800ea10:	051b      	lsls	r3, r3, #20
 800ea12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea16:	d97a      	bls.n	800eb0e <_strtod_l+0x8e6>
 800ea18:	696b      	ldr	r3, [r5, #20]
 800ea1a:	b913      	cbnz	r3, 800ea22 <_strtod_l+0x7fa>
 800ea1c:	692b      	ldr	r3, [r5, #16]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	dd75      	ble.n	800eb0e <_strtod_l+0x8e6>
 800ea22:	4629      	mov	r1, r5
 800ea24:	2201      	movs	r2, #1
 800ea26:	4620      	mov	r0, r4
 800ea28:	f001 ff2e 	bl	8010888 <__lshift>
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4605      	mov	r5, r0
 800ea30:	f001 ff96 	bl	8010960 <__mcmp>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	dd6a      	ble.n	800eb0e <_strtod_l+0x8e6>
 800ea38:	9904      	ldr	r1, [sp, #16]
 800ea3a:	4a55      	ldr	r2, [pc, #340]	; (800eb90 <_strtod_l+0x968>)
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	f000 8085 	beq.w	800eb4e <_strtod_l+0x926>
 800ea44:	ea02 010b 	and.w	r1, r2, fp
 800ea48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea4c:	dc7f      	bgt.n	800eb4e <_strtod_l+0x926>
 800ea4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea52:	f77f aeaa 	ble.w	800e7aa <_strtod_l+0x582>
 800ea56:	4a4f      	ldr	r2, [pc, #316]	; (800eb94 <_strtod_l+0x96c>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ea5e:	4650      	mov	r0, sl
 800ea60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ea64:	4659      	mov	r1, fp
 800ea66:	f7f1 fde7 	bl	8000638 <__aeabi_dmul>
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4303      	orrs	r3, r0
 800ea6e:	bf08      	it	eq
 800ea70:	2322      	moveq	r3, #34	; 0x22
 800ea72:	4682      	mov	sl, r0
 800ea74:	468b      	mov	fp, r1
 800ea76:	bf08      	it	eq
 800ea78:	6023      	streq	r3, [r4, #0]
 800ea7a:	e62b      	b.n	800e6d4 <_strtod_l+0x4ac>
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	fa02 f303 	lsl.w	r3, r2, r3
 800ea84:	ea03 0a0a 	and.w	sl, r3, sl
 800ea88:	e6de      	b.n	800e848 <_strtod_l+0x620>
 800ea8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ea8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ea92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ea96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ea9a:	fa01 f308 	lsl.w	r3, r1, r8
 800ea9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eaa0:	9111      	str	r1, [sp, #68]	; 0x44
 800eaa2:	e741      	b.n	800e928 <_strtod_l+0x700>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930c      	str	r3, [sp, #48]	; 0x30
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	9311      	str	r3, [sp, #68]	; 0x44
 800eaac:	e73c      	b.n	800e928 <_strtod_l+0x700>
 800eaae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eab0:	4642      	mov	r2, r8
 800eab2:	4620      	mov	r0, r4
 800eab4:	f001 fee8 	bl	8010888 <__lshift>
 800eab8:	901e      	str	r0, [sp, #120]	; 0x78
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f47f af66 	bne.w	800e98c <_strtod_l+0x764>
 800eac0:	e5fe      	b.n	800e6c0 <_strtod_l+0x498>
 800eac2:	465f      	mov	r7, fp
 800eac4:	d16e      	bne.n	800eba4 <_strtod_l+0x97c>
 800eac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eacc:	b342      	cbz	r2, 800eb20 <_strtod_l+0x8f8>
 800eace:	4a32      	ldr	r2, [pc, #200]	; (800eb98 <_strtod_l+0x970>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d128      	bne.n	800eb26 <_strtod_l+0x8fe>
 800ead4:	9b04      	ldr	r3, [sp, #16]
 800ead6:	4650      	mov	r0, sl
 800ead8:	b1eb      	cbz	r3, 800eb16 <_strtod_l+0x8ee>
 800eada:	4a2d      	ldr	r2, [pc, #180]	; (800eb90 <_strtod_l+0x968>)
 800eadc:	403a      	ands	r2, r7
 800eade:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eae2:	f04f 31ff 	mov.w	r1, #4294967295
 800eae6:	d819      	bhi.n	800eb1c <_strtod_l+0x8f4>
 800eae8:	0d12      	lsrs	r2, r2, #20
 800eaea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eaee:	fa01 f303 	lsl.w	r3, r1, r3
 800eaf2:	4298      	cmp	r0, r3
 800eaf4:	d117      	bne.n	800eb26 <_strtod_l+0x8fe>
 800eaf6:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <_strtod_l+0x974>)
 800eaf8:	429f      	cmp	r7, r3
 800eafa:	d102      	bne.n	800eb02 <_strtod_l+0x8da>
 800eafc:	3001      	adds	r0, #1
 800eafe:	f43f addf 	beq.w	800e6c0 <_strtod_l+0x498>
 800eb02:	4b23      	ldr	r3, [pc, #140]	; (800eb90 <_strtod_l+0x968>)
 800eb04:	403b      	ands	r3, r7
 800eb06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb0a:	f04f 0a00 	mov.w	sl, #0
 800eb0e:	9b04      	ldr	r3, [sp, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1a0      	bne.n	800ea56 <_strtod_l+0x82e>
 800eb14:	e5de      	b.n	800e6d4 <_strtod_l+0x4ac>
 800eb16:	f04f 33ff 	mov.w	r3, #4294967295
 800eb1a:	e7ea      	b.n	800eaf2 <_strtod_l+0x8ca>
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	e7e8      	b.n	800eaf2 <_strtod_l+0x8ca>
 800eb20:	ea53 030a 	orrs.w	r3, r3, sl
 800eb24:	d088      	beq.n	800ea38 <_strtod_l+0x810>
 800eb26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb28:	b1db      	cbz	r3, 800eb62 <_strtod_l+0x93a>
 800eb2a:	423b      	tst	r3, r7
 800eb2c:	d0ef      	beq.n	800eb0e <_strtod_l+0x8e6>
 800eb2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb30:	9a04      	ldr	r2, [sp, #16]
 800eb32:	4650      	mov	r0, sl
 800eb34:	4659      	mov	r1, fp
 800eb36:	b1c3      	cbz	r3, 800eb6a <_strtod_l+0x942>
 800eb38:	f7ff fb57 	bl	800e1ea <sulp>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb44:	f7f1 fbc2 	bl	80002cc <__adddf3>
 800eb48:	4682      	mov	sl, r0
 800eb4a:	468b      	mov	fp, r1
 800eb4c:	e7df      	b.n	800eb0e <_strtod_l+0x8e6>
 800eb4e:	4013      	ands	r3, r2
 800eb50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb5c:	f04f 3aff 	mov.w	sl, #4294967295
 800eb60:	e7d5      	b.n	800eb0e <_strtod_l+0x8e6>
 800eb62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb64:	ea13 0f0a 	tst.w	r3, sl
 800eb68:	e7e0      	b.n	800eb2c <_strtod_l+0x904>
 800eb6a:	f7ff fb3e 	bl	800e1ea <sulp>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb76:	f7f1 fba7 	bl	80002c8 <__aeabi_dsub>
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	4682      	mov	sl, r0
 800eb80:	468b      	mov	fp, r1
 800eb82:	f7f1 ffc1 	bl	8000b08 <__aeabi_dcmpeq>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d0c1      	beq.n	800eb0e <_strtod_l+0x8e6>
 800eb8a:	e60e      	b.n	800e7aa <_strtod_l+0x582>
 800eb8c:	fffffc02 	.word	0xfffffc02
 800eb90:	7ff00000 	.word	0x7ff00000
 800eb94:	39500000 	.word	0x39500000
 800eb98:	000fffff 	.word	0x000fffff
 800eb9c:	7fefffff 	.word	0x7fefffff
 800eba0:	080128a8 	.word	0x080128a8
 800eba4:	4631      	mov	r1, r6
 800eba6:	4628      	mov	r0, r5
 800eba8:	f002 f856 	bl	8010c58 <__ratio>
 800ebac:	ec59 8b10 	vmov	r8, r9, d0
 800ebb0:	ee10 0a10 	vmov	r0, s0
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebba:	4649      	mov	r1, r9
 800ebbc:	f7f1 ffb8 	bl	8000b30 <__aeabi_dcmple>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d07c      	beq.n	800ecbe <_strtod_l+0xa96>
 800ebc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d04c      	beq.n	800ec64 <_strtod_l+0xa3c>
 800ebca:	4b95      	ldr	r3, [pc, #596]	; (800ee20 <_strtod_l+0xbf8>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ebd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ee20 <_strtod_l+0xbf8>
 800ebd6:	f04f 0800 	mov.w	r8, #0
 800ebda:	4b92      	ldr	r3, [pc, #584]	; (800ee24 <_strtod_l+0xbfc>)
 800ebdc:	403b      	ands	r3, r7
 800ebde:	9311      	str	r3, [sp, #68]	; 0x44
 800ebe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ebe2:	4b91      	ldr	r3, [pc, #580]	; (800ee28 <_strtod_l+0xc00>)
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	f040 80b2 	bne.w	800ed4e <_strtod_l+0xb26>
 800ebea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ebee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebf2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ebf6:	ec4b ab10 	vmov	d0, sl, fp
 800ebfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ebfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec02:	f001 ff51 	bl	8010aa8 <__ulp>
 800ec06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec0a:	ec53 2b10 	vmov	r2, r3, d0
 800ec0e:	f7f1 fd13 	bl	8000638 <__aeabi_dmul>
 800ec12:	4652      	mov	r2, sl
 800ec14:	465b      	mov	r3, fp
 800ec16:	f7f1 fb59 	bl	80002cc <__adddf3>
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4981      	ldr	r1, [pc, #516]	; (800ee24 <_strtod_l+0xbfc>)
 800ec1e:	4a83      	ldr	r2, [pc, #524]	; (800ee2c <_strtod_l+0xc04>)
 800ec20:	4019      	ands	r1, r3
 800ec22:	4291      	cmp	r1, r2
 800ec24:	4682      	mov	sl, r0
 800ec26:	d95e      	bls.n	800ece6 <_strtod_l+0xabe>
 800ec28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d103      	bne.n	800ec3a <_strtod_l+0xa12>
 800ec32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec34:	3301      	adds	r3, #1
 800ec36:	f43f ad43 	beq.w	800e6c0 <_strtod_l+0x498>
 800ec3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ee38 <_strtod_l+0xc10>
 800ec3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ec42:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec44:	4620      	mov	r0, r4
 800ec46:	f001 fc03 	bl	8010450 <_Bfree>
 800ec4a:	9907      	ldr	r1, [sp, #28]
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f001 fbff 	bl	8010450 <_Bfree>
 800ec52:	4631      	mov	r1, r6
 800ec54:	4620      	mov	r0, r4
 800ec56:	f001 fbfb 	bl	8010450 <_Bfree>
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f001 fbf7 	bl	8010450 <_Bfree>
 800ec62:	e613      	b.n	800e88c <_strtod_l+0x664>
 800ec64:	f1ba 0f00 	cmp.w	sl, #0
 800ec68:	d11b      	bne.n	800eca2 <_strtod_l+0xa7a>
 800ec6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec6e:	b9f3      	cbnz	r3, 800ecae <_strtod_l+0xa86>
 800ec70:	4b6b      	ldr	r3, [pc, #428]	; (800ee20 <_strtod_l+0xbf8>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800ec7c:	b9d0      	cbnz	r0, 800ecb4 <_strtod_l+0xa8c>
 800ec7e:	4640      	mov	r0, r8
 800ec80:	4649      	mov	r1, r9
 800ec82:	4b6b      	ldr	r3, [pc, #428]	; (800ee30 <_strtod_l+0xc08>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	f7f1 fcd7 	bl	8000638 <__aeabi_dmul>
 800ec8a:	4680      	mov	r8, r0
 800ec8c:	4689      	mov	r9, r1
 800ec8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ec96:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ec9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eca0:	e79b      	b.n	800ebda <_strtod_l+0x9b2>
 800eca2:	f1ba 0f01 	cmp.w	sl, #1
 800eca6:	d102      	bne.n	800ecae <_strtod_l+0xa86>
 800eca8:	2f00      	cmp	r7, #0
 800ecaa:	f43f ad7e 	beq.w	800e7aa <_strtod_l+0x582>
 800ecae:	4b61      	ldr	r3, [pc, #388]	; (800ee34 <_strtod_l+0xc0c>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	e78c      	b.n	800ebce <_strtod_l+0x9a6>
 800ecb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ee30 <_strtod_l+0xc08>
 800ecb8:	f04f 0800 	mov.w	r8, #0
 800ecbc:	e7e7      	b.n	800ec8e <_strtod_l+0xa66>
 800ecbe:	4b5c      	ldr	r3, [pc, #368]	; (800ee30 <_strtod_l+0xc08>)
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f7f1 fcb7 	bl	8000638 <__aeabi_dmul>
 800ecca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eccc:	4680      	mov	r8, r0
 800ecce:	4689      	mov	r9, r1
 800ecd0:	b933      	cbnz	r3, 800ece0 <_strtod_l+0xab8>
 800ecd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecd6:	9012      	str	r0, [sp, #72]	; 0x48
 800ecd8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ecde:	e7dd      	b.n	800ec9c <_strtod_l+0xa74>
 800ece0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ece4:	e7f9      	b.n	800ecda <_strtod_l+0xab2>
 800ece6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ecea:	9b04      	ldr	r3, [sp, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1a8      	bne.n	800ec42 <_strtod_l+0xa1a>
 800ecf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ecf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ecf6:	0d1b      	lsrs	r3, r3, #20
 800ecf8:	051b      	lsls	r3, r3, #20
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d1a1      	bne.n	800ec42 <_strtod_l+0xa1a>
 800ecfe:	4640      	mov	r0, r8
 800ed00:	4649      	mov	r1, r9
 800ed02:	f7f1 fff9 	bl	8000cf8 <__aeabi_d2lz>
 800ed06:	f7f1 fc69 	bl	80005dc <__aeabi_l2d>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4649      	mov	r1, r9
 800ed12:	f7f1 fad9 	bl	80002c8 <__aeabi_dsub>
 800ed16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1c:	ea43 030a 	orr.w	r3, r3, sl
 800ed20:	4313      	orrs	r3, r2
 800ed22:	4680      	mov	r8, r0
 800ed24:	4689      	mov	r9, r1
 800ed26:	d053      	beq.n	800edd0 <_strtod_l+0xba8>
 800ed28:	a335      	add	r3, pc, #212	; (adr r3, 800ee00 <_strtod_l+0xbd8>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	f7f1 fef5 	bl	8000b1c <__aeabi_dcmplt>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	f47f acce 	bne.w	800e6d4 <_strtod_l+0x4ac>
 800ed38:	a333      	add	r3, pc, #204	; (adr r3, 800ee08 <_strtod_l+0xbe0>)
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	4640      	mov	r0, r8
 800ed40:	4649      	mov	r1, r9
 800ed42:	f7f1 ff09 	bl	8000b58 <__aeabi_dcmpgt>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	f43f af7b 	beq.w	800ec42 <_strtod_l+0xa1a>
 800ed4c:	e4c2      	b.n	800e6d4 <_strtod_l+0x4ac>
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	b333      	cbz	r3, 800eda0 <_strtod_l+0xb78>
 800ed52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed58:	d822      	bhi.n	800eda0 <_strtod_l+0xb78>
 800ed5a:	a32d      	add	r3, pc, #180	; (adr r3, 800ee10 <_strtod_l+0xbe8>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	4640      	mov	r0, r8
 800ed62:	4649      	mov	r1, r9
 800ed64:	f7f1 fee4 	bl	8000b30 <__aeabi_dcmple>
 800ed68:	b1a0      	cbz	r0, 800ed94 <_strtod_l+0xb6c>
 800ed6a:	4649      	mov	r1, r9
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	f7f1 ff3b 	bl	8000be8 <__aeabi_d2uiz>
 800ed72:	2801      	cmp	r0, #1
 800ed74:	bf38      	it	cc
 800ed76:	2001      	movcc	r0, #1
 800ed78:	f7f1 fbe4 	bl	8000544 <__aeabi_ui2d>
 800ed7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed7e:	4680      	mov	r8, r0
 800ed80:	4689      	mov	r9, r1
 800ed82:	bb13      	cbnz	r3, 800edca <_strtod_l+0xba2>
 800ed84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed88:	9014      	str	r0, [sp, #80]	; 0x50
 800ed8a:	9315      	str	r3, [sp, #84]	; 0x54
 800ed8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ed94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ed9c:	1a9b      	subs	r3, r3, r2
 800ed9e:	930d      	str	r3, [sp, #52]	; 0x34
 800eda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eda4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eda8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800edac:	f001 fe7c 	bl	8010aa8 <__ulp>
 800edb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edb4:	ec53 2b10 	vmov	r2, r3, d0
 800edb8:	f7f1 fc3e 	bl	8000638 <__aeabi_dmul>
 800edbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800edc0:	f7f1 fa84 	bl	80002cc <__adddf3>
 800edc4:	4682      	mov	sl, r0
 800edc6:	468b      	mov	fp, r1
 800edc8:	e78f      	b.n	800ecea <_strtod_l+0xac2>
 800edca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800edce:	e7dd      	b.n	800ed8c <_strtod_l+0xb64>
 800edd0:	a311      	add	r3, pc, #68	; (adr r3, 800ee18 <_strtod_l+0xbf0>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fea1 	bl	8000b1c <__aeabi_dcmplt>
 800edda:	e7b4      	b.n	800ed46 <_strtod_l+0xb1e>
 800eddc:	2300      	movs	r3, #0
 800edde:	930e      	str	r3, [sp, #56]	; 0x38
 800ede0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ede2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	f7ff ba65 	b.w	800e2b4 <_strtod_l+0x8c>
 800edea:	2b65      	cmp	r3, #101	; 0x65
 800edec:	f43f ab5d 	beq.w	800e4aa <_strtod_l+0x282>
 800edf0:	2b45      	cmp	r3, #69	; 0x45
 800edf2:	f43f ab5a 	beq.w	800e4aa <_strtod_l+0x282>
 800edf6:	2201      	movs	r2, #1
 800edf8:	f7ff bb92 	b.w	800e520 <_strtod_l+0x2f8>
 800edfc:	f3af 8000 	nop.w
 800ee00:	94a03595 	.word	0x94a03595
 800ee04:	3fdfffff 	.word	0x3fdfffff
 800ee08:	35afe535 	.word	0x35afe535
 800ee0c:	3fe00000 	.word	0x3fe00000
 800ee10:	ffc00000 	.word	0xffc00000
 800ee14:	41dfffff 	.word	0x41dfffff
 800ee18:	94a03595 	.word	0x94a03595
 800ee1c:	3fcfffff 	.word	0x3fcfffff
 800ee20:	3ff00000 	.word	0x3ff00000
 800ee24:	7ff00000 	.word	0x7ff00000
 800ee28:	7fe00000 	.word	0x7fe00000
 800ee2c:	7c9fffff 	.word	0x7c9fffff
 800ee30:	3fe00000 	.word	0x3fe00000
 800ee34:	bff00000 	.word	0xbff00000
 800ee38:	7fefffff 	.word	0x7fefffff

0800ee3c <_strtod_r>:
 800ee3c:	4b01      	ldr	r3, [pc, #4]	; (800ee44 <_strtod_r+0x8>)
 800ee3e:	f7ff b9f3 	b.w	800e228 <_strtod_l>
 800ee42:	bf00      	nop
 800ee44:	20000074 	.word	0x20000074

0800ee48 <_strtol_l.isra.0>:
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee4e:	d001      	beq.n	800ee54 <_strtol_l.isra.0+0xc>
 800ee50:	2b24      	cmp	r3, #36	; 0x24
 800ee52:	d906      	bls.n	800ee62 <_strtol_l.isra.0+0x1a>
 800ee54:	f7fe f950 	bl	800d0f8 <__errno>
 800ee58:	2316      	movs	r3, #22
 800ee5a:	6003      	str	r3, [r0, #0]
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee62:	4f3a      	ldr	r7, [pc, #232]	; (800ef4c <_strtol_l.isra.0+0x104>)
 800ee64:	468e      	mov	lr, r1
 800ee66:	4676      	mov	r6, lr
 800ee68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ee6c:	5de5      	ldrb	r5, [r4, r7]
 800ee6e:	f015 0508 	ands.w	r5, r5, #8
 800ee72:	d1f8      	bne.n	800ee66 <_strtol_l.isra.0+0x1e>
 800ee74:	2c2d      	cmp	r4, #45	; 0x2d
 800ee76:	d134      	bne.n	800eee2 <_strtol_l.isra.0+0x9a>
 800ee78:	f89e 4000 	ldrb.w	r4, [lr]
 800ee7c:	f04f 0801 	mov.w	r8, #1
 800ee80:	f106 0e02 	add.w	lr, r6, #2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d05c      	beq.n	800ef42 <_strtol_l.isra.0+0xfa>
 800ee88:	2b10      	cmp	r3, #16
 800ee8a:	d10c      	bne.n	800eea6 <_strtol_l.isra.0+0x5e>
 800ee8c:	2c30      	cmp	r4, #48	; 0x30
 800ee8e:	d10a      	bne.n	800eea6 <_strtol_l.isra.0+0x5e>
 800ee90:	f89e 4000 	ldrb.w	r4, [lr]
 800ee94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ee98:	2c58      	cmp	r4, #88	; 0x58
 800ee9a:	d14d      	bne.n	800ef38 <_strtol_l.isra.0+0xf0>
 800ee9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eea0:	2310      	movs	r3, #16
 800eea2:	f10e 0e02 	add.w	lr, lr, #2
 800eea6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eeaa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eeae:	2600      	movs	r6, #0
 800eeb0:	fbbc f9f3 	udiv	r9, ip, r3
 800eeb4:	4635      	mov	r5, r6
 800eeb6:	fb03 ca19 	mls	sl, r3, r9, ip
 800eeba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800eebe:	2f09      	cmp	r7, #9
 800eec0:	d818      	bhi.n	800eef4 <_strtol_l.isra.0+0xac>
 800eec2:	463c      	mov	r4, r7
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	dd24      	ble.n	800ef12 <_strtol_l.isra.0+0xca>
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	db1f      	blt.n	800ef0c <_strtol_l.isra.0+0xc4>
 800eecc:	45a9      	cmp	r9, r5
 800eece:	d31d      	bcc.n	800ef0c <_strtol_l.isra.0+0xc4>
 800eed0:	d101      	bne.n	800eed6 <_strtol_l.isra.0+0x8e>
 800eed2:	45a2      	cmp	sl, r4
 800eed4:	db1a      	blt.n	800ef0c <_strtol_l.isra.0+0xc4>
 800eed6:	fb05 4503 	mla	r5, r5, r3, r4
 800eeda:	2601      	movs	r6, #1
 800eedc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eee0:	e7eb      	b.n	800eeba <_strtol_l.isra.0+0x72>
 800eee2:	2c2b      	cmp	r4, #43	; 0x2b
 800eee4:	bf08      	it	eq
 800eee6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800eeea:	46a8      	mov	r8, r5
 800eeec:	bf08      	it	eq
 800eeee:	f106 0e02 	addeq.w	lr, r6, #2
 800eef2:	e7c7      	b.n	800ee84 <_strtol_l.isra.0+0x3c>
 800eef4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800eef8:	2f19      	cmp	r7, #25
 800eefa:	d801      	bhi.n	800ef00 <_strtol_l.isra.0+0xb8>
 800eefc:	3c37      	subs	r4, #55	; 0x37
 800eefe:	e7e1      	b.n	800eec4 <_strtol_l.isra.0+0x7c>
 800ef00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ef04:	2f19      	cmp	r7, #25
 800ef06:	d804      	bhi.n	800ef12 <_strtol_l.isra.0+0xca>
 800ef08:	3c57      	subs	r4, #87	; 0x57
 800ef0a:	e7db      	b.n	800eec4 <_strtol_l.isra.0+0x7c>
 800ef0c:	f04f 36ff 	mov.w	r6, #4294967295
 800ef10:	e7e4      	b.n	800eedc <_strtol_l.isra.0+0x94>
 800ef12:	2e00      	cmp	r6, #0
 800ef14:	da05      	bge.n	800ef22 <_strtol_l.isra.0+0xda>
 800ef16:	2322      	movs	r3, #34	; 0x22
 800ef18:	6003      	str	r3, [r0, #0]
 800ef1a:	4665      	mov	r5, ip
 800ef1c:	b942      	cbnz	r2, 800ef30 <_strtol_l.isra.0+0xe8>
 800ef1e:	4628      	mov	r0, r5
 800ef20:	e79d      	b.n	800ee5e <_strtol_l.isra.0+0x16>
 800ef22:	f1b8 0f00 	cmp.w	r8, #0
 800ef26:	d000      	beq.n	800ef2a <_strtol_l.isra.0+0xe2>
 800ef28:	426d      	negs	r5, r5
 800ef2a:	2a00      	cmp	r2, #0
 800ef2c:	d0f7      	beq.n	800ef1e <_strtol_l.isra.0+0xd6>
 800ef2e:	b10e      	cbz	r6, 800ef34 <_strtol_l.isra.0+0xec>
 800ef30:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ef34:	6011      	str	r1, [r2, #0]
 800ef36:	e7f2      	b.n	800ef1e <_strtol_l.isra.0+0xd6>
 800ef38:	2430      	movs	r4, #48	; 0x30
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d1b3      	bne.n	800eea6 <_strtol_l.isra.0+0x5e>
 800ef3e:	2308      	movs	r3, #8
 800ef40:	e7b1      	b.n	800eea6 <_strtol_l.isra.0+0x5e>
 800ef42:	2c30      	cmp	r4, #48	; 0x30
 800ef44:	d0a4      	beq.n	800ee90 <_strtol_l.isra.0+0x48>
 800ef46:	230a      	movs	r3, #10
 800ef48:	e7ad      	b.n	800eea6 <_strtol_l.isra.0+0x5e>
 800ef4a:	bf00      	nop
 800ef4c:	080128d1 	.word	0x080128d1

0800ef50 <_strtol_r>:
 800ef50:	f7ff bf7a 	b.w	800ee48 <_strtol_l.isra.0>

0800ef54 <_write_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4d07      	ldr	r5, [pc, #28]	; (800ef74 <_write_r+0x20>)
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	602a      	str	r2, [r5, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	f7f6 fc53 	bl	800580e <_write>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_write_r+0x1e>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_write_r+0x1e>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	20000624 	.word	0x20000624

0800ef78 <_close_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d06      	ldr	r5, [pc, #24]	; (800ef94 <_close_r+0x1c>)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4608      	mov	r0, r1
 800ef82:	602b      	str	r3, [r5, #0]
 800ef84:	f7f6 fc5f 	bl	8005846 <_close>
 800ef88:	1c43      	adds	r3, r0, #1
 800ef8a:	d102      	bne.n	800ef92 <_close_r+0x1a>
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	b103      	cbz	r3, 800ef92 <_close_r+0x1a>
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	20000624 	.word	0x20000624

0800ef98 <quorem>:
 800ef98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	6903      	ldr	r3, [r0, #16]
 800ef9e:	690c      	ldr	r4, [r1, #16]
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	4607      	mov	r7, r0
 800efa4:	f2c0 8081 	blt.w	800f0aa <quorem+0x112>
 800efa8:	3c01      	subs	r4, #1
 800efaa:	f101 0814 	add.w	r8, r1, #20
 800efae:	f100 0514 	add.w	r5, r0, #20
 800efb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efc0:	3301      	adds	r3, #1
 800efc2:	429a      	cmp	r2, r3
 800efc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800efc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efcc:	fbb2 f6f3 	udiv	r6, r2, r3
 800efd0:	d331      	bcc.n	800f036 <quorem+0x9e>
 800efd2:	f04f 0e00 	mov.w	lr, #0
 800efd6:	4640      	mov	r0, r8
 800efd8:	46ac      	mov	ip, r5
 800efda:	46f2      	mov	sl, lr
 800efdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800efe0:	b293      	uxth	r3, r2
 800efe2:	fb06 e303 	mla	r3, r6, r3, lr
 800efe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800efea:	b29b      	uxth	r3, r3
 800efec:	ebaa 0303 	sub.w	r3, sl, r3
 800eff0:	0c12      	lsrs	r2, r2, #16
 800eff2:	f8dc a000 	ldr.w	sl, [ip]
 800eff6:	fb06 e202 	mla	r2, r6, r2, lr
 800effa:	fa13 f38a 	uxtah	r3, r3, sl
 800effe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f002:	fa1f fa82 	uxth.w	sl, r2
 800f006:	f8dc 2000 	ldr.w	r2, [ip]
 800f00a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f00e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f012:	b29b      	uxth	r3, r3
 800f014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f018:	4581      	cmp	r9, r0
 800f01a:	f84c 3b04 	str.w	r3, [ip], #4
 800f01e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f022:	d2db      	bcs.n	800efdc <quorem+0x44>
 800f024:	f855 300b 	ldr.w	r3, [r5, fp]
 800f028:	b92b      	cbnz	r3, 800f036 <quorem+0x9e>
 800f02a:	9b01      	ldr	r3, [sp, #4]
 800f02c:	3b04      	subs	r3, #4
 800f02e:	429d      	cmp	r5, r3
 800f030:	461a      	mov	r2, r3
 800f032:	d32e      	bcc.n	800f092 <quorem+0xfa>
 800f034:	613c      	str	r4, [r7, #16]
 800f036:	4638      	mov	r0, r7
 800f038:	f001 fc92 	bl	8010960 <__mcmp>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	db24      	blt.n	800f08a <quorem+0xf2>
 800f040:	3601      	adds	r6, #1
 800f042:	4628      	mov	r0, r5
 800f044:	f04f 0c00 	mov.w	ip, #0
 800f048:	f858 2b04 	ldr.w	r2, [r8], #4
 800f04c:	f8d0 e000 	ldr.w	lr, [r0]
 800f050:	b293      	uxth	r3, r2
 800f052:	ebac 0303 	sub.w	r3, ip, r3
 800f056:	0c12      	lsrs	r2, r2, #16
 800f058:	fa13 f38e 	uxtah	r3, r3, lr
 800f05c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f064:	b29b      	uxth	r3, r3
 800f066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f06a:	45c1      	cmp	r9, r8
 800f06c:	f840 3b04 	str.w	r3, [r0], #4
 800f070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f074:	d2e8      	bcs.n	800f048 <quorem+0xb0>
 800f076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f07a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f07e:	b922      	cbnz	r2, 800f08a <quorem+0xf2>
 800f080:	3b04      	subs	r3, #4
 800f082:	429d      	cmp	r5, r3
 800f084:	461a      	mov	r2, r3
 800f086:	d30a      	bcc.n	800f09e <quorem+0x106>
 800f088:	613c      	str	r4, [r7, #16]
 800f08a:	4630      	mov	r0, r6
 800f08c:	b003      	add	sp, #12
 800f08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f092:	6812      	ldr	r2, [r2, #0]
 800f094:	3b04      	subs	r3, #4
 800f096:	2a00      	cmp	r2, #0
 800f098:	d1cc      	bne.n	800f034 <quorem+0x9c>
 800f09a:	3c01      	subs	r4, #1
 800f09c:	e7c7      	b.n	800f02e <quorem+0x96>
 800f09e:	6812      	ldr	r2, [r2, #0]
 800f0a0:	3b04      	subs	r3, #4
 800f0a2:	2a00      	cmp	r2, #0
 800f0a4:	d1f0      	bne.n	800f088 <quorem+0xf0>
 800f0a6:	3c01      	subs	r4, #1
 800f0a8:	e7eb      	b.n	800f082 <quorem+0xea>
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	e7ee      	b.n	800f08c <quorem+0xf4>
	...

0800f0b0 <_dtoa_r>:
 800f0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b4:	ed2d 8b02 	vpush	{d8}
 800f0b8:	ec57 6b10 	vmov	r6, r7, d0
 800f0bc:	b095      	sub	sp, #84	; 0x54
 800f0be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f0c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0c4:	9105      	str	r1, [sp, #20]
 800f0c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0d0:	b975      	cbnz	r5, 800f0f0 <_dtoa_r+0x40>
 800f0d2:	2010      	movs	r0, #16
 800f0d4:	f7fe f83a 	bl	800d14c <malloc>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	6260      	str	r0, [r4, #36]	; 0x24
 800f0dc:	b920      	cbnz	r0, 800f0e8 <_dtoa_r+0x38>
 800f0de:	4bb2      	ldr	r3, [pc, #712]	; (800f3a8 <_dtoa_r+0x2f8>)
 800f0e0:	21ea      	movs	r1, #234	; 0xea
 800f0e2:	48b2      	ldr	r0, [pc, #712]	; (800f3ac <_dtoa_r+0x2fc>)
 800f0e4:	f002 fbdc 	bl	80118a0 <__assert_func>
 800f0e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0ec:	6005      	str	r5, [r0, #0]
 800f0ee:	60c5      	str	r5, [r0, #12]
 800f0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f2:	6819      	ldr	r1, [r3, #0]
 800f0f4:	b151      	cbz	r1, 800f10c <_dtoa_r+0x5c>
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	604a      	str	r2, [r1, #4]
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4093      	lsls	r3, r2
 800f0fe:	608b      	str	r3, [r1, #8]
 800f100:	4620      	mov	r0, r4
 800f102:	f001 f9a5 	bl	8010450 <_Bfree>
 800f106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	1e3b      	subs	r3, r7, #0
 800f10e:	bfb9      	ittee	lt
 800f110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f114:	9303      	strlt	r3, [sp, #12]
 800f116:	2300      	movge	r3, #0
 800f118:	f8c8 3000 	strge.w	r3, [r8]
 800f11c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f120:	4ba3      	ldr	r3, [pc, #652]	; (800f3b0 <_dtoa_r+0x300>)
 800f122:	bfbc      	itt	lt
 800f124:	2201      	movlt	r2, #1
 800f126:	f8c8 2000 	strlt.w	r2, [r8]
 800f12a:	ea33 0309 	bics.w	r3, r3, r9
 800f12e:	d11b      	bne.n	800f168 <_dtoa_r+0xb8>
 800f130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f132:	f242 730f 	movw	r3, #9999	; 0x270f
 800f136:	6013      	str	r3, [r2, #0]
 800f138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f13c:	4333      	orrs	r3, r6
 800f13e:	f000 857a 	beq.w	800fc36 <_dtoa_r+0xb86>
 800f142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f144:	b963      	cbnz	r3, 800f160 <_dtoa_r+0xb0>
 800f146:	4b9b      	ldr	r3, [pc, #620]	; (800f3b4 <_dtoa_r+0x304>)
 800f148:	e024      	b.n	800f194 <_dtoa_r+0xe4>
 800f14a:	4b9b      	ldr	r3, [pc, #620]	; (800f3b8 <_dtoa_r+0x308>)
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	3308      	adds	r3, #8
 800f150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	9800      	ldr	r0, [sp, #0]
 800f156:	b015      	add	sp, #84	; 0x54
 800f158:	ecbd 8b02 	vpop	{d8}
 800f15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f160:	4b94      	ldr	r3, [pc, #592]	; (800f3b4 <_dtoa_r+0x304>)
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	3303      	adds	r3, #3
 800f166:	e7f3      	b.n	800f150 <_dtoa_r+0xa0>
 800f168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f16c:	2200      	movs	r2, #0
 800f16e:	ec51 0b17 	vmov	r0, r1, d7
 800f172:	2300      	movs	r3, #0
 800f174:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f178:	f7f1 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800f17c:	4680      	mov	r8, r0
 800f17e:	b158      	cbz	r0, 800f198 <_dtoa_r+0xe8>
 800f180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f182:	2301      	movs	r3, #1
 800f184:	6013      	str	r3, [r2, #0]
 800f186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8551 	beq.w	800fc30 <_dtoa_r+0xb80>
 800f18e:	488b      	ldr	r0, [pc, #556]	; (800f3bc <_dtoa_r+0x30c>)
 800f190:	6018      	str	r0, [r3, #0]
 800f192:	1e43      	subs	r3, r0, #1
 800f194:	9300      	str	r3, [sp, #0]
 800f196:	e7dd      	b.n	800f154 <_dtoa_r+0xa4>
 800f198:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f19c:	aa12      	add	r2, sp, #72	; 0x48
 800f19e:	a913      	add	r1, sp, #76	; 0x4c
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f001 fcfd 	bl	8010ba0 <__d2b>
 800f1a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1aa:	4683      	mov	fp, r0
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	d07c      	beq.n	800f2aa <_dtoa_r+0x1fa>
 800f1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f1b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f1be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f1c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f1c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1ca:	4b7d      	ldr	r3, [pc, #500]	; (800f3c0 <_dtoa_r+0x310>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	4639      	mov	r1, r7
 800f1d2:	f7f1 f879 	bl	80002c8 <__aeabi_dsub>
 800f1d6:	a36e      	add	r3, pc, #440	; (adr r3, 800f390 <_dtoa_r+0x2e0>)
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f7f1 fa2c 	bl	8000638 <__aeabi_dmul>
 800f1e0:	a36d      	add	r3, pc, #436	; (adr r3, 800f398 <_dtoa_r+0x2e8>)
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 f871 	bl	80002cc <__adddf3>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	460f      	mov	r7, r1
 800f1f0:	f7f1 f9b8 	bl	8000564 <__aeabi_i2d>
 800f1f4:	a36a      	add	r3, pc, #424	; (adr r3, 800f3a0 <_dtoa_r+0x2f0>)
 800f1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fa:	f7f1 fa1d 	bl	8000638 <__aeabi_dmul>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	4630      	mov	r0, r6
 800f204:	4639      	mov	r1, r7
 800f206:	f7f1 f861 	bl	80002cc <__adddf3>
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	f7f1 fcc3 	bl	8000b98 <__aeabi_d2iz>
 800f212:	2200      	movs	r2, #0
 800f214:	4682      	mov	sl, r0
 800f216:	2300      	movs	r3, #0
 800f218:	4630      	mov	r0, r6
 800f21a:	4639      	mov	r1, r7
 800f21c:	f7f1 fc7e 	bl	8000b1c <__aeabi_dcmplt>
 800f220:	b148      	cbz	r0, 800f236 <_dtoa_r+0x186>
 800f222:	4650      	mov	r0, sl
 800f224:	f7f1 f99e 	bl	8000564 <__aeabi_i2d>
 800f228:	4632      	mov	r2, r6
 800f22a:	463b      	mov	r3, r7
 800f22c:	f7f1 fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 800f230:	b908      	cbnz	r0, 800f236 <_dtoa_r+0x186>
 800f232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f236:	f1ba 0f16 	cmp.w	sl, #22
 800f23a:	d854      	bhi.n	800f2e6 <_dtoa_r+0x236>
 800f23c:	4b61      	ldr	r3, [pc, #388]	; (800f3c4 <_dtoa_r+0x314>)
 800f23e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f24a:	f7f1 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800f24e:	2800      	cmp	r0, #0
 800f250:	d04b      	beq.n	800f2ea <_dtoa_r+0x23a>
 800f252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f256:	2300      	movs	r3, #0
 800f258:	930e      	str	r3, [sp, #56]	; 0x38
 800f25a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f25c:	1b5d      	subs	r5, r3, r5
 800f25e:	1e6b      	subs	r3, r5, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	bf43      	ittte	mi
 800f264:	2300      	movmi	r3, #0
 800f266:	f1c5 0801 	rsbmi	r8, r5, #1
 800f26a:	9304      	strmi	r3, [sp, #16]
 800f26c:	f04f 0800 	movpl.w	r8, #0
 800f270:	f1ba 0f00 	cmp.w	sl, #0
 800f274:	db3b      	blt.n	800f2ee <_dtoa_r+0x23e>
 800f276:	9b04      	ldr	r3, [sp, #16]
 800f278:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f27c:	4453      	add	r3, sl
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	2300      	movs	r3, #0
 800f282:	9306      	str	r3, [sp, #24]
 800f284:	9b05      	ldr	r3, [sp, #20]
 800f286:	2b09      	cmp	r3, #9
 800f288:	d869      	bhi.n	800f35e <_dtoa_r+0x2ae>
 800f28a:	2b05      	cmp	r3, #5
 800f28c:	bfc4      	itt	gt
 800f28e:	3b04      	subgt	r3, #4
 800f290:	9305      	strgt	r3, [sp, #20]
 800f292:	9b05      	ldr	r3, [sp, #20]
 800f294:	f1a3 0302 	sub.w	r3, r3, #2
 800f298:	bfcc      	ite	gt
 800f29a:	2500      	movgt	r5, #0
 800f29c:	2501      	movle	r5, #1
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d869      	bhi.n	800f376 <_dtoa_r+0x2c6>
 800f2a2:	e8df f003 	tbb	[pc, r3]
 800f2a6:	4e2c      	.short	0x4e2c
 800f2a8:	5a4c      	.short	0x5a4c
 800f2aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f2ae:	441d      	add	r5, r3
 800f2b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2b4:	2b20      	cmp	r3, #32
 800f2b6:	bfc1      	itttt	gt
 800f2b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f2c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f2c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f2c8:	bfda      	itte	le
 800f2ca:	f1c3 0320 	rsble	r3, r3, #32
 800f2ce:	fa06 f003 	lslle.w	r0, r6, r3
 800f2d2:	4318      	orrgt	r0, r3
 800f2d4:	f7f1 f936 	bl	8000544 <__aeabi_ui2d>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4606      	mov	r6, r0
 800f2dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f2e0:	3d01      	subs	r5, #1
 800f2e2:	9310      	str	r3, [sp, #64]	; 0x40
 800f2e4:	e771      	b.n	800f1ca <_dtoa_r+0x11a>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e7b6      	b.n	800f258 <_dtoa_r+0x1a8>
 800f2ea:	900e      	str	r0, [sp, #56]	; 0x38
 800f2ec:	e7b5      	b.n	800f25a <_dtoa_r+0x1aa>
 800f2ee:	f1ca 0300 	rsb	r3, sl, #0
 800f2f2:	9306      	str	r3, [sp, #24]
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	eba8 080a 	sub.w	r8, r8, sl
 800f2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800f2fc:	e7c2      	b.n	800f284 <_dtoa_r+0x1d4>
 800f2fe:	2300      	movs	r3, #0
 800f300:	9308      	str	r3, [sp, #32]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	2b00      	cmp	r3, #0
 800f306:	dc39      	bgt.n	800f37c <_dtoa_r+0x2cc>
 800f308:	f04f 0901 	mov.w	r9, #1
 800f30c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f310:	464b      	mov	r3, r9
 800f312:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f316:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f318:	2200      	movs	r2, #0
 800f31a:	6042      	str	r2, [r0, #4]
 800f31c:	2204      	movs	r2, #4
 800f31e:	f102 0614 	add.w	r6, r2, #20
 800f322:	429e      	cmp	r6, r3
 800f324:	6841      	ldr	r1, [r0, #4]
 800f326:	d92f      	bls.n	800f388 <_dtoa_r+0x2d8>
 800f328:	4620      	mov	r0, r4
 800f32a:	f001 f851 	bl	80103d0 <_Balloc>
 800f32e:	9000      	str	r0, [sp, #0]
 800f330:	2800      	cmp	r0, #0
 800f332:	d14b      	bne.n	800f3cc <_dtoa_r+0x31c>
 800f334:	4b24      	ldr	r3, [pc, #144]	; (800f3c8 <_dtoa_r+0x318>)
 800f336:	4602      	mov	r2, r0
 800f338:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f33c:	e6d1      	b.n	800f0e2 <_dtoa_r+0x32>
 800f33e:	2301      	movs	r3, #1
 800f340:	e7de      	b.n	800f300 <_dtoa_r+0x250>
 800f342:	2300      	movs	r3, #0
 800f344:	9308      	str	r3, [sp, #32]
 800f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f348:	eb0a 0903 	add.w	r9, sl, r3
 800f34c:	f109 0301 	add.w	r3, r9, #1
 800f350:	2b01      	cmp	r3, #1
 800f352:	9301      	str	r3, [sp, #4]
 800f354:	bfb8      	it	lt
 800f356:	2301      	movlt	r3, #1
 800f358:	e7dd      	b.n	800f316 <_dtoa_r+0x266>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e7f2      	b.n	800f344 <_dtoa_r+0x294>
 800f35e:	2501      	movs	r5, #1
 800f360:	2300      	movs	r3, #0
 800f362:	9305      	str	r3, [sp, #20]
 800f364:	9508      	str	r5, [sp, #32]
 800f366:	f04f 39ff 	mov.w	r9, #4294967295
 800f36a:	2200      	movs	r2, #0
 800f36c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f370:	2312      	movs	r3, #18
 800f372:	9209      	str	r2, [sp, #36]	; 0x24
 800f374:	e7cf      	b.n	800f316 <_dtoa_r+0x266>
 800f376:	2301      	movs	r3, #1
 800f378:	9308      	str	r3, [sp, #32]
 800f37a:	e7f4      	b.n	800f366 <_dtoa_r+0x2b6>
 800f37c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f380:	f8cd 9004 	str.w	r9, [sp, #4]
 800f384:	464b      	mov	r3, r9
 800f386:	e7c6      	b.n	800f316 <_dtoa_r+0x266>
 800f388:	3101      	adds	r1, #1
 800f38a:	6041      	str	r1, [r0, #4]
 800f38c:	0052      	lsls	r2, r2, #1
 800f38e:	e7c6      	b.n	800f31e <_dtoa_r+0x26e>
 800f390:	636f4361 	.word	0x636f4361
 800f394:	3fd287a7 	.word	0x3fd287a7
 800f398:	8b60c8b3 	.word	0x8b60c8b3
 800f39c:	3fc68a28 	.word	0x3fc68a28
 800f3a0:	509f79fb 	.word	0x509f79fb
 800f3a4:	3fd34413 	.word	0x3fd34413
 800f3a8:	080129de 	.word	0x080129de
 800f3ac:	080129f5 	.word	0x080129f5
 800f3b0:	7ff00000 	.word	0x7ff00000
 800f3b4:	080129da 	.word	0x080129da
 800f3b8:	080129d1 	.word	0x080129d1
 800f3bc:	08012c5a 	.word	0x08012c5a
 800f3c0:	3ff80000 	.word	0x3ff80000
 800f3c4:	08012b70 	.word	0x08012b70
 800f3c8:	08012a54 	.word	0x08012a54
 800f3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3ce:	9a00      	ldr	r2, [sp, #0]
 800f3d0:	601a      	str	r2, [r3, #0]
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	2b0e      	cmp	r3, #14
 800f3d6:	f200 80ad 	bhi.w	800f534 <_dtoa_r+0x484>
 800f3da:	2d00      	cmp	r5, #0
 800f3dc:	f000 80aa 	beq.w	800f534 <_dtoa_r+0x484>
 800f3e0:	f1ba 0f00 	cmp.w	sl, #0
 800f3e4:	dd36      	ble.n	800f454 <_dtoa_r+0x3a4>
 800f3e6:	4ac3      	ldr	r2, [pc, #780]	; (800f6f4 <_dtoa_r+0x644>)
 800f3e8:	f00a 030f 	and.w	r3, sl, #15
 800f3ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f3f0:	ed93 7b00 	vldr	d7, [r3]
 800f3f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f3f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f3fc:	eeb0 8a47 	vmov.f32	s16, s14
 800f400:	eef0 8a67 	vmov.f32	s17, s15
 800f404:	d016      	beq.n	800f434 <_dtoa_r+0x384>
 800f406:	4bbc      	ldr	r3, [pc, #752]	; (800f6f8 <_dtoa_r+0x648>)
 800f408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f40c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f410:	f7f1 fa3c 	bl	800088c <__aeabi_ddiv>
 800f414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f418:	f007 070f 	and.w	r7, r7, #15
 800f41c:	2503      	movs	r5, #3
 800f41e:	4eb6      	ldr	r6, [pc, #728]	; (800f6f8 <_dtoa_r+0x648>)
 800f420:	b957      	cbnz	r7, 800f438 <_dtoa_r+0x388>
 800f422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f426:	ec53 2b18 	vmov	r2, r3, d8
 800f42a:	f7f1 fa2f 	bl	800088c <__aeabi_ddiv>
 800f42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f432:	e029      	b.n	800f488 <_dtoa_r+0x3d8>
 800f434:	2502      	movs	r5, #2
 800f436:	e7f2      	b.n	800f41e <_dtoa_r+0x36e>
 800f438:	07f9      	lsls	r1, r7, #31
 800f43a:	d508      	bpl.n	800f44e <_dtoa_r+0x39e>
 800f43c:	ec51 0b18 	vmov	r0, r1, d8
 800f440:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f444:	f7f1 f8f8 	bl	8000638 <__aeabi_dmul>
 800f448:	ec41 0b18 	vmov	d8, r0, r1
 800f44c:	3501      	adds	r5, #1
 800f44e:	107f      	asrs	r7, r7, #1
 800f450:	3608      	adds	r6, #8
 800f452:	e7e5      	b.n	800f420 <_dtoa_r+0x370>
 800f454:	f000 80a6 	beq.w	800f5a4 <_dtoa_r+0x4f4>
 800f458:	f1ca 0600 	rsb	r6, sl, #0
 800f45c:	4ba5      	ldr	r3, [pc, #660]	; (800f6f4 <_dtoa_r+0x644>)
 800f45e:	4fa6      	ldr	r7, [pc, #664]	; (800f6f8 <_dtoa_r+0x648>)
 800f460:	f006 020f 	and.w	r2, r6, #15
 800f464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f470:	f7f1 f8e2 	bl	8000638 <__aeabi_dmul>
 800f474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f478:	1136      	asrs	r6, r6, #4
 800f47a:	2300      	movs	r3, #0
 800f47c:	2502      	movs	r5, #2
 800f47e:	2e00      	cmp	r6, #0
 800f480:	f040 8085 	bne.w	800f58e <_dtoa_r+0x4de>
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1d2      	bne.n	800f42e <_dtoa_r+0x37e>
 800f488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 808c 	beq.w	800f5a8 <_dtoa_r+0x4f8>
 800f490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f494:	4b99      	ldr	r3, [pc, #612]	; (800f6fc <_dtoa_r+0x64c>)
 800f496:	2200      	movs	r2, #0
 800f498:	4630      	mov	r0, r6
 800f49a:	4639      	mov	r1, r7
 800f49c:	f7f1 fb3e 	bl	8000b1c <__aeabi_dcmplt>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f000 8081 	beq.w	800f5a8 <_dtoa_r+0x4f8>
 800f4a6:	9b01      	ldr	r3, [sp, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d07d      	beq.n	800f5a8 <_dtoa_r+0x4f8>
 800f4ac:	f1b9 0f00 	cmp.w	r9, #0
 800f4b0:	dd3c      	ble.n	800f52c <_dtoa_r+0x47c>
 800f4b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4b6:	9307      	str	r3, [sp, #28]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4b91      	ldr	r3, [pc, #580]	; (800f700 <_dtoa_r+0x650>)
 800f4bc:	4630      	mov	r0, r6
 800f4be:	4639      	mov	r1, r7
 800f4c0:	f7f1 f8ba 	bl	8000638 <__aeabi_dmul>
 800f4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c8:	3501      	adds	r5, #1
 800f4ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f4ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f7f1 f846 	bl	8000564 <__aeabi_i2d>
 800f4d8:	4632      	mov	r2, r6
 800f4da:	463b      	mov	r3, r7
 800f4dc:	f7f1 f8ac 	bl	8000638 <__aeabi_dmul>
 800f4e0:	4b88      	ldr	r3, [pc, #544]	; (800f704 <_dtoa_r+0x654>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f7f0 fef2 	bl	80002cc <__adddf3>
 800f4e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d15c      	bne.n	800f5b2 <_dtoa_r+0x502>
 800f4f8:	4b83      	ldr	r3, [pc, #524]	; (800f708 <_dtoa_r+0x658>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	4639      	mov	r1, r7
 800f500:	f7f0 fee2 	bl	80002c8 <__aeabi_dsub>
 800f504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f508:	4606      	mov	r6, r0
 800f50a:	460f      	mov	r7, r1
 800f50c:	f7f1 fb24 	bl	8000b58 <__aeabi_dcmpgt>
 800f510:	2800      	cmp	r0, #0
 800f512:	f040 8296 	bne.w	800fa42 <_dtoa_r+0x992>
 800f516:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f51a:	4630      	mov	r0, r6
 800f51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f520:	4639      	mov	r1, r7
 800f522:	f7f1 fafb 	bl	8000b1c <__aeabi_dcmplt>
 800f526:	2800      	cmp	r0, #0
 800f528:	f040 8288 	bne.w	800fa3c <_dtoa_r+0x98c>
 800f52c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f536:	2b00      	cmp	r3, #0
 800f538:	f2c0 8158 	blt.w	800f7ec <_dtoa_r+0x73c>
 800f53c:	f1ba 0f0e 	cmp.w	sl, #14
 800f540:	f300 8154 	bgt.w	800f7ec <_dtoa_r+0x73c>
 800f544:	4b6b      	ldr	r3, [pc, #428]	; (800f6f4 <_dtoa_r+0x644>)
 800f546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f54a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f550:	2b00      	cmp	r3, #0
 800f552:	f280 80e3 	bge.w	800f71c <_dtoa_r+0x66c>
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f300 80df 	bgt.w	800f71c <_dtoa_r+0x66c>
 800f55e:	f040 826d 	bne.w	800fa3c <_dtoa_r+0x98c>
 800f562:	4b69      	ldr	r3, [pc, #420]	; (800f708 <_dtoa_r+0x658>)
 800f564:	2200      	movs	r2, #0
 800f566:	4640      	mov	r0, r8
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f1 f865 	bl	8000638 <__aeabi_dmul>
 800f56e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f572:	f7f1 fae7 	bl	8000b44 <__aeabi_dcmpge>
 800f576:	9e01      	ldr	r6, [sp, #4]
 800f578:	4637      	mov	r7, r6
 800f57a:	2800      	cmp	r0, #0
 800f57c:	f040 8243 	bne.w	800fa06 <_dtoa_r+0x956>
 800f580:	9d00      	ldr	r5, [sp, #0]
 800f582:	2331      	movs	r3, #49	; 0x31
 800f584:	f805 3b01 	strb.w	r3, [r5], #1
 800f588:	f10a 0a01 	add.w	sl, sl, #1
 800f58c:	e23f      	b.n	800fa0e <_dtoa_r+0x95e>
 800f58e:	07f2      	lsls	r2, r6, #31
 800f590:	d505      	bpl.n	800f59e <_dtoa_r+0x4ee>
 800f592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f596:	f7f1 f84f 	bl	8000638 <__aeabi_dmul>
 800f59a:	3501      	adds	r5, #1
 800f59c:	2301      	movs	r3, #1
 800f59e:	1076      	asrs	r6, r6, #1
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	e76c      	b.n	800f47e <_dtoa_r+0x3ce>
 800f5a4:	2502      	movs	r5, #2
 800f5a6:	e76f      	b.n	800f488 <_dtoa_r+0x3d8>
 800f5a8:	9b01      	ldr	r3, [sp, #4]
 800f5aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800f5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800f5b0:	e78d      	b.n	800f4ce <_dtoa_r+0x41e>
 800f5b2:	9900      	ldr	r1, [sp, #0]
 800f5b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f5b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5b8:	4b4e      	ldr	r3, [pc, #312]	; (800f6f4 <_dtoa_r+0x644>)
 800f5ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5be:	4401      	add	r1, r0
 800f5c0:	9102      	str	r1, [sp, #8]
 800f5c2:	9908      	ldr	r1, [sp, #32]
 800f5c4:	eeb0 8a47 	vmov.f32	s16, s14
 800f5c8:	eef0 8a67 	vmov.f32	s17, s15
 800f5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	d045      	beq.n	800f664 <_dtoa_r+0x5b4>
 800f5d8:	494c      	ldr	r1, [pc, #304]	; (800f70c <_dtoa_r+0x65c>)
 800f5da:	2000      	movs	r0, #0
 800f5dc:	f7f1 f956 	bl	800088c <__aeabi_ddiv>
 800f5e0:	ec53 2b18 	vmov	r2, r3, d8
 800f5e4:	f7f0 fe70 	bl	80002c8 <__aeabi_dsub>
 800f5e8:	9d00      	ldr	r5, [sp, #0]
 800f5ea:	ec41 0b18 	vmov	d8, r0, r1
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f7f1 fad1 	bl	8000b98 <__aeabi_d2iz>
 800f5f6:	900c      	str	r0, [sp, #48]	; 0x30
 800f5f8:	f7f0 ffb4 	bl	8000564 <__aeabi_i2d>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	4630      	mov	r0, r6
 800f602:	4639      	mov	r1, r7
 800f604:	f7f0 fe60 	bl	80002c8 <__aeabi_dsub>
 800f608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f60a:	3330      	adds	r3, #48	; 0x30
 800f60c:	f805 3b01 	strb.w	r3, [r5], #1
 800f610:	ec53 2b18 	vmov	r2, r3, d8
 800f614:	4606      	mov	r6, r0
 800f616:	460f      	mov	r7, r1
 800f618:	f7f1 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d165      	bne.n	800f6ec <_dtoa_r+0x63c>
 800f620:	4632      	mov	r2, r6
 800f622:	463b      	mov	r3, r7
 800f624:	4935      	ldr	r1, [pc, #212]	; (800f6fc <_dtoa_r+0x64c>)
 800f626:	2000      	movs	r0, #0
 800f628:	f7f0 fe4e 	bl	80002c8 <__aeabi_dsub>
 800f62c:	ec53 2b18 	vmov	r2, r3, d8
 800f630:	f7f1 fa74 	bl	8000b1c <__aeabi_dcmplt>
 800f634:	2800      	cmp	r0, #0
 800f636:	f040 80b9 	bne.w	800f7ac <_dtoa_r+0x6fc>
 800f63a:	9b02      	ldr	r3, [sp, #8]
 800f63c:	429d      	cmp	r5, r3
 800f63e:	f43f af75 	beq.w	800f52c <_dtoa_r+0x47c>
 800f642:	4b2f      	ldr	r3, [pc, #188]	; (800f700 <_dtoa_r+0x650>)
 800f644:	ec51 0b18 	vmov	r0, r1, d8
 800f648:	2200      	movs	r2, #0
 800f64a:	f7f0 fff5 	bl	8000638 <__aeabi_dmul>
 800f64e:	4b2c      	ldr	r3, [pc, #176]	; (800f700 <_dtoa_r+0x650>)
 800f650:	ec41 0b18 	vmov	d8, r0, r1
 800f654:	2200      	movs	r2, #0
 800f656:	4630      	mov	r0, r6
 800f658:	4639      	mov	r1, r7
 800f65a:	f7f0 ffed 	bl	8000638 <__aeabi_dmul>
 800f65e:	4606      	mov	r6, r0
 800f660:	460f      	mov	r7, r1
 800f662:	e7c4      	b.n	800f5ee <_dtoa_r+0x53e>
 800f664:	ec51 0b17 	vmov	r0, r1, d7
 800f668:	f7f0 ffe6 	bl	8000638 <__aeabi_dmul>
 800f66c:	9b02      	ldr	r3, [sp, #8]
 800f66e:	9d00      	ldr	r5, [sp, #0]
 800f670:	930c      	str	r3, [sp, #48]	; 0x30
 800f672:	ec41 0b18 	vmov	d8, r0, r1
 800f676:	4639      	mov	r1, r7
 800f678:	4630      	mov	r0, r6
 800f67a:	f7f1 fa8d 	bl	8000b98 <__aeabi_d2iz>
 800f67e:	9011      	str	r0, [sp, #68]	; 0x44
 800f680:	f7f0 ff70 	bl	8000564 <__aeabi_i2d>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f0 fe1c 	bl	80002c8 <__aeabi_dsub>
 800f690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f692:	3330      	adds	r3, #48	; 0x30
 800f694:	f805 3b01 	strb.w	r3, [r5], #1
 800f698:	9b02      	ldr	r3, [sp, #8]
 800f69a:	429d      	cmp	r5, r3
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	f04f 0200 	mov.w	r2, #0
 800f6a4:	d134      	bne.n	800f710 <_dtoa_r+0x660>
 800f6a6:	4b19      	ldr	r3, [pc, #100]	; (800f70c <_dtoa_r+0x65c>)
 800f6a8:	ec51 0b18 	vmov	r0, r1, d8
 800f6ac:	f7f0 fe0e 	bl	80002cc <__adddf3>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f1 fa4e 	bl	8000b58 <__aeabi_dcmpgt>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d175      	bne.n	800f7ac <_dtoa_r+0x6fc>
 800f6c0:	ec53 2b18 	vmov	r2, r3, d8
 800f6c4:	4911      	ldr	r1, [pc, #68]	; (800f70c <_dtoa_r+0x65c>)
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	f7f0 fdfe 	bl	80002c8 <__aeabi_dsub>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	f7f1 fa22 	bl	8000b1c <__aeabi_dcmplt>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	f43f af27 	beq.w	800f52c <_dtoa_r+0x47c>
 800f6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6e0:	1e6b      	subs	r3, r5, #1
 800f6e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f6e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6e8:	2b30      	cmp	r3, #48	; 0x30
 800f6ea:	d0f8      	beq.n	800f6de <_dtoa_r+0x62e>
 800f6ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f6f0:	e04a      	b.n	800f788 <_dtoa_r+0x6d8>
 800f6f2:	bf00      	nop
 800f6f4:	08012b70 	.word	0x08012b70
 800f6f8:	08012b48 	.word	0x08012b48
 800f6fc:	3ff00000 	.word	0x3ff00000
 800f700:	40240000 	.word	0x40240000
 800f704:	401c0000 	.word	0x401c0000
 800f708:	40140000 	.word	0x40140000
 800f70c:	3fe00000 	.word	0x3fe00000
 800f710:	4baf      	ldr	r3, [pc, #700]	; (800f9d0 <_dtoa_r+0x920>)
 800f712:	f7f0 ff91 	bl	8000638 <__aeabi_dmul>
 800f716:	4606      	mov	r6, r0
 800f718:	460f      	mov	r7, r1
 800f71a:	e7ac      	b.n	800f676 <_dtoa_r+0x5c6>
 800f71c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f720:	9d00      	ldr	r5, [sp, #0]
 800f722:	4642      	mov	r2, r8
 800f724:	464b      	mov	r3, r9
 800f726:	4630      	mov	r0, r6
 800f728:	4639      	mov	r1, r7
 800f72a:	f7f1 f8af 	bl	800088c <__aeabi_ddiv>
 800f72e:	f7f1 fa33 	bl	8000b98 <__aeabi_d2iz>
 800f732:	9002      	str	r0, [sp, #8]
 800f734:	f7f0 ff16 	bl	8000564 <__aeabi_i2d>
 800f738:	4642      	mov	r2, r8
 800f73a:	464b      	mov	r3, r9
 800f73c:	f7f0 ff7c 	bl	8000638 <__aeabi_dmul>
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	4630      	mov	r0, r6
 800f746:	4639      	mov	r1, r7
 800f748:	f7f0 fdbe 	bl	80002c8 <__aeabi_dsub>
 800f74c:	9e02      	ldr	r6, [sp, #8]
 800f74e:	9f01      	ldr	r7, [sp, #4]
 800f750:	3630      	adds	r6, #48	; 0x30
 800f752:	f805 6b01 	strb.w	r6, [r5], #1
 800f756:	9e00      	ldr	r6, [sp, #0]
 800f758:	1bae      	subs	r6, r5, r6
 800f75a:	42b7      	cmp	r7, r6
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	d137      	bne.n	800f7d2 <_dtoa_r+0x722>
 800f762:	f7f0 fdb3 	bl	80002cc <__adddf3>
 800f766:	4642      	mov	r2, r8
 800f768:	464b      	mov	r3, r9
 800f76a:	4606      	mov	r6, r0
 800f76c:	460f      	mov	r7, r1
 800f76e:	f7f1 f9f3 	bl	8000b58 <__aeabi_dcmpgt>
 800f772:	b9c8      	cbnz	r0, 800f7a8 <_dtoa_r+0x6f8>
 800f774:	4642      	mov	r2, r8
 800f776:	464b      	mov	r3, r9
 800f778:	4630      	mov	r0, r6
 800f77a:	4639      	mov	r1, r7
 800f77c:	f7f1 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 800f780:	b110      	cbz	r0, 800f788 <_dtoa_r+0x6d8>
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	07d9      	lsls	r1, r3, #31
 800f786:	d40f      	bmi.n	800f7a8 <_dtoa_r+0x6f8>
 800f788:	4620      	mov	r0, r4
 800f78a:	4659      	mov	r1, fp
 800f78c:	f000 fe60 	bl	8010450 <_Bfree>
 800f790:	2300      	movs	r3, #0
 800f792:	702b      	strb	r3, [r5, #0]
 800f794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f796:	f10a 0001 	add.w	r0, sl, #1
 800f79a:	6018      	str	r0, [r3, #0]
 800f79c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f43f acd8 	beq.w	800f154 <_dtoa_r+0xa4>
 800f7a4:	601d      	str	r5, [r3, #0]
 800f7a6:	e4d5      	b.n	800f154 <_dtoa_r+0xa4>
 800f7a8:	f8cd a01c 	str.w	sl, [sp, #28]
 800f7ac:	462b      	mov	r3, r5
 800f7ae:	461d      	mov	r5, r3
 800f7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7b4:	2a39      	cmp	r2, #57	; 0x39
 800f7b6:	d108      	bne.n	800f7ca <_dtoa_r+0x71a>
 800f7b8:	9a00      	ldr	r2, [sp, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d1f7      	bne.n	800f7ae <_dtoa_r+0x6fe>
 800f7be:	9a07      	ldr	r2, [sp, #28]
 800f7c0:	9900      	ldr	r1, [sp, #0]
 800f7c2:	3201      	adds	r2, #1
 800f7c4:	9207      	str	r2, [sp, #28]
 800f7c6:	2230      	movs	r2, #48	; 0x30
 800f7c8:	700a      	strb	r2, [r1, #0]
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	3201      	adds	r2, #1
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e78c      	b.n	800f6ec <_dtoa_r+0x63c>
 800f7d2:	4b7f      	ldr	r3, [pc, #508]	; (800f9d0 <_dtoa_r+0x920>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f7f0 ff2f 	bl	8000638 <__aeabi_dmul>
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4606      	mov	r6, r0
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	f7f1 f991 	bl	8000b08 <__aeabi_dcmpeq>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d09b      	beq.n	800f722 <_dtoa_r+0x672>
 800f7ea:	e7cd      	b.n	800f788 <_dtoa_r+0x6d8>
 800f7ec:	9a08      	ldr	r2, [sp, #32]
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	f000 80c4 	beq.w	800f97c <_dtoa_r+0x8cc>
 800f7f4:	9a05      	ldr	r2, [sp, #20]
 800f7f6:	2a01      	cmp	r2, #1
 800f7f8:	f300 80a8 	bgt.w	800f94c <_dtoa_r+0x89c>
 800f7fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	f000 80a0 	beq.w	800f944 <_dtoa_r+0x894>
 800f804:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f808:	9e06      	ldr	r6, [sp, #24]
 800f80a:	4645      	mov	r5, r8
 800f80c:	9a04      	ldr	r2, [sp, #16]
 800f80e:	2101      	movs	r1, #1
 800f810:	441a      	add	r2, r3
 800f812:	4620      	mov	r0, r4
 800f814:	4498      	add	r8, r3
 800f816:	9204      	str	r2, [sp, #16]
 800f818:	f000 ff20 	bl	801065c <__i2b>
 800f81c:	4607      	mov	r7, r0
 800f81e:	2d00      	cmp	r5, #0
 800f820:	dd0b      	ble.n	800f83a <_dtoa_r+0x78a>
 800f822:	9b04      	ldr	r3, [sp, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd08      	ble.n	800f83a <_dtoa_r+0x78a>
 800f828:	42ab      	cmp	r3, r5
 800f82a:	9a04      	ldr	r2, [sp, #16]
 800f82c:	bfa8      	it	ge
 800f82e:	462b      	movge	r3, r5
 800f830:	eba8 0803 	sub.w	r8, r8, r3
 800f834:	1aed      	subs	r5, r5, r3
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	9304      	str	r3, [sp, #16]
 800f83a:	9b06      	ldr	r3, [sp, #24]
 800f83c:	b1fb      	cbz	r3, 800f87e <_dtoa_r+0x7ce>
 800f83e:	9b08      	ldr	r3, [sp, #32]
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 809f 	beq.w	800f984 <_dtoa_r+0x8d4>
 800f846:	2e00      	cmp	r6, #0
 800f848:	dd11      	ble.n	800f86e <_dtoa_r+0x7be>
 800f84a:	4639      	mov	r1, r7
 800f84c:	4632      	mov	r2, r6
 800f84e:	4620      	mov	r0, r4
 800f850:	f000 ffc0 	bl	80107d4 <__pow5mult>
 800f854:	465a      	mov	r2, fp
 800f856:	4601      	mov	r1, r0
 800f858:	4607      	mov	r7, r0
 800f85a:	4620      	mov	r0, r4
 800f85c:	f000 ff14 	bl	8010688 <__multiply>
 800f860:	4659      	mov	r1, fp
 800f862:	9007      	str	r0, [sp, #28]
 800f864:	4620      	mov	r0, r4
 800f866:	f000 fdf3 	bl	8010450 <_Bfree>
 800f86a:	9b07      	ldr	r3, [sp, #28]
 800f86c:	469b      	mov	fp, r3
 800f86e:	9b06      	ldr	r3, [sp, #24]
 800f870:	1b9a      	subs	r2, r3, r6
 800f872:	d004      	beq.n	800f87e <_dtoa_r+0x7ce>
 800f874:	4659      	mov	r1, fp
 800f876:	4620      	mov	r0, r4
 800f878:	f000 ffac 	bl	80107d4 <__pow5mult>
 800f87c:	4683      	mov	fp, r0
 800f87e:	2101      	movs	r1, #1
 800f880:	4620      	mov	r0, r4
 800f882:	f000 feeb 	bl	801065c <__i2b>
 800f886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f888:	2b00      	cmp	r3, #0
 800f88a:	4606      	mov	r6, r0
 800f88c:	dd7c      	ble.n	800f988 <_dtoa_r+0x8d8>
 800f88e:	461a      	mov	r2, r3
 800f890:	4601      	mov	r1, r0
 800f892:	4620      	mov	r0, r4
 800f894:	f000 ff9e 	bl	80107d4 <__pow5mult>
 800f898:	9b05      	ldr	r3, [sp, #20]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	4606      	mov	r6, r0
 800f89e:	dd76      	ble.n	800f98e <_dtoa_r+0x8de>
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9306      	str	r3, [sp, #24]
 800f8a4:	6933      	ldr	r3, [r6, #16]
 800f8a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8aa:	6918      	ldr	r0, [r3, #16]
 800f8ac:	f000 fe86 	bl	80105bc <__hi0bits>
 800f8b0:	f1c0 0020 	rsb	r0, r0, #32
 800f8b4:	9b04      	ldr	r3, [sp, #16]
 800f8b6:	4418      	add	r0, r3
 800f8b8:	f010 001f 	ands.w	r0, r0, #31
 800f8bc:	f000 8086 	beq.w	800f9cc <_dtoa_r+0x91c>
 800f8c0:	f1c0 0320 	rsb	r3, r0, #32
 800f8c4:	2b04      	cmp	r3, #4
 800f8c6:	dd7f      	ble.n	800f9c8 <_dtoa_r+0x918>
 800f8c8:	f1c0 001c 	rsb	r0, r0, #28
 800f8cc:	9b04      	ldr	r3, [sp, #16]
 800f8ce:	4403      	add	r3, r0
 800f8d0:	4480      	add	r8, r0
 800f8d2:	4405      	add	r5, r0
 800f8d4:	9304      	str	r3, [sp, #16]
 800f8d6:	f1b8 0f00 	cmp.w	r8, #0
 800f8da:	dd05      	ble.n	800f8e8 <_dtoa_r+0x838>
 800f8dc:	4659      	mov	r1, fp
 800f8de:	4642      	mov	r2, r8
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 ffd1 	bl	8010888 <__lshift>
 800f8e6:	4683      	mov	fp, r0
 800f8e8:	9b04      	ldr	r3, [sp, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	dd05      	ble.n	800f8fa <_dtoa_r+0x84a>
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f000 ffc8 	bl	8010888 <__lshift>
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d069      	beq.n	800f9d4 <_dtoa_r+0x924>
 800f900:	4631      	mov	r1, r6
 800f902:	4658      	mov	r0, fp
 800f904:	f001 f82c 	bl	8010960 <__mcmp>
 800f908:	2800      	cmp	r0, #0
 800f90a:	da63      	bge.n	800f9d4 <_dtoa_r+0x924>
 800f90c:	2300      	movs	r3, #0
 800f90e:	4659      	mov	r1, fp
 800f910:	220a      	movs	r2, #10
 800f912:	4620      	mov	r0, r4
 800f914:	f000 fdbe 	bl	8010494 <__multadd>
 800f918:	9b08      	ldr	r3, [sp, #32]
 800f91a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f91e:	4683      	mov	fp, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 818f 	beq.w	800fc44 <_dtoa_r+0xb94>
 800f926:	4639      	mov	r1, r7
 800f928:	2300      	movs	r3, #0
 800f92a:	220a      	movs	r2, #10
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 fdb1 	bl	8010494 <__multadd>
 800f932:	f1b9 0f00 	cmp.w	r9, #0
 800f936:	4607      	mov	r7, r0
 800f938:	f300 808e 	bgt.w	800fa58 <_dtoa_r+0x9a8>
 800f93c:	9b05      	ldr	r3, [sp, #20]
 800f93e:	2b02      	cmp	r3, #2
 800f940:	dc50      	bgt.n	800f9e4 <_dtoa_r+0x934>
 800f942:	e089      	b.n	800fa58 <_dtoa_r+0x9a8>
 800f944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f94a:	e75d      	b.n	800f808 <_dtoa_r+0x758>
 800f94c:	9b01      	ldr	r3, [sp, #4]
 800f94e:	1e5e      	subs	r6, r3, #1
 800f950:	9b06      	ldr	r3, [sp, #24]
 800f952:	42b3      	cmp	r3, r6
 800f954:	bfbf      	itttt	lt
 800f956:	9b06      	ldrlt	r3, [sp, #24]
 800f958:	9606      	strlt	r6, [sp, #24]
 800f95a:	1af2      	sublt	r2, r6, r3
 800f95c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f95e:	bfb6      	itet	lt
 800f960:	189b      	addlt	r3, r3, r2
 800f962:	1b9e      	subge	r6, r3, r6
 800f964:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	bfb8      	it	lt
 800f96a:	2600      	movlt	r6, #0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	bfb5      	itete	lt
 800f970:	eba8 0503 	sublt.w	r5, r8, r3
 800f974:	9b01      	ldrge	r3, [sp, #4]
 800f976:	2300      	movlt	r3, #0
 800f978:	4645      	movge	r5, r8
 800f97a:	e747      	b.n	800f80c <_dtoa_r+0x75c>
 800f97c:	9e06      	ldr	r6, [sp, #24]
 800f97e:	9f08      	ldr	r7, [sp, #32]
 800f980:	4645      	mov	r5, r8
 800f982:	e74c      	b.n	800f81e <_dtoa_r+0x76e>
 800f984:	9a06      	ldr	r2, [sp, #24]
 800f986:	e775      	b.n	800f874 <_dtoa_r+0x7c4>
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	dc18      	bgt.n	800f9c0 <_dtoa_r+0x910>
 800f98e:	9b02      	ldr	r3, [sp, #8]
 800f990:	b9b3      	cbnz	r3, 800f9c0 <_dtoa_r+0x910>
 800f992:	9b03      	ldr	r3, [sp, #12]
 800f994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f998:	b9a3      	cbnz	r3, 800f9c4 <_dtoa_r+0x914>
 800f99a:	9b03      	ldr	r3, [sp, #12]
 800f99c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9a0:	0d1b      	lsrs	r3, r3, #20
 800f9a2:	051b      	lsls	r3, r3, #20
 800f9a4:	b12b      	cbz	r3, 800f9b2 <_dtoa_r+0x902>
 800f9a6:	9b04      	ldr	r3, [sp, #16]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	f108 0801 	add.w	r8, r8, #1
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	9306      	str	r3, [sp, #24]
 800f9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f47f af74 	bne.w	800f8a4 <_dtoa_r+0x7f4>
 800f9bc:	2001      	movs	r0, #1
 800f9be:	e779      	b.n	800f8b4 <_dtoa_r+0x804>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	e7f6      	b.n	800f9b2 <_dtoa_r+0x902>
 800f9c4:	9b02      	ldr	r3, [sp, #8]
 800f9c6:	e7f4      	b.n	800f9b2 <_dtoa_r+0x902>
 800f9c8:	d085      	beq.n	800f8d6 <_dtoa_r+0x826>
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	301c      	adds	r0, #28
 800f9ce:	e77d      	b.n	800f8cc <_dtoa_r+0x81c>
 800f9d0:	40240000 	.word	0x40240000
 800f9d4:	9b01      	ldr	r3, [sp, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	dc38      	bgt.n	800fa4c <_dtoa_r+0x99c>
 800f9da:	9b05      	ldr	r3, [sp, #20]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	dd35      	ble.n	800fa4c <_dtoa_r+0x99c>
 800f9e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f9e4:	f1b9 0f00 	cmp.w	r9, #0
 800f9e8:	d10d      	bne.n	800fa06 <_dtoa_r+0x956>
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	464b      	mov	r3, r9
 800f9ee:	2205      	movs	r2, #5
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f000 fd4f 	bl	8010494 <__multadd>
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f000 ffb0 	bl	8010960 <__mcmp>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f73f adbd 	bgt.w	800f580 <_dtoa_r+0x4d0>
 800fa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa08:	9d00      	ldr	r5, [sp, #0]
 800fa0a:	ea6f 0a03 	mvn.w	sl, r3
 800fa0e:	f04f 0800 	mov.w	r8, #0
 800fa12:	4631      	mov	r1, r6
 800fa14:	4620      	mov	r0, r4
 800fa16:	f000 fd1b 	bl	8010450 <_Bfree>
 800fa1a:	2f00      	cmp	r7, #0
 800fa1c:	f43f aeb4 	beq.w	800f788 <_dtoa_r+0x6d8>
 800fa20:	f1b8 0f00 	cmp.w	r8, #0
 800fa24:	d005      	beq.n	800fa32 <_dtoa_r+0x982>
 800fa26:	45b8      	cmp	r8, r7
 800fa28:	d003      	beq.n	800fa32 <_dtoa_r+0x982>
 800fa2a:	4641      	mov	r1, r8
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f000 fd0f 	bl	8010450 <_Bfree>
 800fa32:	4639      	mov	r1, r7
 800fa34:	4620      	mov	r0, r4
 800fa36:	f000 fd0b 	bl	8010450 <_Bfree>
 800fa3a:	e6a5      	b.n	800f788 <_dtoa_r+0x6d8>
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	4637      	mov	r7, r6
 800fa40:	e7e1      	b.n	800fa06 <_dtoa_r+0x956>
 800fa42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fa44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa48:	4637      	mov	r7, r6
 800fa4a:	e599      	b.n	800f580 <_dtoa_r+0x4d0>
 800fa4c:	9b08      	ldr	r3, [sp, #32]
 800fa4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 80fd 	beq.w	800fc52 <_dtoa_r+0xba2>
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	dd05      	ble.n	800fa68 <_dtoa_r+0x9b8>
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	462a      	mov	r2, r5
 800fa60:	4620      	mov	r0, r4
 800fa62:	f000 ff11 	bl	8010888 <__lshift>
 800fa66:	4607      	mov	r7, r0
 800fa68:	9b06      	ldr	r3, [sp, #24]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d05c      	beq.n	800fb28 <_dtoa_r+0xa78>
 800fa6e:	6879      	ldr	r1, [r7, #4]
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fcad 	bl	80103d0 <_Balloc>
 800fa76:	4605      	mov	r5, r0
 800fa78:	b928      	cbnz	r0, 800fa86 <_dtoa_r+0x9d6>
 800fa7a:	4b80      	ldr	r3, [pc, #512]	; (800fc7c <_dtoa_r+0xbcc>)
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa82:	f7ff bb2e 	b.w	800f0e2 <_dtoa_r+0x32>
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	3202      	adds	r2, #2
 800fa8a:	0092      	lsls	r2, r2, #2
 800fa8c:	f107 010c 	add.w	r1, r7, #12
 800fa90:	300c      	adds	r0, #12
 800fa92:	f7fd fb6b 	bl	800d16c <memcpy>
 800fa96:	2201      	movs	r2, #1
 800fa98:	4629      	mov	r1, r5
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 fef4 	bl	8010888 <__lshift>
 800faa0:	9b00      	ldr	r3, [sp, #0]
 800faa2:	3301      	adds	r3, #1
 800faa4:	9301      	str	r3, [sp, #4]
 800faa6:	9b00      	ldr	r3, [sp, #0]
 800faa8:	444b      	add	r3, r9
 800faaa:	9307      	str	r3, [sp, #28]
 800faac:	9b02      	ldr	r3, [sp, #8]
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	46b8      	mov	r8, r7
 800fab4:	9306      	str	r3, [sp, #24]
 800fab6:	4607      	mov	r7, r0
 800fab8:	9b01      	ldr	r3, [sp, #4]
 800faba:	4631      	mov	r1, r6
 800fabc:	3b01      	subs	r3, #1
 800fabe:	4658      	mov	r0, fp
 800fac0:	9302      	str	r3, [sp, #8]
 800fac2:	f7ff fa69 	bl	800ef98 <quorem>
 800fac6:	4603      	mov	r3, r0
 800fac8:	3330      	adds	r3, #48	; 0x30
 800faca:	9004      	str	r0, [sp, #16]
 800facc:	4641      	mov	r1, r8
 800face:	4658      	mov	r0, fp
 800fad0:	9308      	str	r3, [sp, #32]
 800fad2:	f000 ff45 	bl	8010960 <__mcmp>
 800fad6:	463a      	mov	r2, r7
 800fad8:	4681      	mov	r9, r0
 800fada:	4631      	mov	r1, r6
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 ff5b 	bl	8010998 <__mdiff>
 800fae2:	68c2      	ldr	r2, [r0, #12]
 800fae4:	9b08      	ldr	r3, [sp, #32]
 800fae6:	4605      	mov	r5, r0
 800fae8:	bb02      	cbnz	r2, 800fb2c <_dtoa_r+0xa7c>
 800faea:	4601      	mov	r1, r0
 800faec:	4658      	mov	r0, fp
 800faee:	f000 ff37 	bl	8010960 <__mcmp>
 800faf2:	9b08      	ldr	r3, [sp, #32]
 800faf4:	4602      	mov	r2, r0
 800faf6:	4629      	mov	r1, r5
 800faf8:	4620      	mov	r0, r4
 800fafa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fafe:	f000 fca7 	bl	8010450 <_Bfree>
 800fb02:	9b05      	ldr	r3, [sp, #20]
 800fb04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb06:	9d01      	ldr	r5, [sp, #4]
 800fb08:	ea43 0102 	orr.w	r1, r3, r2
 800fb0c:	9b06      	ldr	r3, [sp, #24]
 800fb0e:	430b      	orrs	r3, r1
 800fb10:	9b08      	ldr	r3, [sp, #32]
 800fb12:	d10d      	bne.n	800fb30 <_dtoa_r+0xa80>
 800fb14:	2b39      	cmp	r3, #57	; 0x39
 800fb16:	d029      	beq.n	800fb6c <_dtoa_r+0xabc>
 800fb18:	f1b9 0f00 	cmp.w	r9, #0
 800fb1c:	dd01      	ble.n	800fb22 <_dtoa_r+0xa72>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	3331      	adds	r3, #49	; 0x31
 800fb22:	9a02      	ldr	r2, [sp, #8]
 800fb24:	7013      	strb	r3, [r2, #0]
 800fb26:	e774      	b.n	800fa12 <_dtoa_r+0x962>
 800fb28:	4638      	mov	r0, r7
 800fb2a:	e7b9      	b.n	800faa0 <_dtoa_r+0x9f0>
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	e7e2      	b.n	800faf6 <_dtoa_r+0xa46>
 800fb30:	f1b9 0f00 	cmp.w	r9, #0
 800fb34:	db06      	blt.n	800fb44 <_dtoa_r+0xa94>
 800fb36:	9905      	ldr	r1, [sp, #20]
 800fb38:	ea41 0909 	orr.w	r9, r1, r9
 800fb3c:	9906      	ldr	r1, [sp, #24]
 800fb3e:	ea59 0101 	orrs.w	r1, r9, r1
 800fb42:	d120      	bne.n	800fb86 <_dtoa_r+0xad6>
 800fb44:	2a00      	cmp	r2, #0
 800fb46:	ddec      	ble.n	800fb22 <_dtoa_r+0xa72>
 800fb48:	4659      	mov	r1, fp
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	9301      	str	r3, [sp, #4]
 800fb50:	f000 fe9a 	bl	8010888 <__lshift>
 800fb54:	4631      	mov	r1, r6
 800fb56:	4683      	mov	fp, r0
 800fb58:	f000 ff02 	bl	8010960 <__mcmp>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	9b01      	ldr	r3, [sp, #4]
 800fb60:	dc02      	bgt.n	800fb68 <_dtoa_r+0xab8>
 800fb62:	d1de      	bne.n	800fb22 <_dtoa_r+0xa72>
 800fb64:	07da      	lsls	r2, r3, #31
 800fb66:	d5dc      	bpl.n	800fb22 <_dtoa_r+0xa72>
 800fb68:	2b39      	cmp	r3, #57	; 0x39
 800fb6a:	d1d8      	bne.n	800fb1e <_dtoa_r+0xa6e>
 800fb6c:	9a02      	ldr	r2, [sp, #8]
 800fb6e:	2339      	movs	r3, #57	; 0x39
 800fb70:	7013      	strb	r3, [r2, #0]
 800fb72:	462b      	mov	r3, r5
 800fb74:	461d      	mov	r5, r3
 800fb76:	3b01      	subs	r3, #1
 800fb78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb7c:	2a39      	cmp	r2, #57	; 0x39
 800fb7e:	d050      	beq.n	800fc22 <_dtoa_r+0xb72>
 800fb80:	3201      	adds	r2, #1
 800fb82:	701a      	strb	r2, [r3, #0]
 800fb84:	e745      	b.n	800fa12 <_dtoa_r+0x962>
 800fb86:	2a00      	cmp	r2, #0
 800fb88:	dd03      	ble.n	800fb92 <_dtoa_r+0xae2>
 800fb8a:	2b39      	cmp	r3, #57	; 0x39
 800fb8c:	d0ee      	beq.n	800fb6c <_dtoa_r+0xabc>
 800fb8e:	3301      	adds	r3, #1
 800fb90:	e7c7      	b.n	800fb22 <_dtoa_r+0xa72>
 800fb92:	9a01      	ldr	r2, [sp, #4]
 800fb94:	9907      	ldr	r1, [sp, #28]
 800fb96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb9a:	428a      	cmp	r2, r1
 800fb9c:	d02a      	beq.n	800fbf4 <_dtoa_r+0xb44>
 800fb9e:	4659      	mov	r1, fp
 800fba0:	2300      	movs	r3, #0
 800fba2:	220a      	movs	r2, #10
 800fba4:	4620      	mov	r0, r4
 800fba6:	f000 fc75 	bl	8010494 <__multadd>
 800fbaa:	45b8      	cmp	r8, r7
 800fbac:	4683      	mov	fp, r0
 800fbae:	f04f 0300 	mov.w	r3, #0
 800fbb2:	f04f 020a 	mov.w	r2, #10
 800fbb6:	4641      	mov	r1, r8
 800fbb8:	4620      	mov	r0, r4
 800fbba:	d107      	bne.n	800fbcc <_dtoa_r+0xb1c>
 800fbbc:	f000 fc6a 	bl	8010494 <__multadd>
 800fbc0:	4680      	mov	r8, r0
 800fbc2:	4607      	mov	r7, r0
 800fbc4:	9b01      	ldr	r3, [sp, #4]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	e775      	b.n	800fab8 <_dtoa_r+0xa08>
 800fbcc:	f000 fc62 	bl	8010494 <__multadd>
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	220a      	movs	r2, #10
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f000 fc5b 	bl	8010494 <__multadd>
 800fbde:	4607      	mov	r7, r0
 800fbe0:	e7f0      	b.n	800fbc4 <_dtoa_r+0xb14>
 800fbe2:	f1b9 0f00 	cmp.w	r9, #0
 800fbe6:	9a00      	ldr	r2, [sp, #0]
 800fbe8:	bfcc      	ite	gt
 800fbea:	464d      	movgt	r5, r9
 800fbec:	2501      	movle	r5, #1
 800fbee:	4415      	add	r5, r2
 800fbf0:	f04f 0800 	mov.w	r8, #0
 800fbf4:	4659      	mov	r1, fp
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	9301      	str	r3, [sp, #4]
 800fbfc:	f000 fe44 	bl	8010888 <__lshift>
 800fc00:	4631      	mov	r1, r6
 800fc02:	4683      	mov	fp, r0
 800fc04:	f000 feac 	bl	8010960 <__mcmp>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	dcb2      	bgt.n	800fb72 <_dtoa_r+0xac2>
 800fc0c:	d102      	bne.n	800fc14 <_dtoa_r+0xb64>
 800fc0e:	9b01      	ldr	r3, [sp, #4]
 800fc10:	07db      	lsls	r3, r3, #31
 800fc12:	d4ae      	bmi.n	800fb72 <_dtoa_r+0xac2>
 800fc14:	462b      	mov	r3, r5
 800fc16:	461d      	mov	r5, r3
 800fc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc1c:	2a30      	cmp	r2, #48	; 0x30
 800fc1e:	d0fa      	beq.n	800fc16 <_dtoa_r+0xb66>
 800fc20:	e6f7      	b.n	800fa12 <_dtoa_r+0x962>
 800fc22:	9a00      	ldr	r2, [sp, #0]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d1a5      	bne.n	800fb74 <_dtoa_r+0xac4>
 800fc28:	f10a 0a01 	add.w	sl, sl, #1
 800fc2c:	2331      	movs	r3, #49	; 0x31
 800fc2e:	e779      	b.n	800fb24 <_dtoa_r+0xa74>
 800fc30:	4b13      	ldr	r3, [pc, #76]	; (800fc80 <_dtoa_r+0xbd0>)
 800fc32:	f7ff baaf 	b.w	800f194 <_dtoa_r+0xe4>
 800fc36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f47f aa86 	bne.w	800f14a <_dtoa_r+0x9a>
 800fc3e:	4b11      	ldr	r3, [pc, #68]	; (800fc84 <_dtoa_r+0xbd4>)
 800fc40:	f7ff baa8 	b.w	800f194 <_dtoa_r+0xe4>
 800fc44:	f1b9 0f00 	cmp.w	r9, #0
 800fc48:	dc03      	bgt.n	800fc52 <_dtoa_r+0xba2>
 800fc4a:	9b05      	ldr	r3, [sp, #20]
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	f73f aec9 	bgt.w	800f9e4 <_dtoa_r+0x934>
 800fc52:	9d00      	ldr	r5, [sp, #0]
 800fc54:	4631      	mov	r1, r6
 800fc56:	4658      	mov	r0, fp
 800fc58:	f7ff f99e 	bl	800ef98 <quorem>
 800fc5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fc60:	f805 3b01 	strb.w	r3, [r5], #1
 800fc64:	9a00      	ldr	r2, [sp, #0]
 800fc66:	1aaa      	subs	r2, r5, r2
 800fc68:	4591      	cmp	r9, r2
 800fc6a:	ddba      	ble.n	800fbe2 <_dtoa_r+0xb32>
 800fc6c:	4659      	mov	r1, fp
 800fc6e:	2300      	movs	r3, #0
 800fc70:	220a      	movs	r2, #10
 800fc72:	4620      	mov	r0, r4
 800fc74:	f000 fc0e 	bl	8010494 <__multadd>
 800fc78:	4683      	mov	fp, r0
 800fc7a:	e7eb      	b.n	800fc54 <_dtoa_r+0xba4>
 800fc7c:	08012a54 	.word	0x08012a54
 800fc80:	08012c59 	.word	0x08012c59
 800fc84:	080129d1 	.word	0x080129d1

0800fc88 <rshift>:
 800fc88:	6903      	ldr	r3, [r0, #16]
 800fc8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fc8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fc96:	f100 0414 	add.w	r4, r0, #20
 800fc9a:	dd45      	ble.n	800fd28 <rshift+0xa0>
 800fc9c:	f011 011f 	ands.w	r1, r1, #31
 800fca0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fca4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fca8:	d10c      	bne.n	800fcc4 <rshift+0x3c>
 800fcaa:	f100 0710 	add.w	r7, r0, #16
 800fcae:	4629      	mov	r1, r5
 800fcb0:	42b1      	cmp	r1, r6
 800fcb2:	d334      	bcc.n	800fd1e <rshift+0x96>
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	1eea      	subs	r2, r5, #3
 800fcba:	4296      	cmp	r6, r2
 800fcbc:	bf38      	it	cc
 800fcbe:	2300      	movcc	r3, #0
 800fcc0:	4423      	add	r3, r4
 800fcc2:	e015      	b.n	800fcf0 <rshift+0x68>
 800fcc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fcc8:	f1c1 0820 	rsb	r8, r1, #32
 800fccc:	40cf      	lsrs	r7, r1
 800fcce:	f105 0e04 	add.w	lr, r5, #4
 800fcd2:	46a1      	mov	r9, r4
 800fcd4:	4576      	cmp	r6, lr
 800fcd6:	46f4      	mov	ip, lr
 800fcd8:	d815      	bhi.n	800fd06 <rshift+0x7e>
 800fcda:	1a9b      	subs	r3, r3, r2
 800fcdc:	009a      	lsls	r2, r3, #2
 800fcde:	3a04      	subs	r2, #4
 800fce0:	3501      	adds	r5, #1
 800fce2:	42ae      	cmp	r6, r5
 800fce4:	bf38      	it	cc
 800fce6:	2200      	movcc	r2, #0
 800fce8:	18a3      	adds	r3, r4, r2
 800fcea:	50a7      	str	r7, [r4, r2]
 800fcec:	b107      	cbz	r7, 800fcf0 <rshift+0x68>
 800fcee:	3304      	adds	r3, #4
 800fcf0:	1b1a      	subs	r2, r3, r4
 800fcf2:	42a3      	cmp	r3, r4
 800fcf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fcf8:	bf08      	it	eq
 800fcfa:	2300      	moveq	r3, #0
 800fcfc:	6102      	str	r2, [r0, #16]
 800fcfe:	bf08      	it	eq
 800fd00:	6143      	streq	r3, [r0, #20]
 800fd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd06:	f8dc c000 	ldr.w	ip, [ip]
 800fd0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd0e:	ea4c 0707 	orr.w	r7, ip, r7
 800fd12:	f849 7b04 	str.w	r7, [r9], #4
 800fd16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd1a:	40cf      	lsrs	r7, r1
 800fd1c:	e7da      	b.n	800fcd4 <rshift+0x4c>
 800fd1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd22:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd26:	e7c3      	b.n	800fcb0 <rshift+0x28>
 800fd28:	4623      	mov	r3, r4
 800fd2a:	e7e1      	b.n	800fcf0 <rshift+0x68>

0800fd2c <__hexdig_fun>:
 800fd2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd30:	2b09      	cmp	r3, #9
 800fd32:	d802      	bhi.n	800fd3a <__hexdig_fun+0xe>
 800fd34:	3820      	subs	r0, #32
 800fd36:	b2c0      	uxtb	r0, r0
 800fd38:	4770      	bx	lr
 800fd3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fd3e:	2b05      	cmp	r3, #5
 800fd40:	d801      	bhi.n	800fd46 <__hexdig_fun+0x1a>
 800fd42:	3847      	subs	r0, #71	; 0x47
 800fd44:	e7f7      	b.n	800fd36 <__hexdig_fun+0xa>
 800fd46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd4a:	2b05      	cmp	r3, #5
 800fd4c:	d801      	bhi.n	800fd52 <__hexdig_fun+0x26>
 800fd4e:	3827      	subs	r0, #39	; 0x27
 800fd50:	e7f1      	b.n	800fd36 <__hexdig_fun+0xa>
 800fd52:	2000      	movs	r0, #0
 800fd54:	4770      	bx	lr
	...

0800fd58 <__gethex>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	ed2d 8b02 	vpush	{d8}
 800fd60:	b089      	sub	sp, #36	; 0x24
 800fd62:	ee08 0a10 	vmov	s16, r0
 800fd66:	9304      	str	r3, [sp, #16]
 800fd68:	4bbc      	ldr	r3, [pc, #752]	; (801005c <__gethex+0x304>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	468b      	mov	fp, r1
 800fd72:	4690      	mov	r8, r2
 800fd74:	f7f0 fa9c 	bl	80002b0 <strlen>
 800fd78:	9b01      	ldr	r3, [sp, #4]
 800fd7a:	f8db 2000 	ldr.w	r2, [fp]
 800fd7e:	4403      	add	r3, r0
 800fd80:	4682      	mov	sl, r0
 800fd82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fd86:	9305      	str	r3, [sp, #20]
 800fd88:	1c93      	adds	r3, r2, #2
 800fd8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fd8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fd92:	32fe      	adds	r2, #254	; 0xfe
 800fd94:	18d1      	adds	r1, r2, r3
 800fd96:	461f      	mov	r7, r3
 800fd98:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd9c:	9100      	str	r1, [sp, #0]
 800fd9e:	2830      	cmp	r0, #48	; 0x30
 800fda0:	d0f8      	beq.n	800fd94 <__gethex+0x3c>
 800fda2:	f7ff ffc3 	bl	800fd2c <__hexdig_fun>
 800fda6:	4604      	mov	r4, r0
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d13a      	bne.n	800fe22 <__gethex+0xca>
 800fdac:	9901      	ldr	r1, [sp, #4]
 800fdae:	4652      	mov	r2, sl
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f001 fc9d 	bl	80116f0 <strncmp>
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d168      	bne.n	800fe8e <__gethex+0x136>
 800fdbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fdc0:	eb07 060a 	add.w	r6, r7, sl
 800fdc4:	f7ff ffb2 	bl	800fd2c <__hexdig_fun>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d062      	beq.n	800fe92 <__gethex+0x13a>
 800fdcc:	4633      	mov	r3, r6
 800fdce:	7818      	ldrb	r0, [r3, #0]
 800fdd0:	2830      	cmp	r0, #48	; 0x30
 800fdd2:	461f      	mov	r7, r3
 800fdd4:	f103 0301 	add.w	r3, r3, #1
 800fdd8:	d0f9      	beq.n	800fdce <__gethex+0x76>
 800fdda:	f7ff ffa7 	bl	800fd2c <__hexdig_fun>
 800fdde:	2301      	movs	r3, #1
 800fde0:	fab0 f480 	clz	r4, r0
 800fde4:	0964      	lsrs	r4, r4, #5
 800fde6:	4635      	mov	r5, r6
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	463a      	mov	r2, r7
 800fdec:	4616      	mov	r6, r2
 800fdee:	3201      	adds	r2, #1
 800fdf0:	7830      	ldrb	r0, [r6, #0]
 800fdf2:	f7ff ff9b 	bl	800fd2c <__hexdig_fun>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d1f8      	bne.n	800fdec <__gethex+0x94>
 800fdfa:	9901      	ldr	r1, [sp, #4]
 800fdfc:	4652      	mov	r2, sl
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f001 fc76 	bl	80116f0 <strncmp>
 800fe04:	b980      	cbnz	r0, 800fe28 <__gethex+0xd0>
 800fe06:	b94d      	cbnz	r5, 800fe1c <__gethex+0xc4>
 800fe08:	eb06 050a 	add.w	r5, r6, sl
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	4616      	mov	r6, r2
 800fe10:	3201      	adds	r2, #1
 800fe12:	7830      	ldrb	r0, [r6, #0]
 800fe14:	f7ff ff8a 	bl	800fd2c <__hexdig_fun>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d1f8      	bne.n	800fe0e <__gethex+0xb6>
 800fe1c:	1bad      	subs	r5, r5, r6
 800fe1e:	00ad      	lsls	r5, r5, #2
 800fe20:	e004      	b.n	800fe2c <__gethex+0xd4>
 800fe22:	2400      	movs	r4, #0
 800fe24:	4625      	mov	r5, r4
 800fe26:	e7e0      	b.n	800fdea <__gethex+0x92>
 800fe28:	2d00      	cmp	r5, #0
 800fe2a:	d1f7      	bne.n	800fe1c <__gethex+0xc4>
 800fe2c:	7833      	ldrb	r3, [r6, #0]
 800fe2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe32:	2b50      	cmp	r3, #80	; 0x50
 800fe34:	d13b      	bne.n	800feae <__gethex+0x156>
 800fe36:	7873      	ldrb	r3, [r6, #1]
 800fe38:	2b2b      	cmp	r3, #43	; 0x2b
 800fe3a:	d02c      	beq.n	800fe96 <__gethex+0x13e>
 800fe3c:	2b2d      	cmp	r3, #45	; 0x2d
 800fe3e:	d02e      	beq.n	800fe9e <__gethex+0x146>
 800fe40:	1c71      	adds	r1, r6, #1
 800fe42:	f04f 0900 	mov.w	r9, #0
 800fe46:	7808      	ldrb	r0, [r1, #0]
 800fe48:	f7ff ff70 	bl	800fd2c <__hexdig_fun>
 800fe4c:	1e43      	subs	r3, r0, #1
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b18      	cmp	r3, #24
 800fe52:	d82c      	bhi.n	800feae <__gethex+0x156>
 800fe54:	f1a0 0210 	sub.w	r2, r0, #16
 800fe58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe5c:	f7ff ff66 	bl	800fd2c <__hexdig_fun>
 800fe60:	1e43      	subs	r3, r0, #1
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	2b18      	cmp	r3, #24
 800fe66:	d91d      	bls.n	800fea4 <__gethex+0x14c>
 800fe68:	f1b9 0f00 	cmp.w	r9, #0
 800fe6c:	d000      	beq.n	800fe70 <__gethex+0x118>
 800fe6e:	4252      	negs	r2, r2
 800fe70:	4415      	add	r5, r2
 800fe72:	f8cb 1000 	str.w	r1, [fp]
 800fe76:	b1e4      	cbz	r4, 800feb2 <__gethex+0x15a>
 800fe78:	9b00      	ldr	r3, [sp, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	bf14      	ite	ne
 800fe7e:	2700      	movne	r7, #0
 800fe80:	2706      	moveq	r7, #6
 800fe82:	4638      	mov	r0, r7
 800fe84:	b009      	add	sp, #36	; 0x24
 800fe86:	ecbd 8b02 	vpop	{d8}
 800fe8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8e:	463e      	mov	r6, r7
 800fe90:	4625      	mov	r5, r4
 800fe92:	2401      	movs	r4, #1
 800fe94:	e7ca      	b.n	800fe2c <__gethex+0xd4>
 800fe96:	f04f 0900 	mov.w	r9, #0
 800fe9a:	1cb1      	adds	r1, r6, #2
 800fe9c:	e7d3      	b.n	800fe46 <__gethex+0xee>
 800fe9e:	f04f 0901 	mov.w	r9, #1
 800fea2:	e7fa      	b.n	800fe9a <__gethex+0x142>
 800fea4:	230a      	movs	r3, #10
 800fea6:	fb03 0202 	mla	r2, r3, r2, r0
 800feaa:	3a10      	subs	r2, #16
 800feac:	e7d4      	b.n	800fe58 <__gethex+0x100>
 800feae:	4631      	mov	r1, r6
 800feb0:	e7df      	b.n	800fe72 <__gethex+0x11a>
 800feb2:	1bf3      	subs	r3, r6, r7
 800feb4:	3b01      	subs	r3, #1
 800feb6:	4621      	mov	r1, r4
 800feb8:	2b07      	cmp	r3, #7
 800feba:	dc0b      	bgt.n	800fed4 <__gethex+0x17c>
 800febc:	ee18 0a10 	vmov	r0, s16
 800fec0:	f000 fa86 	bl	80103d0 <_Balloc>
 800fec4:	4604      	mov	r4, r0
 800fec6:	b940      	cbnz	r0, 800feda <__gethex+0x182>
 800fec8:	4b65      	ldr	r3, [pc, #404]	; (8010060 <__gethex+0x308>)
 800feca:	4602      	mov	r2, r0
 800fecc:	21de      	movs	r1, #222	; 0xde
 800fece:	4865      	ldr	r0, [pc, #404]	; (8010064 <__gethex+0x30c>)
 800fed0:	f001 fce6 	bl	80118a0 <__assert_func>
 800fed4:	3101      	adds	r1, #1
 800fed6:	105b      	asrs	r3, r3, #1
 800fed8:	e7ee      	b.n	800feb8 <__gethex+0x160>
 800feda:	f100 0914 	add.w	r9, r0, #20
 800fede:	f04f 0b00 	mov.w	fp, #0
 800fee2:	f1ca 0301 	rsb	r3, sl, #1
 800fee6:	f8cd 9008 	str.w	r9, [sp, #8]
 800feea:	f8cd b000 	str.w	fp, [sp]
 800feee:	9306      	str	r3, [sp, #24]
 800fef0:	42b7      	cmp	r7, r6
 800fef2:	d340      	bcc.n	800ff76 <__gethex+0x21e>
 800fef4:	9802      	ldr	r0, [sp, #8]
 800fef6:	9b00      	ldr	r3, [sp, #0]
 800fef8:	f840 3b04 	str.w	r3, [r0], #4
 800fefc:	eba0 0009 	sub.w	r0, r0, r9
 800ff00:	1080      	asrs	r0, r0, #2
 800ff02:	0146      	lsls	r6, r0, #5
 800ff04:	6120      	str	r0, [r4, #16]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 fb58 	bl	80105bc <__hi0bits>
 800ff0c:	1a30      	subs	r0, r6, r0
 800ff0e:	f8d8 6000 	ldr.w	r6, [r8]
 800ff12:	42b0      	cmp	r0, r6
 800ff14:	dd63      	ble.n	800ffde <__gethex+0x286>
 800ff16:	1b87      	subs	r7, r0, r6
 800ff18:	4639      	mov	r1, r7
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f000 fef2 	bl	8010d04 <__any_on>
 800ff20:	4682      	mov	sl, r0
 800ff22:	b1a8      	cbz	r0, 800ff50 <__gethex+0x1f8>
 800ff24:	1e7b      	subs	r3, r7, #1
 800ff26:	1159      	asrs	r1, r3, #5
 800ff28:	f003 021f 	and.w	r2, r3, #31
 800ff2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ff30:	f04f 0a01 	mov.w	sl, #1
 800ff34:	fa0a f202 	lsl.w	r2, sl, r2
 800ff38:	420a      	tst	r2, r1
 800ff3a:	d009      	beq.n	800ff50 <__gethex+0x1f8>
 800ff3c:	4553      	cmp	r3, sl
 800ff3e:	dd05      	ble.n	800ff4c <__gethex+0x1f4>
 800ff40:	1eb9      	subs	r1, r7, #2
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fede 	bl	8010d04 <__any_on>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d145      	bne.n	800ffd8 <__gethex+0x280>
 800ff4c:	f04f 0a02 	mov.w	sl, #2
 800ff50:	4639      	mov	r1, r7
 800ff52:	4620      	mov	r0, r4
 800ff54:	f7ff fe98 	bl	800fc88 <rshift>
 800ff58:	443d      	add	r5, r7
 800ff5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff5e:	42ab      	cmp	r3, r5
 800ff60:	da4c      	bge.n	800fffc <__gethex+0x2a4>
 800ff62:	ee18 0a10 	vmov	r0, s16
 800ff66:	4621      	mov	r1, r4
 800ff68:	f000 fa72 	bl	8010450 <_Bfree>
 800ff6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff6e:	2300      	movs	r3, #0
 800ff70:	6013      	str	r3, [r2, #0]
 800ff72:	27a3      	movs	r7, #163	; 0xa3
 800ff74:	e785      	b.n	800fe82 <__gethex+0x12a>
 800ff76:	1e73      	subs	r3, r6, #1
 800ff78:	9a05      	ldr	r2, [sp, #20]
 800ff7a:	9303      	str	r3, [sp, #12]
 800ff7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d019      	beq.n	800ffb8 <__gethex+0x260>
 800ff84:	f1bb 0f20 	cmp.w	fp, #32
 800ff88:	d107      	bne.n	800ff9a <__gethex+0x242>
 800ff8a:	9b02      	ldr	r3, [sp, #8]
 800ff8c:	9a00      	ldr	r2, [sp, #0]
 800ff8e:	f843 2b04 	str.w	r2, [r3], #4
 800ff92:	9302      	str	r3, [sp, #8]
 800ff94:	2300      	movs	r3, #0
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	469b      	mov	fp, r3
 800ff9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ff9e:	f7ff fec5 	bl	800fd2c <__hexdig_fun>
 800ffa2:	9b00      	ldr	r3, [sp, #0]
 800ffa4:	f000 000f 	and.w	r0, r0, #15
 800ffa8:	fa00 f00b 	lsl.w	r0, r0, fp
 800ffac:	4303      	orrs	r3, r0
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	f10b 0b04 	add.w	fp, fp, #4
 800ffb4:	9b03      	ldr	r3, [sp, #12]
 800ffb6:	e00d      	b.n	800ffd4 <__gethex+0x27c>
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	9a06      	ldr	r2, [sp, #24]
 800ffbc:	4413      	add	r3, r2
 800ffbe:	42bb      	cmp	r3, r7
 800ffc0:	d3e0      	bcc.n	800ff84 <__gethex+0x22c>
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	9901      	ldr	r1, [sp, #4]
 800ffc6:	9307      	str	r3, [sp, #28]
 800ffc8:	4652      	mov	r2, sl
 800ffca:	f001 fb91 	bl	80116f0 <strncmp>
 800ffce:	9b07      	ldr	r3, [sp, #28]
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d1d7      	bne.n	800ff84 <__gethex+0x22c>
 800ffd4:	461e      	mov	r6, r3
 800ffd6:	e78b      	b.n	800fef0 <__gethex+0x198>
 800ffd8:	f04f 0a03 	mov.w	sl, #3
 800ffdc:	e7b8      	b.n	800ff50 <__gethex+0x1f8>
 800ffde:	da0a      	bge.n	800fff6 <__gethex+0x29e>
 800ffe0:	1a37      	subs	r7, r6, r0
 800ffe2:	4621      	mov	r1, r4
 800ffe4:	ee18 0a10 	vmov	r0, s16
 800ffe8:	463a      	mov	r2, r7
 800ffea:	f000 fc4d 	bl	8010888 <__lshift>
 800ffee:	1bed      	subs	r5, r5, r7
 800fff0:	4604      	mov	r4, r0
 800fff2:	f100 0914 	add.w	r9, r0, #20
 800fff6:	f04f 0a00 	mov.w	sl, #0
 800fffa:	e7ae      	b.n	800ff5a <__gethex+0x202>
 800fffc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010000:	42a8      	cmp	r0, r5
 8010002:	dd72      	ble.n	80100ea <__gethex+0x392>
 8010004:	1b45      	subs	r5, r0, r5
 8010006:	42ae      	cmp	r6, r5
 8010008:	dc36      	bgt.n	8010078 <__gethex+0x320>
 801000a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801000e:	2b02      	cmp	r3, #2
 8010010:	d02a      	beq.n	8010068 <__gethex+0x310>
 8010012:	2b03      	cmp	r3, #3
 8010014:	d02c      	beq.n	8010070 <__gethex+0x318>
 8010016:	2b01      	cmp	r3, #1
 8010018:	d115      	bne.n	8010046 <__gethex+0x2ee>
 801001a:	42ae      	cmp	r6, r5
 801001c:	d113      	bne.n	8010046 <__gethex+0x2ee>
 801001e:	2e01      	cmp	r6, #1
 8010020:	d10b      	bne.n	801003a <__gethex+0x2e2>
 8010022:	9a04      	ldr	r2, [sp, #16]
 8010024:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	2301      	movs	r3, #1
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	f8c9 3000 	str.w	r3, [r9]
 8010032:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010034:	2762      	movs	r7, #98	; 0x62
 8010036:	601c      	str	r4, [r3, #0]
 8010038:	e723      	b.n	800fe82 <__gethex+0x12a>
 801003a:	1e71      	subs	r1, r6, #1
 801003c:	4620      	mov	r0, r4
 801003e:	f000 fe61 	bl	8010d04 <__any_on>
 8010042:	2800      	cmp	r0, #0
 8010044:	d1ed      	bne.n	8010022 <__gethex+0x2ca>
 8010046:	ee18 0a10 	vmov	r0, s16
 801004a:	4621      	mov	r1, r4
 801004c:	f000 fa00 	bl	8010450 <_Bfree>
 8010050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010052:	2300      	movs	r3, #0
 8010054:	6013      	str	r3, [r2, #0]
 8010056:	2750      	movs	r7, #80	; 0x50
 8010058:	e713      	b.n	800fe82 <__gethex+0x12a>
 801005a:	bf00      	nop
 801005c:	08012ad0 	.word	0x08012ad0
 8010060:	08012a54 	.word	0x08012a54
 8010064:	08012a65 	.word	0x08012a65
 8010068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801006a:	2b00      	cmp	r3, #0
 801006c:	d1eb      	bne.n	8010046 <__gethex+0x2ee>
 801006e:	e7d8      	b.n	8010022 <__gethex+0x2ca>
 8010070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1d5      	bne.n	8010022 <__gethex+0x2ca>
 8010076:	e7e6      	b.n	8010046 <__gethex+0x2ee>
 8010078:	1e6f      	subs	r7, r5, #1
 801007a:	f1ba 0f00 	cmp.w	sl, #0
 801007e:	d131      	bne.n	80100e4 <__gethex+0x38c>
 8010080:	b127      	cbz	r7, 801008c <__gethex+0x334>
 8010082:	4639      	mov	r1, r7
 8010084:	4620      	mov	r0, r4
 8010086:	f000 fe3d 	bl	8010d04 <__any_on>
 801008a:	4682      	mov	sl, r0
 801008c:	117b      	asrs	r3, r7, #5
 801008e:	2101      	movs	r1, #1
 8010090:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010094:	f007 071f 	and.w	r7, r7, #31
 8010098:	fa01 f707 	lsl.w	r7, r1, r7
 801009c:	421f      	tst	r7, r3
 801009e:	4629      	mov	r1, r5
 80100a0:	4620      	mov	r0, r4
 80100a2:	bf18      	it	ne
 80100a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80100a8:	1b76      	subs	r6, r6, r5
 80100aa:	f7ff fded 	bl	800fc88 <rshift>
 80100ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80100b2:	2702      	movs	r7, #2
 80100b4:	f1ba 0f00 	cmp.w	sl, #0
 80100b8:	d048      	beq.n	801014c <__gethex+0x3f4>
 80100ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d015      	beq.n	80100ee <__gethex+0x396>
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	d017      	beq.n	80100f6 <__gethex+0x39e>
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d109      	bne.n	80100de <__gethex+0x386>
 80100ca:	f01a 0f02 	tst.w	sl, #2
 80100ce:	d006      	beq.n	80100de <__gethex+0x386>
 80100d0:	f8d9 0000 	ldr.w	r0, [r9]
 80100d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80100d8:	f01a 0f01 	tst.w	sl, #1
 80100dc:	d10e      	bne.n	80100fc <__gethex+0x3a4>
 80100de:	f047 0710 	orr.w	r7, r7, #16
 80100e2:	e033      	b.n	801014c <__gethex+0x3f4>
 80100e4:	f04f 0a01 	mov.w	sl, #1
 80100e8:	e7d0      	b.n	801008c <__gethex+0x334>
 80100ea:	2701      	movs	r7, #1
 80100ec:	e7e2      	b.n	80100b4 <__gethex+0x35c>
 80100ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100f0:	f1c3 0301 	rsb	r3, r3, #1
 80100f4:	9315      	str	r3, [sp, #84]	; 0x54
 80100f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d0f0      	beq.n	80100de <__gethex+0x386>
 80100fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010100:	f104 0314 	add.w	r3, r4, #20
 8010104:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010108:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801010c:	f04f 0c00 	mov.w	ip, #0
 8010110:	4618      	mov	r0, r3
 8010112:	f853 2b04 	ldr.w	r2, [r3], #4
 8010116:	f1b2 3fff 	cmp.w	r2, #4294967295
 801011a:	d01c      	beq.n	8010156 <__gethex+0x3fe>
 801011c:	3201      	adds	r2, #1
 801011e:	6002      	str	r2, [r0, #0]
 8010120:	2f02      	cmp	r7, #2
 8010122:	f104 0314 	add.w	r3, r4, #20
 8010126:	d13f      	bne.n	80101a8 <__gethex+0x450>
 8010128:	f8d8 2000 	ldr.w	r2, [r8]
 801012c:	3a01      	subs	r2, #1
 801012e:	42b2      	cmp	r2, r6
 8010130:	d10a      	bne.n	8010148 <__gethex+0x3f0>
 8010132:	1171      	asrs	r1, r6, #5
 8010134:	2201      	movs	r2, #1
 8010136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801013a:	f006 061f 	and.w	r6, r6, #31
 801013e:	fa02 f606 	lsl.w	r6, r2, r6
 8010142:	421e      	tst	r6, r3
 8010144:	bf18      	it	ne
 8010146:	4617      	movne	r7, r2
 8010148:	f047 0720 	orr.w	r7, r7, #32
 801014c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801014e:	601c      	str	r4, [r3, #0]
 8010150:	9b04      	ldr	r3, [sp, #16]
 8010152:	601d      	str	r5, [r3, #0]
 8010154:	e695      	b.n	800fe82 <__gethex+0x12a>
 8010156:	4299      	cmp	r1, r3
 8010158:	f843 cc04 	str.w	ip, [r3, #-4]
 801015c:	d8d8      	bhi.n	8010110 <__gethex+0x3b8>
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	459b      	cmp	fp, r3
 8010162:	db19      	blt.n	8010198 <__gethex+0x440>
 8010164:	6861      	ldr	r1, [r4, #4]
 8010166:	ee18 0a10 	vmov	r0, s16
 801016a:	3101      	adds	r1, #1
 801016c:	f000 f930 	bl	80103d0 <_Balloc>
 8010170:	4681      	mov	r9, r0
 8010172:	b918      	cbnz	r0, 801017c <__gethex+0x424>
 8010174:	4b1a      	ldr	r3, [pc, #104]	; (80101e0 <__gethex+0x488>)
 8010176:	4602      	mov	r2, r0
 8010178:	2184      	movs	r1, #132	; 0x84
 801017a:	e6a8      	b.n	800fece <__gethex+0x176>
 801017c:	6922      	ldr	r2, [r4, #16]
 801017e:	3202      	adds	r2, #2
 8010180:	f104 010c 	add.w	r1, r4, #12
 8010184:	0092      	lsls	r2, r2, #2
 8010186:	300c      	adds	r0, #12
 8010188:	f7fc fff0 	bl	800d16c <memcpy>
 801018c:	4621      	mov	r1, r4
 801018e:	ee18 0a10 	vmov	r0, s16
 8010192:	f000 f95d 	bl	8010450 <_Bfree>
 8010196:	464c      	mov	r4, r9
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101a0:	6122      	str	r2, [r4, #16]
 80101a2:	2201      	movs	r2, #1
 80101a4:	615a      	str	r2, [r3, #20]
 80101a6:	e7bb      	b.n	8010120 <__gethex+0x3c8>
 80101a8:	6922      	ldr	r2, [r4, #16]
 80101aa:	455a      	cmp	r2, fp
 80101ac:	dd0b      	ble.n	80101c6 <__gethex+0x46e>
 80101ae:	2101      	movs	r1, #1
 80101b0:	4620      	mov	r0, r4
 80101b2:	f7ff fd69 	bl	800fc88 <rshift>
 80101b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101ba:	3501      	adds	r5, #1
 80101bc:	42ab      	cmp	r3, r5
 80101be:	f6ff aed0 	blt.w	800ff62 <__gethex+0x20a>
 80101c2:	2701      	movs	r7, #1
 80101c4:	e7c0      	b.n	8010148 <__gethex+0x3f0>
 80101c6:	f016 061f 	ands.w	r6, r6, #31
 80101ca:	d0fa      	beq.n	80101c2 <__gethex+0x46a>
 80101cc:	449a      	add	sl, r3
 80101ce:	f1c6 0620 	rsb	r6, r6, #32
 80101d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80101d6:	f000 f9f1 	bl	80105bc <__hi0bits>
 80101da:	42b0      	cmp	r0, r6
 80101dc:	dbe7      	blt.n	80101ae <__gethex+0x456>
 80101de:	e7f0      	b.n	80101c2 <__gethex+0x46a>
 80101e0:	08012a54 	.word	0x08012a54

080101e4 <L_shift>:
 80101e4:	f1c2 0208 	rsb	r2, r2, #8
 80101e8:	0092      	lsls	r2, r2, #2
 80101ea:	b570      	push	{r4, r5, r6, lr}
 80101ec:	f1c2 0620 	rsb	r6, r2, #32
 80101f0:	6843      	ldr	r3, [r0, #4]
 80101f2:	6804      	ldr	r4, [r0, #0]
 80101f4:	fa03 f506 	lsl.w	r5, r3, r6
 80101f8:	432c      	orrs	r4, r5
 80101fa:	40d3      	lsrs	r3, r2
 80101fc:	6004      	str	r4, [r0, #0]
 80101fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010202:	4288      	cmp	r0, r1
 8010204:	d3f4      	bcc.n	80101f0 <L_shift+0xc>
 8010206:	bd70      	pop	{r4, r5, r6, pc}

08010208 <__match>:
 8010208:	b530      	push	{r4, r5, lr}
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	3301      	adds	r3, #1
 801020e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010212:	b914      	cbnz	r4, 801021a <__match+0x12>
 8010214:	6003      	str	r3, [r0, #0]
 8010216:	2001      	movs	r0, #1
 8010218:	bd30      	pop	{r4, r5, pc}
 801021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801021e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010222:	2d19      	cmp	r5, #25
 8010224:	bf98      	it	ls
 8010226:	3220      	addls	r2, #32
 8010228:	42a2      	cmp	r2, r4
 801022a:	d0f0      	beq.n	801020e <__match+0x6>
 801022c:	2000      	movs	r0, #0
 801022e:	e7f3      	b.n	8010218 <__match+0x10>

08010230 <__hexnan>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	680b      	ldr	r3, [r1, #0]
 8010236:	6801      	ldr	r1, [r0, #0]
 8010238:	115e      	asrs	r6, r3, #5
 801023a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801023e:	f013 031f 	ands.w	r3, r3, #31
 8010242:	b087      	sub	sp, #28
 8010244:	bf18      	it	ne
 8010246:	3604      	addne	r6, #4
 8010248:	2500      	movs	r5, #0
 801024a:	1f37      	subs	r7, r6, #4
 801024c:	4682      	mov	sl, r0
 801024e:	4690      	mov	r8, r2
 8010250:	9301      	str	r3, [sp, #4]
 8010252:	f846 5c04 	str.w	r5, [r6, #-4]
 8010256:	46b9      	mov	r9, r7
 8010258:	463c      	mov	r4, r7
 801025a:	9502      	str	r5, [sp, #8]
 801025c:	46ab      	mov	fp, r5
 801025e:	784a      	ldrb	r2, [r1, #1]
 8010260:	1c4b      	adds	r3, r1, #1
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	b342      	cbz	r2, 80102b8 <__hexnan+0x88>
 8010266:	4610      	mov	r0, r2
 8010268:	9105      	str	r1, [sp, #20]
 801026a:	9204      	str	r2, [sp, #16]
 801026c:	f7ff fd5e 	bl	800fd2c <__hexdig_fun>
 8010270:	2800      	cmp	r0, #0
 8010272:	d14f      	bne.n	8010314 <__hexnan+0xe4>
 8010274:	9a04      	ldr	r2, [sp, #16]
 8010276:	9905      	ldr	r1, [sp, #20]
 8010278:	2a20      	cmp	r2, #32
 801027a:	d818      	bhi.n	80102ae <__hexnan+0x7e>
 801027c:	9b02      	ldr	r3, [sp, #8]
 801027e:	459b      	cmp	fp, r3
 8010280:	dd13      	ble.n	80102aa <__hexnan+0x7a>
 8010282:	454c      	cmp	r4, r9
 8010284:	d206      	bcs.n	8010294 <__hexnan+0x64>
 8010286:	2d07      	cmp	r5, #7
 8010288:	dc04      	bgt.n	8010294 <__hexnan+0x64>
 801028a:	462a      	mov	r2, r5
 801028c:	4649      	mov	r1, r9
 801028e:	4620      	mov	r0, r4
 8010290:	f7ff ffa8 	bl	80101e4 <L_shift>
 8010294:	4544      	cmp	r4, r8
 8010296:	d950      	bls.n	801033a <__hexnan+0x10a>
 8010298:	2300      	movs	r3, #0
 801029a:	f1a4 0904 	sub.w	r9, r4, #4
 801029e:	f844 3c04 	str.w	r3, [r4, #-4]
 80102a2:	f8cd b008 	str.w	fp, [sp, #8]
 80102a6:	464c      	mov	r4, r9
 80102a8:	461d      	mov	r5, r3
 80102aa:	9903      	ldr	r1, [sp, #12]
 80102ac:	e7d7      	b.n	801025e <__hexnan+0x2e>
 80102ae:	2a29      	cmp	r2, #41	; 0x29
 80102b0:	d156      	bne.n	8010360 <__hexnan+0x130>
 80102b2:	3102      	adds	r1, #2
 80102b4:	f8ca 1000 	str.w	r1, [sl]
 80102b8:	f1bb 0f00 	cmp.w	fp, #0
 80102bc:	d050      	beq.n	8010360 <__hexnan+0x130>
 80102be:	454c      	cmp	r4, r9
 80102c0:	d206      	bcs.n	80102d0 <__hexnan+0xa0>
 80102c2:	2d07      	cmp	r5, #7
 80102c4:	dc04      	bgt.n	80102d0 <__hexnan+0xa0>
 80102c6:	462a      	mov	r2, r5
 80102c8:	4649      	mov	r1, r9
 80102ca:	4620      	mov	r0, r4
 80102cc:	f7ff ff8a 	bl	80101e4 <L_shift>
 80102d0:	4544      	cmp	r4, r8
 80102d2:	d934      	bls.n	801033e <__hexnan+0x10e>
 80102d4:	f1a8 0204 	sub.w	r2, r8, #4
 80102d8:	4623      	mov	r3, r4
 80102da:	f853 1b04 	ldr.w	r1, [r3], #4
 80102de:	f842 1f04 	str.w	r1, [r2, #4]!
 80102e2:	429f      	cmp	r7, r3
 80102e4:	d2f9      	bcs.n	80102da <__hexnan+0xaa>
 80102e6:	1b3b      	subs	r3, r7, r4
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3304      	adds	r3, #4
 80102ee:	3401      	adds	r4, #1
 80102f0:	3e03      	subs	r6, #3
 80102f2:	42b4      	cmp	r4, r6
 80102f4:	bf88      	it	hi
 80102f6:	2304      	movhi	r3, #4
 80102f8:	4443      	add	r3, r8
 80102fa:	2200      	movs	r2, #0
 80102fc:	f843 2b04 	str.w	r2, [r3], #4
 8010300:	429f      	cmp	r7, r3
 8010302:	d2fb      	bcs.n	80102fc <__hexnan+0xcc>
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	b91b      	cbnz	r3, 8010310 <__hexnan+0xe0>
 8010308:	4547      	cmp	r7, r8
 801030a:	d127      	bne.n	801035c <__hexnan+0x12c>
 801030c:	2301      	movs	r3, #1
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	2005      	movs	r0, #5
 8010312:	e026      	b.n	8010362 <__hexnan+0x132>
 8010314:	3501      	adds	r5, #1
 8010316:	2d08      	cmp	r5, #8
 8010318:	f10b 0b01 	add.w	fp, fp, #1
 801031c:	dd06      	ble.n	801032c <__hexnan+0xfc>
 801031e:	4544      	cmp	r4, r8
 8010320:	d9c3      	bls.n	80102aa <__hexnan+0x7a>
 8010322:	2300      	movs	r3, #0
 8010324:	f844 3c04 	str.w	r3, [r4, #-4]
 8010328:	2501      	movs	r5, #1
 801032a:	3c04      	subs	r4, #4
 801032c:	6822      	ldr	r2, [r4, #0]
 801032e:	f000 000f 	and.w	r0, r0, #15
 8010332:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010336:	6022      	str	r2, [r4, #0]
 8010338:	e7b7      	b.n	80102aa <__hexnan+0x7a>
 801033a:	2508      	movs	r5, #8
 801033c:	e7b5      	b.n	80102aa <__hexnan+0x7a>
 801033e:	9b01      	ldr	r3, [sp, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0df      	beq.n	8010304 <__hexnan+0xd4>
 8010344:	f04f 32ff 	mov.w	r2, #4294967295
 8010348:	f1c3 0320 	rsb	r3, r3, #32
 801034c:	fa22 f303 	lsr.w	r3, r2, r3
 8010350:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010354:	401a      	ands	r2, r3
 8010356:	f846 2c04 	str.w	r2, [r6, #-4]
 801035a:	e7d3      	b.n	8010304 <__hexnan+0xd4>
 801035c:	3f04      	subs	r7, #4
 801035e:	e7d1      	b.n	8010304 <__hexnan+0xd4>
 8010360:	2004      	movs	r0, #4
 8010362:	b007      	add	sp, #28
 8010364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010368 <_localeconv_r>:
 8010368:	4800      	ldr	r0, [pc, #0]	; (801036c <_localeconv_r+0x4>)
 801036a:	4770      	bx	lr
 801036c:	20000164 	.word	0x20000164

08010370 <_lseek_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4d07      	ldr	r5, [pc, #28]	; (8010390 <_lseek_r+0x20>)
 8010374:	4604      	mov	r4, r0
 8010376:	4608      	mov	r0, r1
 8010378:	4611      	mov	r1, r2
 801037a:	2200      	movs	r2, #0
 801037c:	602a      	str	r2, [r5, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	f7f5 fa88 	bl	8005894 <_lseek>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_lseek_r+0x1e>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_lseek_r+0x1e>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	20000624 	.word	0x20000624

08010394 <__ascii_mbtowc>:
 8010394:	b082      	sub	sp, #8
 8010396:	b901      	cbnz	r1, 801039a <__ascii_mbtowc+0x6>
 8010398:	a901      	add	r1, sp, #4
 801039a:	b142      	cbz	r2, 80103ae <__ascii_mbtowc+0x1a>
 801039c:	b14b      	cbz	r3, 80103b2 <__ascii_mbtowc+0x1e>
 801039e:	7813      	ldrb	r3, [r2, #0]
 80103a0:	600b      	str	r3, [r1, #0]
 80103a2:	7812      	ldrb	r2, [r2, #0]
 80103a4:	1e10      	subs	r0, r2, #0
 80103a6:	bf18      	it	ne
 80103a8:	2001      	movne	r0, #1
 80103aa:	b002      	add	sp, #8
 80103ac:	4770      	bx	lr
 80103ae:	4610      	mov	r0, r2
 80103b0:	e7fb      	b.n	80103aa <__ascii_mbtowc+0x16>
 80103b2:	f06f 0001 	mvn.w	r0, #1
 80103b6:	e7f8      	b.n	80103aa <__ascii_mbtowc+0x16>

080103b8 <__malloc_lock>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__malloc_lock+0x8>)
 80103ba:	f001 bc59 	b.w	8011c70 <__retarget_lock_acquire_recursive>
 80103be:	bf00      	nop
 80103c0:	2000062c 	.word	0x2000062c

080103c4 <__malloc_unlock>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__malloc_unlock+0x8>)
 80103c6:	f001 bc54 	b.w	8011c72 <__retarget_lock_release_recursive>
 80103ca:	bf00      	nop
 80103cc:	2000062c 	.word	0x2000062c

080103d0 <_Balloc>:
 80103d0:	b570      	push	{r4, r5, r6, lr}
 80103d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103d4:	4604      	mov	r4, r0
 80103d6:	460d      	mov	r5, r1
 80103d8:	b976      	cbnz	r6, 80103f8 <_Balloc+0x28>
 80103da:	2010      	movs	r0, #16
 80103dc:	f7fc feb6 	bl	800d14c <malloc>
 80103e0:	4602      	mov	r2, r0
 80103e2:	6260      	str	r0, [r4, #36]	; 0x24
 80103e4:	b920      	cbnz	r0, 80103f0 <_Balloc+0x20>
 80103e6:	4b18      	ldr	r3, [pc, #96]	; (8010448 <_Balloc+0x78>)
 80103e8:	4818      	ldr	r0, [pc, #96]	; (801044c <_Balloc+0x7c>)
 80103ea:	2166      	movs	r1, #102	; 0x66
 80103ec:	f001 fa58 	bl	80118a0 <__assert_func>
 80103f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103f4:	6006      	str	r6, [r0, #0]
 80103f6:	60c6      	str	r6, [r0, #12]
 80103f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80103fa:	68f3      	ldr	r3, [r6, #12]
 80103fc:	b183      	cbz	r3, 8010420 <_Balloc+0x50>
 80103fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010406:	b9b8      	cbnz	r0, 8010438 <_Balloc+0x68>
 8010408:	2101      	movs	r1, #1
 801040a:	fa01 f605 	lsl.w	r6, r1, r5
 801040e:	1d72      	adds	r2, r6, #5
 8010410:	0092      	lsls	r2, r2, #2
 8010412:	4620      	mov	r0, r4
 8010414:	f000 fc97 	bl	8010d46 <_calloc_r>
 8010418:	b160      	cbz	r0, 8010434 <_Balloc+0x64>
 801041a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801041e:	e00e      	b.n	801043e <_Balloc+0x6e>
 8010420:	2221      	movs	r2, #33	; 0x21
 8010422:	2104      	movs	r1, #4
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fc8e 	bl	8010d46 <_calloc_r>
 801042a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801042c:	60f0      	str	r0, [r6, #12]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e4      	bne.n	80103fe <_Balloc+0x2e>
 8010434:	2000      	movs	r0, #0
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	6802      	ldr	r2, [r0, #0]
 801043a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801043e:	2300      	movs	r3, #0
 8010440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010444:	e7f7      	b.n	8010436 <_Balloc+0x66>
 8010446:	bf00      	nop
 8010448:	080129de 	.word	0x080129de
 801044c:	08012ae4 	.word	0x08012ae4

08010450 <_Bfree>:
 8010450:	b570      	push	{r4, r5, r6, lr}
 8010452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010454:	4605      	mov	r5, r0
 8010456:	460c      	mov	r4, r1
 8010458:	b976      	cbnz	r6, 8010478 <_Bfree+0x28>
 801045a:	2010      	movs	r0, #16
 801045c:	f7fc fe76 	bl	800d14c <malloc>
 8010460:	4602      	mov	r2, r0
 8010462:	6268      	str	r0, [r5, #36]	; 0x24
 8010464:	b920      	cbnz	r0, 8010470 <_Bfree+0x20>
 8010466:	4b09      	ldr	r3, [pc, #36]	; (801048c <_Bfree+0x3c>)
 8010468:	4809      	ldr	r0, [pc, #36]	; (8010490 <_Bfree+0x40>)
 801046a:	218a      	movs	r1, #138	; 0x8a
 801046c:	f001 fa18 	bl	80118a0 <__assert_func>
 8010470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010474:	6006      	str	r6, [r0, #0]
 8010476:	60c6      	str	r6, [r0, #12]
 8010478:	b13c      	cbz	r4, 801048a <_Bfree+0x3a>
 801047a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801047c:	6862      	ldr	r2, [r4, #4]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010484:	6021      	str	r1, [r4, #0]
 8010486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801048a:	bd70      	pop	{r4, r5, r6, pc}
 801048c:	080129de 	.word	0x080129de
 8010490:	08012ae4 	.word	0x08012ae4

08010494 <__multadd>:
 8010494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010498:	690e      	ldr	r6, [r1, #16]
 801049a:	4607      	mov	r7, r0
 801049c:	4698      	mov	r8, r3
 801049e:	460c      	mov	r4, r1
 80104a0:	f101 0014 	add.w	r0, r1, #20
 80104a4:	2300      	movs	r3, #0
 80104a6:	6805      	ldr	r5, [r0, #0]
 80104a8:	b2a9      	uxth	r1, r5
 80104aa:	fb02 8101 	mla	r1, r2, r1, r8
 80104ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80104b2:	0c2d      	lsrs	r5, r5, #16
 80104b4:	fb02 c505 	mla	r5, r2, r5, ip
 80104b8:	b289      	uxth	r1, r1
 80104ba:	3301      	adds	r3, #1
 80104bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80104c0:	429e      	cmp	r6, r3
 80104c2:	f840 1b04 	str.w	r1, [r0], #4
 80104c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80104ca:	dcec      	bgt.n	80104a6 <__multadd+0x12>
 80104cc:	f1b8 0f00 	cmp.w	r8, #0
 80104d0:	d022      	beq.n	8010518 <__multadd+0x84>
 80104d2:	68a3      	ldr	r3, [r4, #8]
 80104d4:	42b3      	cmp	r3, r6
 80104d6:	dc19      	bgt.n	801050c <__multadd+0x78>
 80104d8:	6861      	ldr	r1, [r4, #4]
 80104da:	4638      	mov	r0, r7
 80104dc:	3101      	adds	r1, #1
 80104de:	f7ff ff77 	bl	80103d0 <_Balloc>
 80104e2:	4605      	mov	r5, r0
 80104e4:	b928      	cbnz	r0, 80104f2 <__multadd+0x5e>
 80104e6:	4602      	mov	r2, r0
 80104e8:	4b0d      	ldr	r3, [pc, #52]	; (8010520 <__multadd+0x8c>)
 80104ea:	480e      	ldr	r0, [pc, #56]	; (8010524 <__multadd+0x90>)
 80104ec:	21b5      	movs	r1, #181	; 0xb5
 80104ee:	f001 f9d7 	bl	80118a0 <__assert_func>
 80104f2:	6922      	ldr	r2, [r4, #16]
 80104f4:	3202      	adds	r2, #2
 80104f6:	f104 010c 	add.w	r1, r4, #12
 80104fa:	0092      	lsls	r2, r2, #2
 80104fc:	300c      	adds	r0, #12
 80104fe:	f7fc fe35 	bl	800d16c <memcpy>
 8010502:	4621      	mov	r1, r4
 8010504:	4638      	mov	r0, r7
 8010506:	f7ff ffa3 	bl	8010450 <_Bfree>
 801050a:	462c      	mov	r4, r5
 801050c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010510:	3601      	adds	r6, #1
 8010512:	f8c3 8014 	str.w	r8, [r3, #20]
 8010516:	6126      	str	r6, [r4, #16]
 8010518:	4620      	mov	r0, r4
 801051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801051e:	bf00      	nop
 8010520:	08012a54 	.word	0x08012a54
 8010524:	08012ae4 	.word	0x08012ae4

08010528 <__s2b>:
 8010528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801052c:	460c      	mov	r4, r1
 801052e:	4615      	mov	r5, r2
 8010530:	461f      	mov	r7, r3
 8010532:	2209      	movs	r2, #9
 8010534:	3308      	adds	r3, #8
 8010536:	4606      	mov	r6, r0
 8010538:	fb93 f3f2 	sdiv	r3, r3, r2
 801053c:	2100      	movs	r1, #0
 801053e:	2201      	movs	r2, #1
 8010540:	429a      	cmp	r2, r3
 8010542:	db09      	blt.n	8010558 <__s2b+0x30>
 8010544:	4630      	mov	r0, r6
 8010546:	f7ff ff43 	bl	80103d0 <_Balloc>
 801054a:	b940      	cbnz	r0, 801055e <__s2b+0x36>
 801054c:	4602      	mov	r2, r0
 801054e:	4b19      	ldr	r3, [pc, #100]	; (80105b4 <__s2b+0x8c>)
 8010550:	4819      	ldr	r0, [pc, #100]	; (80105b8 <__s2b+0x90>)
 8010552:	21ce      	movs	r1, #206	; 0xce
 8010554:	f001 f9a4 	bl	80118a0 <__assert_func>
 8010558:	0052      	lsls	r2, r2, #1
 801055a:	3101      	adds	r1, #1
 801055c:	e7f0      	b.n	8010540 <__s2b+0x18>
 801055e:	9b08      	ldr	r3, [sp, #32]
 8010560:	6143      	str	r3, [r0, #20]
 8010562:	2d09      	cmp	r5, #9
 8010564:	f04f 0301 	mov.w	r3, #1
 8010568:	6103      	str	r3, [r0, #16]
 801056a:	dd16      	ble.n	801059a <__s2b+0x72>
 801056c:	f104 0909 	add.w	r9, r4, #9
 8010570:	46c8      	mov	r8, r9
 8010572:	442c      	add	r4, r5
 8010574:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010578:	4601      	mov	r1, r0
 801057a:	3b30      	subs	r3, #48	; 0x30
 801057c:	220a      	movs	r2, #10
 801057e:	4630      	mov	r0, r6
 8010580:	f7ff ff88 	bl	8010494 <__multadd>
 8010584:	45a0      	cmp	r8, r4
 8010586:	d1f5      	bne.n	8010574 <__s2b+0x4c>
 8010588:	f1a5 0408 	sub.w	r4, r5, #8
 801058c:	444c      	add	r4, r9
 801058e:	1b2d      	subs	r5, r5, r4
 8010590:	1963      	adds	r3, r4, r5
 8010592:	42bb      	cmp	r3, r7
 8010594:	db04      	blt.n	80105a0 <__s2b+0x78>
 8010596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801059a:	340a      	adds	r4, #10
 801059c:	2509      	movs	r5, #9
 801059e:	e7f6      	b.n	801058e <__s2b+0x66>
 80105a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105a4:	4601      	mov	r1, r0
 80105a6:	3b30      	subs	r3, #48	; 0x30
 80105a8:	220a      	movs	r2, #10
 80105aa:	4630      	mov	r0, r6
 80105ac:	f7ff ff72 	bl	8010494 <__multadd>
 80105b0:	e7ee      	b.n	8010590 <__s2b+0x68>
 80105b2:	bf00      	nop
 80105b4:	08012a54 	.word	0x08012a54
 80105b8:	08012ae4 	.word	0x08012ae4

080105bc <__hi0bits>:
 80105bc:	0c03      	lsrs	r3, r0, #16
 80105be:	041b      	lsls	r3, r3, #16
 80105c0:	b9d3      	cbnz	r3, 80105f8 <__hi0bits+0x3c>
 80105c2:	0400      	lsls	r0, r0, #16
 80105c4:	2310      	movs	r3, #16
 80105c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105ca:	bf04      	itt	eq
 80105cc:	0200      	lsleq	r0, r0, #8
 80105ce:	3308      	addeq	r3, #8
 80105d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105d4:	bf04      	itt	eq
 80105d6:	0100      	lsleq	r0, r0, #4
 80105d8:	3304      	addeq	r3, #4
 80105da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80105de:	bf04      	itt	eq
 80105e0:	0080      	lsleq	r0, r0, #2
 80105e2:	3302      	addeq	r3, #2
 80105e4:	2800      	cmp	r0, #0
 80105e6:	db05      	blt.n	80105f4 <__hi0bits+0x38>
 80105e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80105ec:	f103 0301 	add.w	r3, r3, #1
 80105f0:	bf08      	it	eq
 80105f2:	2320      	moveq	r3, #32
 80105f4:	4618      	mov	r0, r3
 80105f6:	4770      	bx	lr
 80105f8:	2300      	movs	r3, #0
 80105fa:	e7e4      	b.n	80105c6 <__hi0bits+0xa>

080105fc <__lo0bits>:
 80105fc:	6803      	ldr	r3, [r0, #0]
 80105fe:	f013 0207 	ands.w	r2, r3, #7
 8010602:	4601      	mov	r1, r0
 8010604:	d00b      	beq.n	801061e <__lo0bits+0x22>
 8010606:	07da      	lsls	r2, r3, #31
 8010608:	d424      	bmi.n	8010654 <__lo0bits+0x58>
 801060a:	0798      	lsls	r0, r3, #30
 801060c:	bf49      	itett	mi
 801060e:	085b      	lsrmi	r3, r3, #1
 8010610:	089b      	lsrpl	r3, r3, #2
 8010612:	2001      	movmi	r0, #1
 8010614:	600b      	strmi	r3, [r1, #0]
 8010616:	bf5c      	itt	pl
 8010618:	600b      	strpl	r3, [r1, #0]
 801061a:	2002      	movpl	r0, #2
 801061c:	4770      	bx	lr
 801061e:	b298      	uxth	r0, r3
 8010620:	b9b0      	cbnz	r0, 8010650 <__lo0bits+0x54>
 8010622:	0c1b      	lsrs	r3, r3, #16
 8010624:	2010      	movs	r0, #16
 8010626:	f013 0fff 	tst.w	r3, #255	; 0xff
 801062a:	bf04      	itt	eq
 801062c:	0a1b      	lsreq	r3, r3, #8
 801062e:	3008      	addeq	r0, #8
 8010630:	071a      	lsls	r2, r3, #28
 8010632:	bf04      	itt	eq
 8010634:	091b      	lsreq	r3, r3, #4
 8010636:	3004      	addeq	r0, #4
 8010638:	079a      	lsls	r2, r3, #30
 801063a:	bf04      	itt	eq
 801063c:	089b      	lsreq	r3, r3, #2
 801063e:	3002      	addeq	r0, #2
 8010640:	07da      	lsls	r2, r3, #31
 8010642:	d403      	bmi.n	801064c <__lo0bits+0x50>
 8010644:	085b      	lsrs	r3, r3, #1
 8010646:	f100 0001 	add.w	r0, r0, #1
 801064a:	d005      	beq.n	8010658 <__lo0bits+0x5c>
 801064c:	600b      	str	r3, [r1, #0]
 801064e:	4770      	bx	lr
 8010650:	4610      	mov	r0, r2
 8010652:	e7e8      	b.n	8010626 <__lo0bits+0x2a>
 8010654:	2000      	movs	r0, #0
 8010656:	4770      	bx	lr
 8010658:	2020      	movs	r0, #32
 801065a:	4770      	bx	lr

0801065c <__i2b>:
 801065c:	b510      	push	{r4, lr}
 801065e:	460c      	mov	r4, r1
 8010660:	2101      	movs	r1, #1
 8010662:	f7ff feb5 	bl	80103d0 <_Balloc>
 8010666:	4602      	mov	r2, r0
 8010668:	b928      	cbnz	r0, 8010676 <__i2b+0x1a>
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <__i2b+0x24>)
 801066c:	4805      	ldr	r0, [pc, #20]	; (8010684 <__i2b+0x28>)
 801066e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010672:	f001 f915 	bl	80118a0 <__assert_func>
 8010676:	2301      	movs	r3, #1
 8010678:	6144      	str	r4, [r0, #20]
 801067a:	6103      	str	r3, [r0, #16]
 801067c:	bd10      	pop	{r4, pc}
 801067e:	bf00      	nop
 8010680:	08012a54 	.word	0x08012a54
 8010684:	08012ae4 	.word	0x08012ae4

08010688 <__multiply>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	4614      	mov	r4, r2
 801068e:	690a      	ldr	r2, [r1, #16]
 8010690:	6923      	ldr	r3, [r4, #16]
 8010692:	429a      	cmp	r2, r3
 8010694:	bfb8      	it	lt
 8010696:	460b      	movlt	r3, r1
 8010698:	460d      	mov	r5, r1
 801069a:	bfbc      	itt	lt
 801069c:	4625      	movlt	r5, r4
 801069e:	461c      	movlt	r4, r3
 80106a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80106a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80106a8:	68ab      	ldr	r3, [r5, #8]
 80106aa:	6869      	ldr	r1, [r5, #4]
 80106ac:	eb0a 0709 	add.w	r7, sl, r9
 80106b0:	42bb      	cmp	r3, r7
 80106b2:	b085      	sub	sp, #20
 80106b4:	bfb8      	it	lt
 80106b6:	3101      	addlt	r1, #1
 80106b8:	f7ff fe8a 	bl	80103d0 <_Balloc>
 80106bc:	b930      	cbnz	r0, 80106cc <__multiply+0x44>
 80106be:	4602      	mov	r2, r0
 80106c0:	4b42      	ldr	r3, [pc, #264]	; (80107cc <__multiply+0x144>)
 80106c2:	4843      	ldr	r0, [pc, #268]	; (80107d0 <__multiply+0x148>)
 80106c4:	f240 115d 	movw	r1, #349	; 0x15d
 80106c8:	f001 f8ea 	bl	80118a0 <__assert_func>
 80106cc:	f100 0614 	add.w	r6, r0, #20
 80106d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80106d4:	4633      	mov	r3, r6
 80106d6:	2200      	movs	r2, #0
 80106d8:	4543      	cmp	r3, r8
 80106da:	d31e      	bcc.n	801071a <__multiply+0x92>
 80106dc:	f105 0c14 	add.w	ip, r5, #20
 80106e0:	f104 0314 	add.w	r3, r4, #20
 80106e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80106e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80106ec:	9202      	str	r2, [sp, #8]
 80106ee:	ebac 0205 	sub.w	r2, ip, r5
 80106f2:	3a15      	subs	r2, #21
 80106f4:	f022 0203 	bic.w	r2, r2, #3
 80106f8:	3204      	adds	r2, #4
 80106fa:	f105 0115 	add.w	r1, r5, #21
 80106fe:	458c      	cmp	ip, r1
 8010700:	bf38      	it	cc
 8010702:	2204      	movcc	r2, #4
 8010704:	9201      	str	r2, [sp, #4]
 8010706:	9a02      	ldr	r2, [sp, #8]
 8010708:	9303      	str	r3, [sp, #12]
 801070a:	429a      	cmp	r2, r3
 801070c:	d808      	bhi.n	8010720 <__multiply+0x98>
 801070e:	2f00      	cmp	r7, #0
 8010710:	dc55      	bgt.n	80107be <__multiply+0x136>
 8010712:	6107      	str	r7, [r0, #16]
 8010714:	b005      	add	sp, #20
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	f843 2b04 	str.w	r2, [r3], #4
 801071e:	e7db      	b.n	80106d8 <__multiply+0x50>
 8010720:	f8b3 a000 	ldrh.w	sl, [r3]
 8010724:	f1ba 0f00 	cmp.w	sl, #0
 8010728:	d020      	beq.n	801076c <__multiply+0xe4>
 801072a:	f105 0e14 	add.w	lr, r5, #20
 801072e:	46b1      	mov	r9, r6
 8010730:	2200      	movs	r2, #0
 8010732:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010736:	f8d9 b000 	ldr.w	fp, [r9]
 801073a:	b2a1      	uxth	r1, r4
 801073c:	fa1f fb8b 	uxth.w	fp, fp
 8010740:	fb0a b101 	mla	r1, sl, r1, fp
 8010744:	4411      	add	r1, r2
 8010746:	f8d9 2000 	ldr.w	r2, [r9]
 801074a:	0c24      	lsrs	r4, r4, #16
 801074c:	0c12      	lsrs	r2, r2, #16
 801074e:	fb0a 2404 	mla	r4, sl, r4, r2
 8010752:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010756:	b289      	uxth	r1, r1
 8010758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801075c:	45f4      	cmp	ip, lr
 801075e:	f849 1b04 	str.w	r1, [r9], #4
 8010762:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010766:	d8e4      	bhi.n	8010732 <__multiply+0xaa>
 8010768:	9901      	ldr	r1, [sp, #4]
 801076a:	5072      	str	r2, [r6, r1]
 801076c:	9a03      	ldr	r2, [sp, #12]
 801076e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010772:	3304      	adds	r3, #4
 8010774:	f1b9 0f00 	cmp.w	r9, #0
 8010778:	d01f      	beq.n	80107ba <__multiply+0x132>
 801077a:	6834      	ldr	r4, [r6, #0]
 801077c:	f105 0114 	add.w	r1, r5, #20
 8010780:	46b6      	mov	lr, r6
 8010782:	f04f 0a00 	mov.w	sl, #0
 8010786:	880a      	ldrh	r2, [r1, #0]
 8010788:	f8be b002 	ldrh.w	fp, [lr, #2]
 801078c:	fb09 b202 	mla	r2, r9, r2, fp
 8010790:	4492      	add	sl, r2
 8010792:	b2a4      	uxth	r4, r4
 8010794:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010798:	f84e 4b04 	str.w	r4, [lr], #4
 801079c:	f851 4b04 	ldr.w	r4, [r1], #4
 80107a0:	f8be 2000 	ldrh.w	r2, [lr]
 80107a4:	0c24      	lsrs	r4, r4, #16
 80107a6:	fb09 2404 	mla	r4, r9, r4, r2
 80107aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80107ae:	458c      	cmp	ip, r1
 80107b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80107b4:	d8e7      	bhi.n	8010786 <__multiply+0xfe>
 80107b6:	9a01      	ldr	r2, [sp, #4]
 80107b8:	50b4      	str	r4, [r6, r2]
 80107ba:	3604      	adds	r6, #4
 80107bc:	e7a3      	b.n	8010706 <__multiply+0x7e>
 80107be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1a5      	bne.n	8010712 <__multiply+0x8a>
 80107c6:	3f01      	subs	r7, #1
 80107c8:	e7a1      	b.n	801070e <__multiply+0x86>
 80107ca:	bf00      	nop
 80107cc:	08012a54 	.word	0x08012a54
 80107d0:	08012ae4 	.word	0x08012ae4

080107d4 <__pow5mult>:
 80107d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d8:	4615      	mov	r5, r2
 80107da:	f012 0203 	ands.w	r2, r2, #3
 80107de:	4606      	mov	r6, r0
 80107e0:	460f      	mov	r7, r1
 80107e2:	d007      	beq.n	80107f4 <__pow5mult+0x20>
 80107e4:	4c25      	ldr	r4, [pc, #148]	; (801087c <__pow5mult+0xa8>)
 80107e6:	3a01      	subs	r2, #1
 80107e8:	2300      	movs	r3, #0
 80107ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107ee:	f7ff fe51 	bl	8010494 <__multadd>
 80107f2:	4607      	mov	r7, r0
 80107f4:	10ad      	asrs	r5, r5, #2
 80107f6:	d03d      	beq.n	8010874 <__pow5mult+0xa0>
 80107f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80107fa:	b97c      	cbnz	r4, 801081c <__pow5mult+0x48>
 80107fc:	2010      	movs	r0, #16
 80107fe:	f7fc fca5 	bl	800d14c <malloc>
 8010802:	4602      	mov	r2, r0
 8010804:	6270      	str	r0, [r6, #36]	; 0x24
 8010806:	b928      	cbnz	r0, 8010814 <__pow5mult+0x40>
 8010808:	4b1d      	ldr	r3, [pc, #116]	; (8010880 <__pow5mult+0xac>)
 801080a:	481e      	ldr	r0, [pc, #120]	; (8010884 <__pow5mult+0xb0>)
 801080c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010810:	f001 f846 	bl	80118a0 <__assert_func>
 8010814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010818:	6004      	str	r4, [r0, #0]
 801081a:	60c4      	str	r4, [r0, #12]
 801081c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010824:	b94c      	cbnz	r4, 801083a <__pow5mult+0x66>
 8010826:	f240 2171 	movw	r1, #625	; 0x271
 801082a:	4630      	mov	r0, r6
 801082c:	f7ff ff16 	bl	801065c <__i2b>
 8010830:	2300      	movs	r3, #0
 8010832:	f8c8 0008 	str.w	r0, [r8, #8]
 8010836:	4604      	mov	r4, r0
 8010838:	6003      	str	r3, [r0, #0]
 801083a:	f04f 0900 	mov.w	r9, #0
 801083e:	07eb      	lsls	r3, r5, #31
 8010840:	d50a      	bpl.n	8010858 <__pow5mult+0x84>
 8010842:	4639      	mov	r1, r7
 8010844:	4622      	mov	r2, r4
 8010846:	4630      	mov	r0, r6
 8010848:	f7ff ff1e 	bl	8010688 <__multiply>
 801084c:	4639      	mov	r1, r7
 801084e:	4680      	mov	r8, r0
 8010850:	4630      	mov	r0, r6
 8010852:	f7ff fdfd 	bl	8010450 <_Bfree>
 8010856:	4647      	mov	r7, r8
 8010858:	106d      	asrs	r5, r5, #1
 801085a:	d00b      	beq.n	8010874 <__pow5mult+0xa0>
 801085c:	6820      	ldr	r0, [r4, #0]
 801085e:	b938      	cbnz	r0, 8010870 <__pow5mult+0x9c>
 8010860:	4622      	mov	r2, r4
 8010862:	4621      	mov	r1, r4
 8010864:	4630      	mov	r0, r6
 8010866:	f7ff ff0f 	bl	8010688 <__multiply>
 801086a:	6020      	str	r0, [r4, #0]
 801086c:	f8c0 9000 	str.w	r9, [r0]
 8010870:	4604      	mov	r4, r0
 8010872:	e7e4      	b.n	801083e <__pow5mult+0x6a>
 8010874:	4638      	mov	r0, r7
 8010876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801087a:	bf00      	nop
 801087c:	08012c38 	.word	0x08012c38
 8010880:	080129de 	.word	0x080129de
 8010884:	08012ae4 	.word	0x08012ae4

08010888 <__lshift>:
 8010888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801088c:	460c      	mov	r4, r1
 801088e:	6849      	ldr	r1, [r1, #4]
 8010890:	6923      	ldr	r3, [r4, #16]
 8010892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010896:	68a3      	ldr	r3, [r4, #8]
 8010898:	4607      	mov	r7, r0
 801089a:	4691      	mov	r9, r2
 801089c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108a0:	f108 0601 	add.w	r6, r8, #1
 80108a4:	42b3      	cmp	r3, r6
 80108a6:	db0b      	blt.n	80108c0 <__lshift+0x38>
 80108a8:	4638      	mov	r0, r7
 80108aa:	f7ff fd91 	bl	80103d0 <_Balloc>
 80108ae:	4605      	mov	r5, r0
 80108b0:	b948      	cbnz	r0, 80108c6 <__lshift+0x3e>
 80108b2:	4602      	mov	r2, r0
 80108b4:	4b28      	ldr	r3, [pc, #160]	; (8010958 <__lshift+0xd0>)
 80108b6:	4829      	ldr	r0, [pc, #164]	; (801095c <__lshift+0xd4>)
 80108b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108bc:	f000 fff0 	bl	80118a0 <__assert_func>
 80108c0:	3101      	adds	r1, #1
 80108c2:	005b      	lsls	r3, r3, #1
 80108c4:	e7ee      	b.n	80108a4 <__lshift+0x1c>
 80108c6:	2300      	movs	r3, #0
 80108c8:	f100 0114 	add.w	r1, r0, #20
 80108cc:	f100 0210 	add.w	r2, r0, #16
 80108d0:	4618      	mov	r0, r3
 80108d2:	4553      	cmp	r3, sl
 80108d4:	db33      	blt.n	801093e <__lshift+0xb6>
 80108d6:	6920      	ldr	r0, [r4, #16]
 80108d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108dc:	f104 0314 	add.w	r3, r4, #20
 80108e0:	f019 091f 	ands.w	r9, r9, #31
 80108e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80108ec:	d02b      	beq.n	8010946 <__lshift+0xbe>
 80108ee:	f1c9 0e20 	rsb	lr, r9, #32
 80108f2:	468a      	mov	sl, r1
 80108f4:	2200      	movs	r2, #0
 80108f6:	6818      	ldr	r0, [r3, #0]
 80108f8:	fa00 f009 	lsl.w	r0, r0, r9
 80108fc:	4302      	orrs	r2, r0
 80108fe:	f84a 2b04 	str.w	r2, [sl], #4
 8010902:	f853 2b04 	ldr.w	r2, [r3], #4
 8010906:	459c      	cmp	ip, r3
 8010908:	fa22 f20e 	lsr.w	r2, r2, lr
 801090c:	d8f3      	bhi.n	80108f6 <__lshift+0x6e>
 801090e:	ebac 0304 	sub.w	r3, ip, r4
 8010912:	3b15      	subs	r3, #21
 8010914:	f023 0303 	bic.w	r3, r3, #3
 8010918:	3304      	adds	r3, #4
 801091a:	f104 0015 	add.w	r0, r4, #21
 801091e:	4584      	cmp	ip, r0
 8010920:	bf38      	it	cc
 8010922:	2304      	movcc	r3, #4
 8010924:	50ca      	str	r2, [r1, r3]
 8010926:	b10a      	cbz	r2, 801092c <__lshift+0xa4>
 8010928:	f108 0602 	add.w	r6, r8, #2
 801092c:	3e01      	subs	r6, #1
 801092e:	4638      	mov	r0, r7
 8010930:	612e      	str	r6, [r5, #16]
 8010932:	4621      	mov	r1, r4
 8010934:	f7ff fd8c 	bl	8010450 <_Bfree>
 8010938:	4628      	mov	r0, r5
 801093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010942:	3301      	adds	r3, #1
 8010944:	e7c5      	b.n	80108d2 <__lshift+0x4a>
 8010946:	3904      	subs	r1, #4
 8010948:	f853 2b04 	ldr.w	r2, [r3], #4
 801094c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010950:	459c      	cmp	ip, r3
 8010952:	d8f9      	bhi.n	8010948 <__lshift+0xc0>
 8010954:	e7ea      	b.n	801092c <__lshift+0xa4>
 8010956:	bf00      	nop
 8010958:	08012a54 	.word	0x08012a54
 801095c:	08012ae4 	.word	0x08012ae4

08010960 <__mcmp>:
 8010960:	b530      	push	{r4, r5, lr}
 8010962:	6902      	ldr	r2, [r0, #16]
 8010964:	690c      	ldr	r4, [r1, #16]
 8010966:	1b12      	subs	r2, r2, r4
 8010968:	d10e      	bne.n	8010988 <__mcmp+0x28>
 801096a:	f100 0314 	add.w	r3, r0, #20
 801096e:	3114      	adds	r1, #20
 8010970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801097c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010980:	42a5      	cmp	r5, r4
 8010982:	d003      	beq.n	801098c <__mcmp+0x2c>
 8010984:	d305      	bcc.n	8010992 <__mcmp+0x32>
 8010986:	2201      	movs	r2, #1
 8010988:	4610      	mov	r0, r2
 801098a:	bd30      	pop	{r4, r5, pc}
 801098c:	4283      	cmp	r3, r0
 801098e:	d3f3      	bcc.n	8010978 <__mcmp+0x18>
 8010990:	e7fa      	b.n	8010988 <__mcmp+0x28>
 8010992:	f04f 32ff 	mov.w	r2, #4294967295
 8010996:	e7f7      	b.n	8010988 <__mcmp+0x28>

08010998 <__mdiff>:
 8010998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	460c      	mov	r4, r1
 801099e:	4606      	mov	r6, r0
 80109a0:	4611      	mov	r1, r2
 80109a2:	4620      	mov	r0, r4
 80109a4:	4617      	mov	r7, r2
 80109a6:	f7ff ffdb 	bl	8010960 <__mcmp>
 80109aa:	1e05      	subs	r5, r0, #0
 80109ac:	d110      	bne.n	80109d0 <__mdiff+0x38>
 80109ae:	4629      	mov	r1, r5
 80109b0:	4630      	mov	r0, r6
 80109b2:	f7ff fd0d 	bl	80103d0 <_Balloc>
 80109b6:	b930      	cbnz	r0, 80109c6 <__mdiff+0x2e>
 80109b8:	4b39      	ldr	r3, [pc, #228]	; (8010aa0 <__mdiff+0x108>)
 80109ba:	4602      	mov	r2, r0
 80109bc:	f240 2132 	movw	r1, #562	; 0x232
 80109c0:	4838      	ldr	r0, [pc, #224]	; (8010aa4 <__mdiff+0x10c>)
 80109c2:	f000 ff6d 	bl	80118a0 <__assert_func>
 80109c6:	2301      	movs	r3, #1
 80109c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d0:	bfa4      	itt	ge
 80109d2:	463b      	movge	r3, r7
 80109d4:	4627      	movge	r7, r4
 80109d6:	4630      	mov	r0, r6
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	bfa6      	itte	ge
 80109dc:	461c      	movge	r4, r3
 80109de:	2500      	movge	r5, #0
 80109e0:	2501      	movlt	r5, #1
 80109e2:	f7ff fcf5 	bl	80103d0 <_Balloc>
 80109e6:	b920      	cbnz	r0, 80109f2 <__mdiff+0x5a>
 80109e8:	4b2d      	ldr	r3, [pc, #180]	; (8010aa0 <__mdiff+0x108>)
 80109ea:	4602      	mov	r2, r0
 80109ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80109f0:	e7e6      	b.n	80109c0 <__mdiff+0x28>
 80109f2:	693e      	ldr	r6, [r7, #16]
 80109f4:	60c5      	str	r5, [r0, #12]
 80109f6:	6925      	ldr	r5, [r4, #16]
 80109f8:	f107 0114 	add.w	r1, r7, #20
 80109fc:	f104 0914 	add.w	r9, r4, #20
 8010a00:	f100 0e14 	add.w	lr, r0, #20
 8010a04:	f107 0210 	add.w	r2, r7, #16
 8010a08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010a0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010a10:	46f2      	mov	sl, lr
 8010a12:	2700      	movs	r7, #0
 8010a14:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a1c:	fa1f f883 	uxth.w	r8, r3
 8010a20:	fa17 f78b 	uxtah	r7, r7, fp
 8010a24:	0c1b      	lsrs	r3, r3, #16
 8010a26:	eba7 0808 	sub.w	r8, r7, r8
 8010a2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a32:	fa1f f888 	uxth.w	r8, r8
 8010a36:	141f      	asrs	r7, r3, #16
 8010a38:	454d      	cmp	r5, r9
 8010a3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a3e:	f84a 3b04 	str.w	r3, [sl], #4
 8010a42:	d8e7      	bhi.n	8010a14 <__mdiff+0x7c>
 8010a44:	1b2b      	subs	r3, r5, r4
 8010a46:	3b15      	subs	r3, #21
 8010a48:	f023 0303 	bic.w	r3, r3, #3
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	3415      	adds	r4, #21
 8010a50:	42a5      	cmp	r5, r4
 8010a52:	bf38      	it	cc
 8010a54:	2304      	movcc	r3, #4
 8010a56:	4419      	add	r1, r3
 8010a58:	4473      	add	r3, lr
 8010a5a:	469e      	mov	lr, r3
 8010a5c:	460d      	mov	r5, r1
 8010a5e:	4565      	cmp	r5, ip
 8010a60:	d30e      	bcc.n	8010a80 <__mdiff+0xe8>
 8010a62:	f10c 0203 	add.w	r2, ip, #3
 8010a66:	1a52      	subs	r2, r2, r1
 8010a68:	f022 0203 	bic.w	r2, r2, #3
 8010a6c:	3903      	subs	r1, #3
 8010a6e:	458c      	cmp	ip, r1
 8010a70:	bf38      	it	cc
 8010a72:	2200      	movcc	r2, #0
 8010a74:	441a      	add	r2, r3
 8010a76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a7a:	b17b      	cbz	r3, 8010a9c <__mdiff+0x104>
 8010a7c:	6106      	str	r6, [r0, #16]
 8010a7e:	e7a5      	b.n	80109cc <__mdiff+0x34>
 8010a80:	f855 8b04 	ldr.w	r8, [r5], #4
 8010a84:	fa17 f488 	uxtah	r4, r7, r8
 8010a88:	1422      	asrs	r2, r4, #16
 8010a8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010a8e:	b2a4      	uxth	r4, r4
 8010a90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010a94:	f84e 4b04 	str.w	r4, [lr], #4
 8010a98:	1417      	asrs	r7, r2, #16
 8010a9a:	e7e0      	b.n	8010a5e <__mdiff+0xc6>
 8010a9c:	3e01      	subs	r6, #1
 8010a9e:	e7ea      	b.n	8010a76 <__mdiff+0xde>
 8010aa0:	08012a54 	.word	0x08012a54
 8010aa4:	08012ae4 	.word	0x08012ae4

08010aa8 <__ulp>:
 8010aa8:	b082      	sub	sp, #8
 8010aaa:	ed8d 0b00 	vstr	d0, [sp]
 8010aae:	9b01      	ldr	r3, [sp, #4]
 8010ab0:	4912      	ldr	r1, [pc, #72]	; (8010afc <__ulp+0x54>)
 8010ab2:	4019      	ands	r1, r3
 8010ab4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	dd05      	ble.n	8010ac8 <__ulp+0x20>
 8010abc:	2200      	movs	r2, #0
 8010abe:	460b      	mov	r3, r1
 8010ac0:	ec43 2b10 	vmov	d0, r2, r3
 8010ac4:	b002      	add	sp, #8
 8010ac6:	4770      	bx	lr
 8010ac8:	4249      	negs	r1, r1
 8010aca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010ace:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010ad2:	f04f 0200 	mov.w	r2, #0
 8010ad6:	f04f 0300 	mov.w	r3, #0
 8010ada:	da04      	bge.n	8010ae6 <__ulp+0x3e>
 8010adc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010ae0:	fa41 f300 	asr.w	r3, r1, r0
 8010ae4:	e7ec      	b.n	8010ac0 <__ulp+0x18>
 8010ae6:	f1a0 0114 	sub.w	r1, r0, #20
 8010aea:	291e      	cmp	r1, #30
 8010aec:	bfda      	itte	le
 8010aee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010af2:	fa20 f101 	lsrle.w	r1, r0, r1
 8010af6:	2101      	movgt	r1, #1
 8010af8:	460a      	mov	r2, r1
 8010afa:	e7e1      	b.n	8010ac0 <__ulp+0x18>
 8010afc:	7ff00000 	.word	0x7ff00000

08010b00 <__b2d>:
 8010b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b02:	6905      	ldr	r5, [r0, #16]
 8010b04:	f100 0714 	add.w	r7, r0, #20
 8010b08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b0c:	1f2e      	subs	r6, r5, #4
 8010b0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b12:	4620      	mov	r0, r4
 8010b14:	f7ff fd52 	bl	80105bc <__hi0bits>
 8010b18:	f1c0 0320 	rsb	r3, r0, #32
 8010b1c:	280a      	cmp	r0, #10
 8010b1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010b9c <__b2d+0x9c>
 8010b22:	600b      	str	r3, [r1, #0]
 8010b24:	dc14      	bgt.n	8010b50 <__b2d+0x50>
 8010b26:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b2e:	42b7      	cmp	r7, r6
 8010b30:	ea41 030c 	orr.w	r3, r1, ip
 8010b34:	bf34      	ite	cc
 8010b36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b3a:	2100      	movcs	r1, #0
 8010b3c:	3015      	adds	r0, #21
 8010b3e:	fa04 f000 	lsl.w	r0, r4, r0
 8010b42:	fa21 f10e 	lsr.w	r1, r1, lr
 8010b46:	ea40 0201 	orr.w	r2, r0, r1
 8010b4a:	ec43 2b10 	vmov	d0, r2, r3
 8010b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b50:	42b7      	cmp	r7, r6
 8010b52:	bf3a      	itte	cc
 8010b54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b58:	f1a5 0608 	subcc.w	r6, r5, #8
 8010b5c:	2100      	movcs	r1, #0
 8010b5e:	380b      	subs	r0, #11
 8010b60:	d017      	beq.n	8010b92 <__b2d+0x92>
 8010b62:	f1c0 0c20 	rsb	ip, r0, #32
 8010b66:	fa04 f500 	lsl.w	r5, r4, r0
 8010b6a:	42be      	cmp	r6, r7
 8010b6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010b70:	ea45 0504 	orr.w	r5, r5, r4
 8010b74:	bf8c      	ite	hi
 8010b76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010b7a:	2400      	movls	r4, #0
 8010b7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010b80:	fa01 f000 	lsl.w	r0, r1, r0
 8010b84:	fa24 f40c 	lsr.w	r4, r4, ip
 8010b88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b8c:	ea40 0204 	orr.w	r2, r0, r4
 8010b90:	e7db      	b.n	8010b4a <__b2d+0x4a>
 8010b92:	ea44 030c 	orr.w	r3, r4, ip
 8010b96:	460a      	mov	r2, r1
 8010b98:	e7d7      	b.n	8010b4a <__b2d+0x4a>
 8010b9a:	bf00      	nop
 8010b9c:	3ff00000 	.word	0x3ff00000

08010ba0 <__d2b>:
 8010ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ba4:	4689      	mov	r9, r1
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	ec57 6b10 	vmov	r6, r7, d0
 8010bac:	4690      	mov	r8, r2
 8010bae:	f7ff fc0f 	bl	80103d0 <_Balloc>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	b930      	cbnz	r0, 8010bc4 <__d2b+0x24>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	4b25      	ldr	r3, [pc, #148]	; (8010c50 <__d2b+0xb0>)
 8010bba:	4826      	ldr	r0, [pc, #152]	; (8010c54 <__d2b+0xb4>)
 8010bbc:	f240 310a 	movw	r1, #778	; 0x30a
 8010bc0:	f000 fe6e 	bl	80118a0 <__assert_func>
 8010bc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010bcc:	bb35      	cbnz	r5, 8010c1c <__d2b+0x7c>
 8010bce:	2e00      	cmp	r6, #0
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	d028      	beq.n	8010c26 <__d2b+0x86>
 8010bd4:	4668      	mov	r0, sp
 8010bd6:	9600      	str	r6, [sp, #0]
 8010bd8:	f7ff fd10 	bl	80105fc <__lo0bits>
 8010bdc:	9900      	ldr	r1, [sp, #0]
 8010bde:	b300      	cbz	r0, 8010c22 <__d2b+0x82>
 8010be0:	9a01      	ldr	r2, [sp, #4]
 8010be2:	f1c0 0320 	rsb	r3, r0, #32
 8010be6:	fa02 f303 	lsl.w	r3, r2, r3
 8010bea:	430b      	orrs	r3, r1
 8010bec:	40c2      	lsrs	r2, r0
 8010bee:	6163      	str	r3, [r4, #20]
 8010bf0:	9201      	str	r2, [sp, #4]
 8010bf2:	9b01      	ldr	r3, [sp, #4]
 8010bf4:	61a3      	str	r3, [r4, #24]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	bf14      	ite	ne
 8010bfa:	2202      	movne	r2, #2
 8010bfc:	2201      	moveq	r2, #1
 8010bfe:	6122      	str	r2, [r4, #16]
 8010c00:	b1d5      	cbz	r5, 8010c38 <__d2b+0x98>
 8010c02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c06:	4405      	add	r5, r0
 8010c08:	f8c9 5000 	str.w	r5, [r9]
 8010c0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c10:	f8c8 0000 	str.w	r0, [r8]
 8010c14:	4620      	mov	r0, r4
 8010c16:	b003      	add	sp, #12
 8010c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c20:	e7d5      	b.n	8010bce <__d2b+0x2e>
 8010c22:	6161      	str	r1, [r4, #20]
 8010c24:	e7e5      	b.n	8010bf2 <__d2b+0x52>
 8010c26:	a801      	add	r0, sp, #4
 8010c28:	f7ff fce8 	bl	80105fc <__lo0bits>
 8010c2c:	9b01      	ldr	r3, [sp, #4]
 8010c2e:	6163      	str	r3, [r4, #20]
 8010c30:	2201      	movs	r2, #1
 8010c32:	6122      	str	r2, [r4, #16]
 8010c34:	3020      	adds	r0, #32
 8010c36:	e7e3      	b.n	8010c00 <__d2b+0x60>
 8010c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c40:	f8c9 0000 	str.w	r0, [r9]
 8010c44:	6918      	ldr	r0, [r3, #16]
 8010c46:	f7ff fcb9 	bl	80105bc <__hi0bits>
 8010c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c4e:	e7df      	b.n	8010c10 <__d2b+0x70>
 8010c50:	08012a54 	.word	0x08012a54
 8010c54:	08012ae4 	.word	0x08012ae4

08010c58 <__ratio>:
 8010c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	4688      	mov	r8, r1
 8010c5e:	4669      	mov	r1, sp
 8010c60:	4681      	mov	r9, r0
 8010c62:	f7ff ff4d 	bl	8010b00 <__b2d>
 8010c66:	a901      	add	r1, sp, #4
 8010c68:	4640      	mov	r0, r8
 8010c6a:	ec55 4b10 	vmov	r4, r5, d0
 8010c6e:	f7ff ff47 	bl	8010b00 <__b2d>
 8010c72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010c7a:	eba3 0c02 	sub.w	ip, r3, r2
 8010c7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c82:	1a9b      	subs	r3, r3, r2
 8010c84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010c88:	ec51 0b10 	vmov	r0, r1, d0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	bfd6      	itet	le
 8010c90:	460a      	movle	r2, r1
 8010c92:	462a      	movgt	r2, r5
 8010c94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c98:	468b      	mov	fp, r1
 8010c9a:	462f      	mov	r7, r5
 8010c9c:	bfd4      	ite	le
 8010c9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010ca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	ee10 2a10 	vmov	r2, s0
 8010cac:	465b      	mov	r3, fp
 8010cae:	4639      	mov	r1, r7
 8010cb0:	f7ef fdec 	bl	800088c <__aeabi_ddiv>
 8010cb4:	ec41 0b10 	vmov	d0, r0, r1
 8010cb8:	b003      	add	sp, #12
 8010cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cbe <__copybits>:
 8010cbe:	3901      	subs	r1, #1
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	1149      	asrs	r1, r1, #5
 8010cc4:	6914      	ldr	r4, [r2, #16]
 8010cc6:	3101      	adds	r1, #1
 8010cc8:	f102 0314 	add.w	r3, r2, #20
 8010ccc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010cd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010cd4:	1f05      	subs	r5, r0, #4
 8010cd6:	42a3      	cmp	r3, r4
 8010cd8:	d30c      	bcc.n	8010cf4 <__copybits+0x36>
 8010cda:	1aa3      	subs	r3, r4, r2
 8010cdc:	3b11      	subs	r3, #17
 8010cde:	f023 0303 	bic.w	r3, r3, #3
 8010ce2:	3211      	adds	r2, #17
 8010ce4:	42a2      	cmp	r2, r4
 8010ce6:	bf88      	it	hi
 8010ce8:	2300      	movhi	r3, #0
 8010cea:	4418      	add	r0, r3
 8010cec:	2300      	movs	r3, #0
 8010cee:	4288      	cmp	r0, r1
 8010cf0:	d305      	bcc.n	8010cfe <__copybits+0x40>
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
 8010cf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8010cf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8010cfc:	e7eb      	b.n	8010cd6 <__copybits+0x18>
 8010cfe:	f840 3b04 	str.w	r3, [r0], #4
 8010d02:	e7f4      	b.n	8010cee <__copybits+0x30>

08010d04 <__any_on>:
 8010d04:	f100 0214 	add.w	r2, r0, #20
 8010d08:	6900      	ldr	r0, [r0, #16]
 8010d0a:	114b      	asrs	r3, r1, #5
 8010d0c:	4298      	cmp	r0, r3
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	db11      	blt.n	8010d36 <__any_on+0x32>
 8010d12:	dd0a      	ble.n	8010d2a <__any_on+0x26>
 8010d14:	f011 011f 	ands.w	r1, r1, #31
 8010d18:	d007      	beq.n	8010d2a <__any_on+0x26>
 8010d1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d1e:	fa24 f001 	lsr.w	r0, r4, r1
 8010d22:	fa00 f101 	lsl.w	r1, r0, r1
 8010d26:	428c      	cmp	r4, r1
 8010d28:	d10b      	bne.n	8010d42 <__any_on+0x3e>
 8010d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d803      	bhi.n	8010d3a <__any_on+0x36>
 8010d32:	2000      	movs	r0, #0
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	4603      	mov	r3, r0
 8010d38:	e7f7      	b.n	8010d2a <__any_on+0x26>
 8010d3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d3e:	2900      	cmp	r1, #0
 8010d40:	d0f5      	beq.n	8010d2e <__any_on+0x2a>
 8010d42:	2001      	movs	r0, #1
 8010d44:	e7f6      	b.n	8010d34 <__any_on+0x30>

08010d46 <_calloc_r>:
 8010d46:	b513      	push	{r0, r1, r4, lr}
 8010d48:	434a      	muls	r2, r1
 8010d4a:	4611      	mov	r1, r2
 8010d4c:	9201      	str	r2, [sp, #4]
 8010d4e:	f7fc fa8d 	bl	800d26c <_malloc_r>
 8010d52:	4604      	mov	r4, r0
 8010d54:	b118      	cbz	r0, 8010d5e <_calloc_r+0x18>
 8010d56:	9a01      	ldr	r2, [sp, #4]
 8010d58:	2100      	movs	r1, #0
 8010d5a:	f7fc fa2f 	bl	800d1bc <memset>
 8010d5e:	4620      	mov	r0, r4
 8010d60:	b002      	add	sp, #8
 8010d62:	bd10      	pop	{r4, pc}

08010d64 <__ssputs_r>:
 8010d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d68:	688e      	ldr	r6, [r1, #8]
 8010d6a:	429e      	cmp	r6, r3
 8010d6c:	4682      	mov	sl, r0
 8010d6e:	460c      	mov	r4, r1
 8010d70:	4690      	mov	r8, r2
 8010d72:	461f      	mov	r7, r3
 8010d74:	d838      	bhi.n	8010de8 <__ssputs_r+0x84>
 8010d76:	898a      	ldrh	r2, [r1, #12]
 8010d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d7c:	d032      	beq.n	8010de4 <__ssputs_r+0x80>
 8010d7e:	6825      	ldr	r5, [r4, #0]
 8010d80:	6909      	ldr	r1, [r1, #16]
 8010d82:	eba5 0901 	sub.w	r9, r5, r1
 8010d86:	6965      	ldr	r5, [r4, #20]
 8010d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d90:	3301      	adds	r3, #1
 8010d92:	444b      	add	r3, r9
 8010d94:	106d      	asrs	r5, r5, #1
 8010d96:	429d      	cmp	r5, r3
 8010d98:	bf38      	it	cc
 8010d9a:	461d      	movcc	r5, r3
 8010d9c:	0553      	lsls	r3, r2, #21
 8010d9e:	d531      	bpl.n	8010e04 <__ssputs_r+0xa0>
 8010da0:	4629      	mov	r1, r5
 8010da2:	f7fc fa63 	bl	800d26c <_malloc_r>
 8010da6:	4606      	mov	r6, r0
 8010da8:	b950      	cbnz	r0, 8010dc0 <__ssputs_r+0x5c>
 8010daa:	230c      	movs	r3, #12
 8010dac:	f8ca 3000 	str.w	r3, [sl]
 8010db0:	89a3      	ldrh	r3, [r4, #12]
 8010db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010db6:	81a3      	strh	r3, [r4, #12]
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	6921      	ldr	r1, [r4, #16]
 8010dc2:	464a      	mov	r2, r9
 8010dc4:	f7fc f9d2 	bl	800d16c <memcpy>
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd2:	81a3      	strh	r3, [r4, #12]
 8010dd4:	6126      	str	r6, [r4, #16]
 8010dd6:	6165      	str	r5, [r4, #20]
 8010dd8:	444e      	add	r6, r9
 8010dda:	eba5 0509 	sub.w	r5, r5, r9
 8010dde:	6026      	str	r6, [r4, #0]
 8010de0:	60a5      	str	r5, [r4, #8]
 8010de2:	463e      	mov	r6, r7
 8010de4:	42be      	cmp	r6, r7
 8010de6:	d900      	bls.n	8010dea <__ssputs_r+0x86>
 8010de8:	463e      	mov	r6, r7
 8010dea:	4632      	mov	r2, r6
 8010dec:	6820      	ldr	r0, [r4, #0]
 8010dee:	4641      	mov	r1, r8
 8010df0:	f7fc f9ca 	bl	800d188 <memmove>
 8010df4:	68a3      	ldr	r3, [r4, #8]
 8010df6:	6822      	ldr	r2, [r4, #0]
 8010df8:	1b9b      	subs	r3, r3, r6
 8010dfa:	4432      	add	r2, r6
 8010dfc:	60a3      	str	r3, [r4, #8]
 8010dfe:	6022      	str	r2, [r4, #0]
 8010e00:	2000      	movs	r0, #0
 8010e02:	e7db      	b.n	8010dbc <__ssputs_r+0x58>
 8010e04:	462a      	mov	r2, r5
 8010e06:	f000 ff35 	bl	8011c74 <_realloc_r>
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d1e1      	bne.n	8010dd4 <__ssputs_r+0x70>
 8010e10:	6921      	ldr	r1, [r4, #16]
 8010e12:	4650      	mov	r0, sl
 8010e14:	f7fc f9da 	bl	800d1cc <_free_r>
 8010e18:	e7c7      	b.n	8010daa <__ssputs_r+0x46>
	...

08010e1c <_svfiprintf_r>:
 8010e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	4698      	mov	r8, r3
 8010e22:	898b      	ldrh	r3, [r1, #12]
 8010e24:	061b      	lsls	r3, r3, #24
 8010e26:	b09d      	sub	sp, #116	; 0x74
 8010e28:	4607      	mov	r7, r0
 8010e2a:	460d      	mov	r5, r1
 8010e2c:	4614      	mov	r4, r2
 8010e2e:	d50e      	bpl.n	8010e4e <_svfiprintf_r+0x32>
 8010e30:	690b      	ldr	r3, [r1, #16]
 8010e32:	b963      	cbnz	r3, 8010e4e <_svfiprintf_r+0x32>
 8010e34:	2140      	movs	r1, #64	; 0x40
 8010e36:	f7fc fa19 	bl	800d26c <_malloc_r>
 8010e3a:	6028      	str	r0, [r5, #0]
 8010e3c:	6128      	str	r0, [r5, #16]
 8010e3e:	b920      	cbnz	r0, 8010e4a <_svfiprintf_r+0x2e>
 8010e40:	230c      	movs	r3, #12
 8010e42:	603b      	str	r3, [r7, #0]
 8010e44:	f04f 30ff 	mov.w	r0, #4294967295
 8010e48:	e0d1      	b.n	8010fee <_svfiprintf_r+0x1d2>
 8010e4a:	2340      	movs	r3, #64	; 0x40
 8010e4c:	616b      	str	r3, [r5, #20]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9309      	str	r3, [sp, #36]	; 0x24
 8010e52:	2320      	movs	r3, #32
 8010e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e5c:	2330      	movs	r3, #48	; 0x30
 8010e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011008 <_svfiprintf_r+0x1ec>
 8010e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e66:	f04f 0901 	mov.w	r9, #1
 8010e6a:	4623      	mov	r3, r4
 8010e6c:	469a      	mov	sl, r3
 8010e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e72:	b10a      	cbz	r2, 8010e78 <_svfiprintf_r+0x5c>
 8010e74:	2a25      	cmp	r2, #37	; 0x25
 8010e76:	d1f9      	bne.n	8010e6c <_svfiprintf_r+0x50>
 8010e78:	ebba 0b04 	subs.w	fp, sl, r4
 8010e7c:	d00b      	beq.n	8010e96 <_svfiprintf_r+0x7a>
 8010e7e:	465b      	mov	r3, fp
 8010e80:	4622      	mov	r2, r4
 8010e82:	4629      	mov	r1, r5
 8010e84:	4638      	mov	r0, r7
 8010e86:	f7ff ff6d 	bl	8010d64 <__ssputs_r>
 8010e8a:	3001      	adds	r0, #1
 8010e8c:	f000 80aa 	beq.w	8010fe4 <_svfiprintf_r+0x1c8>
 8010e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e92:	445a      	add	r2, fp
 8010e94:	9209      	str	r2, [sp, #36]	; 0x24
 8010e96:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 80a2 	beq.w	8010fe4 <_svfiprintf_r+0x1c8>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eaa:	f10a 0a01 	add.w	sl, sl, #1
 8010eae:	9304      	str	r3, [sp, #16]
 8010eb0:	9307      	str	r3, [sp, #28]
 8010eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8010eb8:	4654      	mov	r4, sl
 8010eba:	2205      	movs	r2, #5
 8010ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec0:	4851      	ldr	r0, [pc, #324]	; (8011008 <_svfiprintf_r+0x1ec>)
 8010ec2:	f7ef f9a5 	bl	8000210 <memchr>
 8010ec6:	9a04      	ldr	r2, [sp, #16]
 8010ec8:	b9d8      	cbnz	r0, 8010f02 <_svfiprintf_r+0xe6>
 8010eca:	06d0      	lsls	r0, r2, #27
 8010ecc:	bf44      	itt	mi
 8010ece:	2320      	movmi	r3, #32
 8010ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ed4:	0711      	lsls	r1, r2, #28
 8010ed6:	bf44      	itt	mi
 8010ed8:	232b      	movmi	r3, #43	; 0x2b
 8010eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ede:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee4:	d015      	beq.n	8010f12 <_svfiprintf_r+0xf6>
 8010ee6:	9a07      	ldr	r2, [sp, #28]
 8010ee8:	4654      	mov	r4, sl
 8010eea:	2000      	movs	r0, #0
 8010eec:	f04f 0c0a 	mov.w	ip, #10
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ef6:	3b30      	subs	r3, #48	; 0x30
 8010ef8:	2b09      	cmp	r3, #9
 8010efa:	d94e      	bls.n	8010f9a <_svfiprintf_r+0x17e>
 8010efc:	b1b0      	cbz	r0, 8010f2c <_svfiprintf_r+0x110>
 8010efe:	9207      	str	r2, [sp, #28]
 8010f00:	e014      	b.n	8010f2c <_svfiprintf_r+0x110>
 8010f02:	eba0 0308 	sub.w	r3, r0, r8
 8010f06:	fa09 f303 	lsl.w	r3, r9, r3
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	9304      	str	r3, [sp, #16]
 8010f0e:	46a2      	mov	sl, r4
 8010f10:	e7d2      	b.n	8010eb8 <_svfiprintf_r+0x9c>
 8010f12:	9b03      	ldr	r3, [sp, #12]
 8010f14:	1d19      	adds	r1, r3, #4
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	9103      	str	r1, [sp, #12]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bfbb      	ittet	lt
 8010f1e:	425b      	neglt	r3, r3
 8010f20:	f042 0202 	orrlt.w	r2, r2, #2
 8010f24:	9307      	strge	r3, [sp, #28]
 8010f26:	9307      	strlt	r3, [sp, #28]
 8010f28:	bfb8      	it	lt
 8010f2a:	9204      	strlt	r2, [sp, #16]
 8010f2c:	7823      	ldrb	r3, [r4, #0]
 8010f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8010f30:	d10c      	bne.n	8010f4c <_svfiprintf_r+0x130>
 8010f32:	7863      	ldrb	r3, [r4, #1]
 8010f34:	2b2a      	cmp	r3, #42	; 0x2a
 8010f36:	d135      	bne.n	8010fa4 <_svfiprintf_r+0x188>
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	1d1a      	adds	r2, r3, #4
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	9203      	str	r2, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfb8      	it	lt
 8010f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f48:	3402      	adds	r4, #2
 8010f4a:	9305      	str	r3, [sp, #20]
 8010f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011018 <_svfiprintf_r+0x1fc>
 8010f50:	7821      	ldrb	r1, [r4, #0]
 8010f52:	2203      	movs	r2, #3
 8010f54:	4650      	mov	r0, sl
 8010f56:	f7ef f95b 	bl	8000210 <memchr>
 8010f5a:	b140      	cbz	r0, 8010f6e <_svfiprintf_r+0x152>
 8010f5c:	2340      	movs	r3, #64	; 0x40
 8010f5e:	eba0 000a 	sub.w	r0, r0, sl
 8010f62:	fa03 f000 	lsl.w	r0, r3, r0
 8010f66:	9b04      	ldr	r3, [sp, #16]
 8010f68:	4303      	orrs	r3, r0
 8010f6a:	3401      	adds	r4, #1
 8010f6c:	9304      	str	r3, [sp, #16]
 8010f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f72:	4826      	ldr	r0, [pc, #152]	; (801100c <_svfiprintf_r+0x1f0>)
 8010f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f78:	2206      	movs	r2, #6
 8010f7a:	f7ef f949 	bl	8000210 <memchr>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d038      	beq.n	8010ff4 <_svfiprintf_r+0x1d8>
 8010f82:	4b23      	ldr	r3, [pc, #140]	; (8011010 <_svfiprintf_r+0x1f4>)
 8010f84:	bb1b      	cbnz	r3, 8010fce <_svfiprintf_r+0x1b2>
 8010f86:	9b03      	ldr	r3, [sp, #12]
 8010f88:	3307      	adds	r3, #7
 8010f8a:	f023 0307 	bic.w	r3, r3, #7
 8010f8e:	3308      	adds	r3, #8
 8010f90:	9303      	str	r3, [sp, #12]
 8010f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f94:	4433      	add	r3, r6
 8010f96:	9309      	str	r3, [sp, #36]	; 0x24
 8010f98:	e767      	b.n	8010e6a <_svfiprintf_r+0x4e>
 8010f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	2001      	movs	r0, #1
 8010fa2:	e7a5      	b.n	8010ef0 <_svfiprintf_r+0xd4>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	3401      	adds	r4, #1
 8010fa8:	9305      	str	r3, [sp, #20]
 8010faa:	4619      	mov	r1, r3
 8010fac:	f04f 0c0a 	mov.w	ip, #10
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fb6:	3a30      	subs	r2, #48	; 0x30
 8010fb8:	2a09      	cmp	r2, #9
 8010fba:	d903      	bls.n	8010fc4 <_svfiprintf_r+0x1a8>
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d0c5      	beq.n	8010f4c <_svfiprintf_r+0x130>
 8010fc0:	9105      	str	r1, [sp, #20]
 8010fc2:	e7c3      	b.n	8010f4c <_svfiprintf_r+0x130>
 8010fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fc8:	4604      	mov	r4, r0
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e7f0      	b.n	8010fb0 <_svfiprintf_r+0x194>
 8010fce:	ab03      	add	r3, sp, #12
 8010fd0:	9300      	str	r3, [sp, #0]
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	4b0f      	ldr	r3, [pc, #60]	; (8011014 <_svfiprintf_r+0x1f8>)
 8010fd6:	a904      	add	r1, sp, #16
 8010fd8:	4638      	mov	r0, r7
 8010fda:	f7fc fa41 	bl	800d460 <_printf_float>
 8010fde:	1c42      	adds	r2, r0, #1
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	d1d6      	bne.n	8010f92 <_svfiprintf_r+0x176>
 8010fe4:	89ab      	ldrh	r3, [r5, #12]
 8010fe6:	065b      	lsls	r3, r3, #25
 8010fe8:	f53f af2c 	bmi.w	8010e44 <_svfiprintf_r+0x28>
 8010fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fee:	b01d      	add	sp, #116	; 0x74
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	ab03      	add	r3, sp, #12
 8010ff6:	9300      	str	r3, [sp, #0]
 8010ff8:	462a      	mov	r2, r5
 8010ffa:	4b06      	ldr	r3, [pc, #24]	; (8011014 <_svfiprintf_r+0x1f8>)
 8010ffc:	a904      	add	r1, sp, #16
 8010ffe:	4638      	mov	r0, r7
 8011000:	f7fc fcd2 	bl	800d9a8 <_printf_i>
 8011004:	e7eb      	b.n	8010fde <_svfiprintf_r+0x1c2>
 8011006:	bf00      	nop
 8011008:	08012c44 	.word	0x08012c44
 801100c:	08012c4e 	.word	0x08012c4e
 8011010:	0800d461 	.word	0x0800d461
 8011014:	08010d65 	.word	0x08010d65
 8011018:	08012c4a 	.word	0x08012c4a

0801101c <_sungetc_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	1c4b      	adds	r3, r1, #1
 8011020:	4614      	mov	r4, r2
 8011022:	d103      	bne.n	801102c <_sungetc_r+0x10>
 8011024:	f04f 35ff 	mov.w	r5, #4294967295
 8011028:	4628      	mov	r0, r5
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	8993      	ldrh	r3, [r2, #12]
 801102e:	f023 0320 	bic.w	r3, r3, #32
 8011032:	8193      	strh	r3, [r2, #12]
 8011034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011036:	6852      	ldr	r2, [r2, #4]
 8011038:	b2cd      	uxtb	r5, r1
 801103a:	b18b      	cbz	r3, 8011060 <_sungetc_r+0x44>
 801103c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801103e:	4293      	cmp	r3, r2
 8011040:	dd08      	ble.n	8011054 <_sungetc_r+0x38>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	1e5a      	subs	r2, r3, #1
 8011046:	6022      	str	r2, [r4, #0]
 8011048:	f803 5c01 	strb.w	r5, [r3, #-1]
 801104c:	6863      	ldr	r3, [r4, #4]
 801104e:	3301      	adds	r3, #1
 8011050:	6063      	str	r3, [r4, #4]
 8011052:	e7e9      	b.n	8011028 <_sungetc_r+0xc>
 8011054:	4621      	mov	r1, r4
 8011056:	f000 fbdb 	bl	8011810 <__submore>
 801105a:	2800      	cmp	r0, #0
 801105c:	d0f1      	beq.n	8011042 <_sungetc_r+0x26>
 801105e:	e7e1      	b.n	8011024 <_sungetc_r+0x8>
 8011060:	6921      	ldr	r1, [r4, #16]
 8011062:	6823      	ldr	r3, [r4, #0]
 8011064:	b151      	cbz	r1, 801107c <_sungetc_r+0x60>
 8011066:	4299      	cmp	r1, r3
 8011068:	d208      	bcs.n	801107c <_sungetc_r+0x60>
 801106a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801106e:	42a9      	cmp	r1, r5
 8011070:	d104      	bne.n	801107c <_sungetc_r+0x60>
 8011072:	3b01      	subs	r3, #1
 8011074:	3201      	adds	r2, #1
 8011076:	6023      	str	r3, [r4, #0]
 8011078:	6062      	str	r2, [r4, #4]
 801107a:	e7d5      	b.n	8011028 <_sungetc_r+0xc>
 801107c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011084:	6363      	str	r3, [r4, #52]	; 0x34
 8011086:	2303      	movs	r3, #3
 8011088:	63a3      	str	r3, [r4, #56]	; 0x38
 801108a:	4623      	mov	r3, r4
 801108c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	2301      	movs	r3, #1
 8011094:	e7dc      	b.n	8011050 <_sungetc_r+0x34>

08011096 <__ssrefill_r>:
 8011096:	b510      	push	{r4, lr}
 8011098:	460c      	mov	r4, r1
 801109a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801109c:	b169      	cbz	r1, 80110ba <__ssrefill_r+0x24>
 801109e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a2:	4299      	cmp	r1, r3
 80110a4:	d001      	beq.n	80110aa <__ssrefill_r+0x14>
 80110a6:	f7fc f891 	bl	800d1cc <_free_r>
 80110aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110ac:	6063      	str	r3, [r4, #4]
 80110ae:	2000      	movs	r0, #0
 80110b0:	6360      	str	r0, [r4, #52]	; 0x34
 80110b2:	b113      	cbz	r3, 80110ba <__ssrefill_r+0x24>
 80110b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	bd10      	pop	{r4, pc}
 80110ba:	6923      	ldr	r3, [r4, #16]
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	2300      	movs	r3, #0
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0320 	orr.w	r3, r3, #32
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	f04f 30ff 	mov.w	r0, #4294967295
 80110ce:	e7f3      	b.n	80110b8 <__ssrefill_r+0x22>

080110d0 <__ssvfiscanf_r>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	460c      	mov	r4, r1
 80110d6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80110da:	2100      	movs	r1, #0
 80110dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80110e0:	49b2      	ldr	r1, [pc, #712]	; (80113ac <__ssvfiscanf_r+0x2dc>)
 80110e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80110e4:	f10d 0804 	add.w	r8, sp, #4
 80110e8:	49b1      	ldr	r1, [pc, #708]	; (80113b0 <__ssvfiscanf_r+0x2e0>)
 80110ea:	4fb2      	ldr	r7, [pc, #712]	; (80113b4 <__ssvfiscanf_r+0x2e4>)
 80110ec:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80113b8 <__ssvfiscanf_r+0x2e8>
 80110f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80110f4:	4606      	mov	r6, r0
 80110f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	f892 a000 	ldrb.w	sl, [r2]
 80110fe:	f1ba 0f00 	cmp.w	sl, #0
 8011102:	f000 8151 	beq.w	80113a8 <__ssvfiscanf_r+0x2d8>
 8011106:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801110a:	f013 0308 	ands.w	r3, r3, #8
 801110e:	f102 0501 	add.w	r5, r2, #1
 8011112:	d019      	beq.n	8011148 <__ssvfiscanf_r+0x78>
 8011114:	6863      	ldr	r3, [r4, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	dd0f      	ble.n	801113a <__ssvfiscanf_r+0x6a>
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	781a      	ldrb	r2, [r3, #0]
 801111e:	5cba      	ldrb	r2, [r7, r2]
 8011120:	0712      	lsls	r2, r2, #28
 8011122:	d401      	bmi.n	8011128 <__ssvfiscanf_r+0x58>
 8011124:	462a      	mov	r2, r5
 8011126:	e7e8      	b.n	80110fa <__ssvfiscanf_r+0x2a>
 8011128:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801112a:	3201      	adds	r2, #1
 801112c:	9245      	str	r2, [sp, #276]	; 0x114
 801112e:	6862      	ldr	r2, [r4, #4]
 8011130:	3301      	adds	r3, #1
 8011132:	3a01      	subs	r2, #1
 8011134:	6062      	str	r2, [r4, #4]
 8011136:	6023      	str	r3, [r4, #0]
 8011138:	e7ec      	b.n	8011114 <__ssvfiscanf_r+0x44>
 801113a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801113c:	4621      	mov	r1, r4
 801113e:	4630      	mov	r0, r6
 8011140:	4798      	blx	r3
 8011142:	2800      	cmp	r0, #0
 8011144:	d0e9      	beq.n	801111a <__ssvfiscanf_r+0x4a>
 8011146:	e7ed      	b.n	8011124 <__ssvfiscanf_r+0x54>
 8011148:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801114c:	f040 8083 	bne.w	8011256 <__ssvfiscanf_r+0x186>
 8011150:	9341      	str	r3, [sp, #260]	; 0x104
 8011152:	9343      	str	r3, [sp, #268]	; 0x10c
 8011154:	7853      	ldrb	r3, [r2, #1]
 8011156:	2b2a      	cmp	r3, #42	; 0x2a
 8011158:	bf02      	ittt	eq
 801115a:	2310      	moveq	r3, #16
 801115c:	1c95      	addeq	r5, r2, #2
 801115e:	9341      	streq	r3, [sp, #260]	; 0x104
 8011160:	220a      	movs	r2, #10
 8011162:	46ab      	mov	fp, r5
 8011164:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8011168:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801116c:	2b09      	cmp	r3, #9
 801116e:	d91d      	bls.n	80111ac <__ssvfiscanf_r+0xdc>
 8011170:	4891      	ldr	r0, [pc, #580]	; (80113b8 <__ssvfiscanf_r+0x2e8>)
 8011172:	2203      	movs	r2, #3
 8011174:	f7ef f84c 	bl	8000210 <memchr>
 8011178:	b140      	cbz	r0, 801118c <__ssvfiscanf_r+0xbc>
 801117a:	2301      	movs	r3, #1
 801117c:	eba0 0009 	sub.w	r0, r0, r9
 8011180:	fa03 f000 	lsl.w	r0, r3, r0
 8011184:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011186:	4318      	orrs	r0, r3
 8011188:	9041      	str	r0, [sp, #260]	; 0x104
 801118a:	465d      	mov	r5, fp
 801118c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011190:	2b78      	cmp	r3, #120	; 0x78
 8011192:	d806      	bhi.n	80111a2 <__ssvfiscanf_r+0xd2>
 8011194:	2b57      	cmp	r3, #87	; 0x57
 8011196:	d810      	bhi.n	80111ba <__ssvfiscanf_r+0xea>
 8011198:	2b25      	cmp	r3, #37	; 0x25
 801119a:	d05c      	beq.n	8011256 <__ssvfiscanf_r+0x186>
 801119c:	d856      	bhi.n	801124c <__ssvfiscanf_r+0x17c>
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d074      	beq.n	801128c <__ssvfiscanf_r+0x1bc>
 80111a2:	2303      	movs	r3, #3
 80111a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80111a6:	230a      	movs	r3, #10
 80111a8:	9342      	str	r3, [sp, #264]	; 0x108
 80111aa:	e081      	b.n	80112b0 <__ssvfiscanf_r+0x1e0>
 80111ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80111ae:	fb02 1303 	mla	r3, r2, r3, r1
 80111b2:	3b30      	subs	r3, #48	; 0x30
 80111b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80111b6:	465d      	mov	r5, fp
 80111b8:	e7d3      	b.n	8011162 <__ssvfiscanf_r+0x92>
 80111ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80111be:	2a20      	cmp	r2, #32
 80111c0:	d8ef      	bhi.n	80111a2 <__ssvfiscanf_r+0xd2>
 80111c2:	a101      	add	r1, pc, #4	; (adr r1, 80111c8 <__ssvfiscanf_r+0xf8>)
 80111c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80111c8:	0801129b 	.word	0x0801129b
 80111cc:	080111a3 	.word	0x080111a3
 80111d0:	080111a3 	.word	0x080111a3
 80111d4:	080112f9 	.word	0x080112f9
 80111d8:	080111a3 	.word	0x080111a3
 80111dc:	080111a3 	.word	0x080111a3
 80111e0:	080111a3 	.word	0x080111a3
 80111e4:	080111a3 	.word	0x080111a3
 80111e8:	080111a3 	.word	0x080111a3
 80111ec:	080111a3 	.word	0x080111a3
 80111f0:	080111a3 	.word	0x080111a3
 80111f4:	0801130f 	.word	0x0801130f
 80111f8:	080112e5 	.word	0x080112e5
 80111fc:	08011253 	.word	0x08011253
 8011200:	08011253 	.word	0x08011253
 8011204:	08011253 	.word	0x08011253
 8011208:	080111a3 	.word	0x080111a3
 801120c:	080112e9 	.word	0x080112e9
 8011210:	080111a3 	.word	0x080111a3
 8011214:	080111a3 	.word	0x080111a3
 8011218:	080111a3 	.word	0x080111a3
 801121c:	080111a3 	.word	0x080111a3
 8011220:	0801131f 	.word	0x0801131f
 8011224:	080112f1 	.word	0x080112f1
 8011228:	08011293 	.word	0x08011293
 801122c:	080111a3 	.word	0x080111a3
 8011230:	080111a3 	.word	0x080111a3
 8011234:	0801131b 	.word	0x0801131b
 8011238:	080111a3 	.word	0x080111a3
 801123c:	080112e5 	.word	0x080112e5
 8011240:	080111a3 	.word	0x080111a3
 8011244:	080111a3 	.word	0x080111a3
 8011248:	0801129b 	.word	0x0801129b
 801124c:	3b45      	subs	r3, #69	; 0x45
 801124e:	2b02      	cmp	r3, #2
 8011250:	d8a7      	bhi.n	80111a2 <__ssvfiscanf_r+0xd2>
 8011252:	2305      	movs	r3, #5
 8011254:	e02b      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 8011256:	6863      	ldr	r3, [r4, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	dd0d      	ble.n	8011278 <__ssvfiscanf_r+0x1a8>
 801125c:	6823      	ldr	r3, [r4, #0]
 801125e:	781a      	ldrb	r2, [r3, #0]
 8011260:	4552      	cmp	r2, sl
 8011262:	f040 80a1 	bne.w	80113a8 <__ssvfiscanf_r+0x2d8>
 8011266:	3301      	adds	r3, #1
 8011268:	6862      	ldr	r2, [r4, #4]
 801126a:	6023      	str	r3, [r4, #0]
 801126c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801126e:	3a01      	subs	r2, #1
 8011270:	3301      	adds	r3, #1
 8011272:	6062      	str	r2, [r4, #4]
 8011274:	9345      	str	r3, [sp, #276]	; 0x114
 8011276:	e755      	b.n	8011124 <__ssvfiscanf_r+0x54>
 8011278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801127a:	4621      	mov	r1, r4
 801127c:	4630      	mov	r0, r6
 801127e:	4798      	blx	r3
 8011280:	2800      	cmp	r0, #0
 8011282:	d0eb      	beq.n	801125c <__ssvfiscanf_r+0x18c>
 8011284:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011286:	2800      	cmp	r0, #0
 8011288:	f040 8084 	bne.w	8011394 <__ssvfiscanf_r+0x2c4>
 801128c:	f04f 30ff 	mov.w	r0, #4294967295
 8011290:	e086      	b.n	80113a0 <__ssvfiscanf_r+0x2d0>
 8011292:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011294:	f042 0220 	orr.w	r2, r2, #32
 8011298:	9241      	str	r2, [sp, #260]	; 0x104
 801129a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801129c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112a0:	9241      	str	r2, [sp, #260]	; 0x104
 80112a2:	2210      	movs	r2, #16
 80112a4:	2b6f      	cmp	r3, #111	; 0x6f
 80112a6:	9242      	str	r2, [sp, #264]	; 0x108
 80112a8:	bf34      	ite	cc
 80112aa:	2303      	movcc	r3, #3
 80112ac:	2304      	movcs	r3, #4
 80112ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80112b0:	6863      	ldr	r3, [r4, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	dd41      	ble.n	801133a <__ssvfiscanf_r+0x26a>
 80112b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80112b8:	0659      	lsls	r1, r3, #25
 80112ba:	d404      	bmi.n	80112c6 <__ssvfiscanf_r+0x1f6>
 80112bc:	6823      	ldr	r3, [r4, #0]
 80112be:	781a      	ldrb	r2, [r3, #0]
 80112c0:	5cba      	ldrb	r2, [r7, r2]
 80112c2:	0712      	lsls	r2, r2, #28
 80112c4:	d440      	bmi.n	8011348 <__ssvfiscanf_r+0x278>
 80112c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	dc4f      	bgt.n	801136c <__ssvfiscanf_r+0x29c>
 80112cc:	466b      	mov	r3, sp
 80112ce:	4622      	mov	r2, r4
 80112d0:	a941      	add	r1, sp, #260	; 0x104
 80112d2:	4630      	mov	r0, r6
 80112d4:	f000 f874 	bl	80113c0 <_scanf_chars>
 80112d8:	2801      	cmp	r0, #1
 80112da:	d065      	beq.n	80113a8 <__ssvfiscanf_r+0x2d8>
 80112dc:	2802      	cmp	r0, #2
 80112de:	f47f af21 	bne.w	8011124 <__ssvfiscanf_r+0x54>
 80112e2:	e7cf      	b.n	8011284 <__ssvfiscanf_r+0x1b4>
 80112e4:	220a      	movs	r2, #10
 80112e6:	e7dd      	b.n	80112a4 <__ssvfiscanf_r+0x1d4>
 80112e8:	2300      	movs	r3, #0
 80112ea:	9342      	str	r3, [sp, #264]	; 0x108
 80112ec:	2303      	movs	r3, #3
 80112ee:	e7de      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 80112f0:	2308      	movs	r3, #8
 80112f2:	9342      	str	r3, [sp, #264]	; 0x108
 80112f4:	2304      	movs	r3, #4
 80112f6:	e7da      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 80112f8:	4629      	mov	r1, r5
 80112fa:	4640      	mov	r0, r8
 80112fc:	f000 f9be 	bl	801167c <__sccl>
 8011300:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011306:	9341      	str	r3, [sp, #260]	; 0x104
 8011308:	4605      	mov	r5, r0
 801130a:	2301      	movs	r3, #1
 801130c:	e7cf      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 801130e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011314:	9341      	str	r3, [sp, #260]	; 0x104
 8011316:	2300      	movs	r3, #0
 8011318:	e7c9      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 801131a:	2302      	movs	r3, #2
 801131c:	e7c7      	b.n	80112ae <__ssvfiscanf_r+0x1de>
 801131e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011320:	06c3      	lsls	r3, r0, #27
 8011322:	f53f aeff 	bmi.w	8011124 <__ssvfiscanf_r+0x54>
 8011326:	9b00      	ldr	r3, [sp, #0]
 8011328:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801132a:	1d19      	adds	r1, r3, #4
 801132c:	9100      	str	r1, [sp, #0]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	07c0      	lsls	r0, r0, #31
 8011332:	bf4c      	ite	mi
 8011334:	801a      	strhmi	r2, [r3, #0]
 8011336:	601a      	strpl	r2, [r3, #0]
 8011338:	e6f4      	b.n	8011124 <__ssvfiscanf_r+0x54>
 801133a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801133c:	4621      	mov	r1, r4
 801133e:	4630      	mov	r0, r6
 8011340:	4798      	blx	r3
 8011342:	2800      	cmp	r0, #0
 8011344:	d0b7      	beq.n	80112b6 <__ssvfiscanf_r+0x1e6>
 8011346:	e79d      	b.n	8011284 <__ssvfiscanf_r+0x1b4>
 8011348:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801134a:	3201      	adds	r2, #1
 801134c:	9245      	str	r2, [sp, #276]	; 0x114
 801134e:	6862      	ldr	r2, [r4, #4]
 8011350:	3a01      	subs	r2, #1
 8011352:	2a00      	cmp	r2, #0
 8011354:	6062      	str	r2, [r4, #4]
 8011356:	dd02      	ble.n	801135e <__ssvfiscanf_r+0x28e>
 8011358:	3301      	adds	r3, #1
 801135a:	6023      	str	r3, [r4, #0]
 801135c:	e7ae      	b.n	80112bc <__ssvfiscanf_r+0x1ec>
 801135e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011360:	4621      	mov	r1, r4
 8011362:	4630      	mov	r0, r6
 8011364:	4798      	blx	r3
 8011366:	2800      	cmp	r0, #0
 8011368:	d0a8      	beq.n	80112bc <__ssvfiscanf_r+0x1ec>
 801136a:	e78b      	b.n	8011284 <__ssvfiscanf_r+0x1b4>
 801136c:	2b04      	cmp	r3, #4
 801136e:	dc06      	bgt.n	801137e <__ssvfiscanf_r+0x2ae>
 8011370:	466b      	mov	r3, sp
 8011372:	4622      	mov	r2, r4
 8011374:	a941      	add	r1, sp, #260	; 0x104
 8011376:	4630      	mov	r0, r6
 8011378:	f000 f87a 	bl	8011470 <_scanf_i>
 801137c:	e7ac      	b.n	80112d8 <__ssvfiscanf_r+0x208>
 801137e:	4b0f      	ldr	r3, [pc, #60]	; (80113bc <__ssvfiscanf_r+0x2ec>)
 8011380:	2b00      	cmp	r3, #0
 8011382:	f43f aecf 	beq.w	8011124 <__ssvfiscanf_r+0x54>
 8011386:	466b      	mov	r3, sp
 8011388:	4622      	mov	r2, r4
 801138a:	a941      	add	r1, sp, #260	; 0x104
 801138c:	4630      	mov	r0, r6
 801138e:	f7fc fc31 	bl	800dbf4 <_scanf_float>
 8011392:	e7a1      	b.n	80112d8 <__ssvfiscanf_r+0x208>
 8011394:	89a3      	ldrh	r3, [r4, #12]
 8011396:	f013 0f40 	tst.w	r3, #64	; 0x40
 801139a:	bf18      	it	ne
 801139c:	f04f 30ff 	movne.w	r0, #4294967295
 80113a0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80113aa:	e7f9      	b.n	80113a0 <__ssvfiscanf_r+0x2d0>
 80113ac:	0801101d 	.word	0x0801101d
 80113b0:	08011097 	.word	0x08011097
 80113b4:	080128d1 	.word	0x080128d1
 80113b8:	08012c4a 	.word	0x08012c4a
 80113bc:	0800dbf5 	.word	0x0800dbf5

080113c0 <_scanf_chars>:
 80113c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113c4:	4615      	mov	r5, r2
 80113c6:	688a      	ldr	r2, [r1, #8]
 80113c8:	4680      	mov	r8, r0
 80113ca:	460c      	mov	r4, r1
 80113cc:	b932      	cbnz	r2, 80113dc <_scanf_chars+0x1c>
 80113ce:	698a      	ldr	r2, [r1, #24]
 80113d0:	2a00      	cmp	r2, #0
 80113d2:	bf0c      	ite	eq
 80113d4:	2201      	moveq	r2, #1
 80113d6:	f04f 32ff 	movne.w	r2, #4294967295
 80113da:	608a      	str	r2, [r1, #8]
 80113dc:	6822      	ldr	r2, [r4, #0]
 80113de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801146c <_scanf_chars+0xac>
 80113e2:	06d1      	lsls	r1, r2, #27
 80113e4:	bf5f      	itttt	pl
 80113e6:	681a      	ldrpl	r2, [r3, #0]
 80113e8:	1d11      	addpl	r1, r2, #4
 80113ea:	6019      	strpl	r1, [r3, #0]
 80113ec:	6816      	ldrpl	r6, [r2, #0]
 80113ee:	2700      	movs	r7, #0
 80113f0:	69a0      	ldr	r0, [r4, #24]
 80113f2:	b188      	cbz	r0, 8011418 <_scanf_chars+0x58>
 80113f4:	2801      	cmp	r0, #1
 80113f6:	d107      	bne.n	8011408 <_scanf_chars+0x48>
 80113f8:	682b      	ldr	r3, [r5, #0]
 80113fa:	781a      	ldrb	r2, [r3, #0]
 80113fc:	6963      	ldr	r3, [r4, #20]
 80113fe:	5c9b      	ldrb	r3, [r3, r2]
 8011400:	b953      	cbnz	r3, 8011418 <_scanf_chars+0x58>
 8011402:	bb27      	cbnz	r7, 801144e <_scanf_chars+0x8e>
 8011404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011408:	2802      	cmp	r0, #2
 801140a:	d120      	bne.n	801144e <_scanf_chars+0x8e>
 801140c:	682b      	ldr	r3, [r5, #0]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	f813 3009 	ldrb.w	r3, [r3, r9]
 8011414:	071b      	lsls	r3, r3, #28
 8011416:	d41a      	bmi.n	801144e <_scanf_chars+0x8e>
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	06da      	lsls	r2, r3, #27
 801141c:	bf5e      	ittt	pl
 801141e:	682b      	ldrpl	r3, [r5, #0]
 8011420:	781b      	ldrbpl	r3, [r3, #0]
 8011422:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011426:	682a      	ldr	r2, [r5, #0]
 8011428:	686b      	ldr	r3, [r5, #4]
 801142a:	3201      	adds	r2, #1
 801142c:	602a      	str	r2, [r5, #0]
 801142e:	68a2      	ldr	r2, [r4, #8]
 8011430:	3b01      	subs	r3, #1
 8011432:	3a01      	subs	r2, #1
 8011434:	606b      	str	r3, [r5, #4]
 8011436:	3701      	adds	r7, #1
 8011438:	60a2      	str	r2, [r4, #8]
 801143a:	b142      	cbz	r2, 801144e <_scanf_chars+0x8e>
 801143c:	2b00      	cmp	r3, #0
 801143e:	dcd7      	bgt.n	80113f0 <_scanf_chars+0x30>
 8011440:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011444:	4629      	mov	r1, r5
 8011446:	4640      	mov	r0, r8
 8011448:	4798      	blx	r3
 801144a:	2800      	cmp	r0, #0
 801144c:	d0d0      	beq.n	80113f0 <_scanf_chars+0x30>
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	f013 0310 	ands.w	r3, r3, #16
 8011454:	d105      	bne.n	8011462 <_scanf_chars+0xa2>
 8011456:	68e2      	ldr	r2, [r4, #12]
 8011458:	3201      	adds	r2, #1
 801145a:	60e2      	str	r2, [r4, #12]
 801145c:	69a2      	ldr	r2, [r4, #24]
 801145e:	b102      	cbz	r2, 8011462 <_scanf_chars+0xa2>
 8011460:	7033      	strb	r3, [r6, #0]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	441f      	add	r7, r3
 8011466:	6127      	str	r7, [r4, #16]
 8011468:	2000      	movs	r0, #0
 801146a:	e7cb      	b.n	8011404 <_scanf_chars+0x44>
 801146c:	080128d1 	.word	0x080128d1

08011470 <_scanf_i>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	4698      	mov	r8, r3
 8011476:	4b74      	ldr	r3, [pc, #464]	; (8011648 <_scanf_i+0x1d8>)
 8011478:	460c      	mov	r4, r1
 801147a:	4682      	mov	sl, r0
 801147c:	4616      	mov	r6, r2
 801147e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011482:	b087      	sub	sp, #28
 8011484:	ab03      	add	r3, sp, #12
 8011486:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801148a:	4b70      	ldr	r3, [pc, #448]	; (801164c <_scanf_i+0x1dc>)
 801148c:	69a1      	ldr	r1, [r4, #24]
 801148e:	4a70      	ldr	r2, [pc, #448]	; (8011650 <_scanf_i+0x1e0>)
 8011490:	2903      	cmp	r1, #3
 8011492:	bf18      	it	ne
 8011494:	461a      	movne	r2, r3
 8011496:	68a3      	ldr	r3, [r4, #8]
 8011498:	9201      	str	r2, [sp, #4]
 801149a:	1e5a      	subs	r2, r3, #1
 801149c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80114a0:	bf88      	it	hi
 80114a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80114a6:	4627      	mov	r7, r4
 80114a8:	bf82      	ittt	hi
 80114aa:	eb03 0905 	addhi.w	r9, r3, r5
 80114ae:	f240 135d 	movwhi	r3, #349	; 0x15d
 80114b2:	60a3      	strhi	r3, [r4, #8]
 80114b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80114b8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80114bc:	bf98      	it	ls
 80114be:	f04f 0900 	movls.w	r9, #0
 80114c2:	6023      	str	r3, [r4, #0]
 80114c4:	463d      	mov	r5, r7
 80114c6:	f04f 0b00 	mov.w	fp, #0
 80114ca:	6831      	ldr	r1, [r6, #0]
 80114cc:	ab03      	add	r3, sp, #12
 80114ce:	7809      	ldrb	r1, [r1, #0]
 80114d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80114d4:	2202      	movs	r2, #2
 80114d6:	f7ee fe9b 	bl	8000210 <memchr>
 80114da:	b328      	cbz	r0, 8011528 <_scanf_i+0xb8>
 80114dc:	f1bb 0f01 	cmp.w	fp, #1
 80114e0:	d159      	bne.n	8011596 <_scanf_i+0x126>
 80114e2:	6862      	ldr	r2, [r4, #4]
 80114e4:	b92a      	cbnz	r2, 80114f2 <_scanf_i+0x82>
 80114e6:	6822      	ldr	r2, [r4, #0]
 80114e8:	2308      	movs	r3, #8
 80114ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114ee:	6063      	str	r3, [r4, #4]
 80114f0:	6022      	str	r2, [r4, #0]
 80114f2:	6822      	ldr	r2, [r4, #0]
 80114f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80114f8:	6022      	str	r2, [r4, #0]
 80114fa:	68a2      	ldr	r2, [r4, #8]
 80114fc:	1e51      	subs	r1, r2, #1
 80114fe:	60a1      	str	r1, [r4, #8]
 8011500:	b192      	cbz	r2, 8011528 <_scanf_i+0xb8>
 8011502:	6832      	ldr	r2, [r6, #0]
 8011504:	1c51      	adds	r1, r2, #1
 8011506:	6031      	str	r1, [r6, #0]
 8011508:	7812      	ldrb	r2, [r2, #0]
 801150a:	f805 2b01 	strb.w	r2, [r5], #1
 801150e:	6872      	ldr	r2, [r6, #4]
 8011510:	3a01      	subs	r2, #1
 8011512:	2a00      	cmp	r2, #0
 8011514:	6072      	str	r2, [r6, #4]
 8011516:	dc07      	bgt.n	8011528 <_scanf_i+0xb8>
 8011518:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801151c:	4631      	mov	r1, r6
 801151e:	4650      	mov	r0, sl
 8011520:	4790      	blx	r2
 8011522:	2800      	cmp	r0, #0
 8011524:	f040 8085 	bne.w	8011632 <_scanf_i+0x1c2>
 8011528:	f10b 0b01 	add.w	fp, fp, #1
 801152c:	f1bb 0f03 	cmp.w	fp, #3
 8011530:	d1cb      	bne.n	80114ca <_scanf_i+0x5a>
 8011532:	6863      	ldr	r3, [r4, #4]
 8011534:	b90b      	cbnz	r3, 801153a <_scanf_i+0xca>
 8011536:	230a      	movs	r3, #10
 8011538:	6063      	str	r3, [r4, #4]
 801153a:	6863      	ldr	r3, [r4, #4]
 801153c:	4945      	ldr	r1, [pc, #276]	; (8011654 <_scanf_i+0x1e4>)
 801153e:	6960      	ldr	r0, [r4, #20]
 8011540:	1ac9      	subs	r1, r1, r3
 8011542:	f000 f89b 	bl	801167c <__sccl>
 8011546:	f04f 0b00 	mov.w	fp, #0
 801154a:	68a3      	ldr	r3, [r4, #8]
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d03d      	beq.n	80115ce <_scanf_i+0x15e>
 8011552:	6831      	ldr	r1, [r6, #0]
 8011554:	6960      	ldr	r0, [r4, #20]
 8011556:	f891 c000 	ldrb.w	ip, [r1]
 801155a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801155e:	2800      	cmp	r0, #0
 8011560:	d035      	beq.n	80115ce <_scanf_i+0x15e>
 8011562:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011566:	d124      	bne.n	80115b2 <_scanf_i+0x142>
 8011568:	0510      	lsls	r0, r2, #20
 801156a:	d522      	bpl.n	80115b2 <_scanf_i+0x142>
 801156c:	f10b 0b01 	add.w	fp, fp, #1
 8011570:	f1b9 0f00 	cmp.w	r9, #0
 8011574:	d003      	beq.n	801157e <_scanf_i+0x10e>
 8011576:	3301      	adds	r3, #1
 8011578:	f109 39ff 	add.w	r9, r9, #4294967295
 801157c:	60a3      	str	r3, [r4, #8]
 801157e:	6873      	ldr	r3, [r6, #4]
 8011580:	3b01      	subs	r3, #1
 8011582:	2b00      	cmp	r3, #0
 8011584:	6073      	str	r3, [r6, #4]
 8011586:	dd1b      	ble.n	80115c0 <_scanf_i+0x150>
 8011588:	6833      	ldr	r3, [r6, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	6033      	str	r3, [r6, #0]
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	3b01      	subs	r3, #1
 8011592:	60a3      	str	r3, [r4, #8]
 8011594:	e7d9      	b.n	801154a <_scanf_i+0xda>
 8011596:	f1bb 0f02 	cmp.w	fp, #2
 801159a:	d1ae      	bne.n	80114fa <_scanf_i+0x8a>
 801159c:	6822      	ldr	r2, [r4, #0]
 801159e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80115a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80115a6:	d1bf      	bne.n	8011528 <_scanf_i+0xb8>
 80115a8:	2310      	movs	r3, #16
 80115aa:	6063      	str	r3, [r4, #4]
 80115ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80115b0:	e7a2      	b.n	80114f8 <_scanf_i+0x88>
 80115b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80115b6:	6022      	str	r2, [r4, #0]
 80115b8:	780b      	ldrb	r3, [r1, #0]
 80115ba:	f805 3b01 	strb.w	r3, [r5], #1
 80115be:	e7de      	b.n	801157e <_scanf_i+0x10e>
 80115c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80115c4:	4631      	mov	r1, r6
 80115c6:	4650      	mov	r0, sl
 80115c8:	4798      	blx	r3
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d0df      	beq.n	801158e <_scanf_i+0x11e>
 80115ce:	6823      	ldr	r3, [r4, #0]
 80115d0:	05d9      	lsls	r1, r3, #23
 80115d2:	d50d      	bpl.n	80115f0 <_scanf_i+0x180>
 80115d4:	42bd      	cmp	r5, r7
 80115d6:	d909      	bls.n	80115ec <_scanf_i+0x17c>
 80115d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80115dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115e0:	4632      	mov	r2, r6
 80115e2:	4650      	mov	r0, sl
 80115e4:	4798      	blx	r3
 80115e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80115ea:	464d      	mov	r5, r9
 80115ec:	42bd      	cmp	r5, r7
 80115ee:	d028      	beq.n	8011642 <_scanf_i+0x1d2>
 80115f0:	6822      	ldr	r2, [r4, #0]
 80115f2:	f012 0210 	ands.w	r2, r2, #16
 80115f6:	d113      	bne.n	8011620 <_scanf_i+0x1b0>
 80115f8:	702a      	strb	r2, [r5, #0]
 80115fa:	6863      	ldr	r3, [r4, #4]
 80115fc:	9e01      	ldr	r6, [sp, #4]
 80115fe:	4639      	mov	r1, r7
 8011600:	4650      	mov	r0, sl
 8011602:	47b0      	blx	r6
 8011604:	f8d8 3000 	ldr.w	r3, [r8]
 8011608:	6821      	ldr	r1, [r4, #0]
 801160a:	1d1a      	adds	r2, r3, #4
 801160c:	f8c8 2000 	str.w	r2, [r8]
 8011610:	f011 0f20 	tst.w	r1, #32
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	d00f      	beq.n	8011638 <_scanf_i+0x1c8>
 8011618:	6018      	str	r0, [r3, #0]
 801161a:	68e3      	ldr	r3, [r4, #12]
 801161c:	3301      	adds	r3, #1
 801161e:	60e3      	str	r3, [r4, #12]
 8011620:	1bed      	subs	r5, r5, r7
 8011622:	44ab      	add	fp, r5
 8011624:	6925      	ldr	r5, [r4, #16]
 8011626:	445d      	add	r5, fp
 8011628:	6125      	str	r5, [r4, #16]
 801162a:	2000      	movs	r0, #0
 801162c:	b007      	add	sp, #28
 801162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011632:	f04f 0b00 	mov.w	fp, #0
 8011636:	e7ca      	b.n	80115ce <_scanf_i+0x15e>
 8011638:	07ca      	lsls	r2, r1, #31
 801163a:	bf4c      	ite	mi
 801163c:	8018      	strhmi	r0, [r3, #0]
 801163e:	6018      	strpl	r0, [r3, #0]
 8011640:	e7eb      	b.n	801161a <_scanf_i+0x1aa>
 8011642:	2001      	movs	r0, #1
 8011644:	e7f2      	b.n	801162c <_scanf_i+0x1bc>
 8011646:	bf00      	nop
 8011648:	08012374 	.word	0x08012374
 801164c:	0801180d 	.word	0x0801180d
 8011650:	0800ef51 	.word	0x0800ef51
 8011654:	08012c6e 	.word	0x08012c6e

08011658 <_read_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4d07      	ldr	r5, [pc, #28]	; (8011678 <_read_r+0x20>)
 801165c:	4604      	mov	r4, r0
 801165e:	4608      	mov	r0, r1
 8011660:	4611      	mov	r1, r2
 8011662:	2200      	movs	r2, #0
 8011664:	602a      	str	r2, [r5, #0]
 8011666:	461a      	mov	r2, r3
 8011668:	f7f4 f8b4 	bl	80057d4 <_read>
 801166c:	1c43      	adds	r3, r0, #1
 801166e:	d102      	bne.n	8011676 <_read_r+0x1e>
 8011670:	682b      	ldr	r3, [r5, #0]
 8011672:	b103      	cbz	r3, 8011676 <_read_r+0x1e>
 8011674:	6023      	str	r3, [r4, #0]
 8011676:	bd38      	pop	{r3, r4, r5, pc}
 8011678:	20000624 	.word	0x20000624

0801167c <__sccl>:
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	780b      	ldrb	r3, [r1, #0]
 8011680:	4604      	mov	r4, r0
 8011682:	2b5e      	cmp	r3, #94	; 0x5e
 8011684:	bf0b      	itete	eq
 8011686:	784b      	ldrbeq	r3, [r1, #1]
 8011688:	1c48      	addne	r0, r1, #1
 801168a:	1c88      	addeq	r0, r1, #2
 801168c:	2200      	movne	r2, #0
 801168e:	bf08      	it	eq
 8011690:	2201      	moveq	r2, #1
 8011692:	1e61      	subs	r1, r4, #1
 8011694:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011698:	f801 2f01 	strb.w	r2, [r1, #1]!
 801169c:	42a9      	cmp	r1, r5
 801169e:	d1fb      	bne.n	8011698 <__sccl+0x1c>
 80116a0:	b90b      	cbnz	r3, 80116a6 <__sccl+0x2a>
 80116a2:	3801      	subs	r0, #1
 80116a4:	bd70      	pop	{r4, r5, r6, pc}
 80116a6:	f082 0101 	eor.w	r1, r2, #1
 80116aa:	54e1      	strb	r1, [r4, r3]
 80116ac:	1c42      	adds	r2, r0, #1
 80116ae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80116b2:	2d2d      	cmp	r5, #45	; 0x2d
 80116b4:	f102 36ff 	add.w	r6, r2, #4294967295
 80116b8:	4610      	mov	r0, r2
 80116ba:	d006      	beq.n	80116ca <__sccl+0x4e>
 80116bc:	2d5d      	cmp	r5, #93	; 0x5d
 80116be:	d0f1      	beq.n	80116a4 <__sccl+0x28>
 80116c0:	b90d      	cbnz	r5, 80116c6 <__sccl+0x4a>
 80116c2:	4630      	mov	r0, r6
 80116c4:	e7ee      	b.n	80116a4 <__sccl+0x28>
 80116c6:	462b      	mov	r3, r5
 80116c8:	e7ef      	b.n	80116aa <__sccl+0x2e>
 80116ca:	7816      	ldrb	r6, [r2, #0]
 80116cc:	2e5d      	cmp	r6, #93	; 0x5d
 80116ce:	d0fa      	beq.n	80116c6 <__sccl+0x4a>
 80116d0:	42b3      	cmp	r3, r6
 80116d2:	dcf8      	bgt.n	80116c6 <__sccl+0x4a>
 80116d4:	4618      	mov	r0, r3
 80116d6:	3001      	adds	r0, #1
 80116d8:	4286      	cmp	r6, r0
 80116da:	5421      	strb	r1, [r4, r0]
 80116dc:	dcfb      	bgt.n	80116d6 <__sccl+0x5a>
 80116de:	43d8      	mvns	r0, r3
 80116e0:	4430      	add	r0, r6
 80116e2:	1c5d      	adds	r5, r3, #1
 80116e4:	42b3      	cmp	r3, r6
 80116e6:	bfa8      	it	ge
 80116e8:	2000      	movge	r0, #0
 80116ea:	182b      	adds	r3, r5, r0
 80116ec:	3202      	adds	r2, #2
 80116ee:	e7de      	b.n	80116ae <__sccl+0x32>

080116f0 <strncmp>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	b16a      	cbz	r2, 8011710 <strncmp+0x20>
 80116f4:	3901      	subs	r1, #1
 80116f6:	1884      	adds	r4, r0, r2
 80116f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80116fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011700:	4293      	cmp	r3, r2
 8011702:	d103      	bne.n	801170c <strncmp+0x1c>
 8011704:	42a0      	cmp	r0, r4
 8011706:	d001      	beq.n	801170c <strncmp+0x1c>
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1f5      	bne.n	80116f8 <strncmp+0x8>
 801170c:	1a98      	subs	r0, r3, r2
 801170e:	bd10      	pop	{r4, pc}
 8011710:	4610      	mov	r0, r2
 8011712:	e7fc      	b.n	801170e <strncmp+0x1e>

08011714 <_strtoul_l.isra.0>:
 8011714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011718:	4e3b      	ldr	r6, [pc, #236]	; (8011808 <_strtoul_l.isra.0+0xf4>)
 801171a:	4686      	mov	lr, r0
 801171c:	468c      	mov	ip, r1
 801171e:	4660      	mov	r0, ip
 8011720:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011724:	5da5      	ldrb	r5, [r4, r6]
 8011726:	f015 0508 	ands.w	r5, r5, #8
 801172a:	d1f8      	bne.n	801171e <_strtoul_l.isra.0+0xa>
 801172c:	2c2d      	cmp	r4, #45	; 0x2d
 801172e:	d134      	bne.n	801179a <_strtoul_l.isra.0+0x86>
 8011730:	f89c 4000 	ldrb.w	r4, [ip]
 8011734:	f04f 0801 	mov.w	r8, #1
 8011738:	f100 0c02 	add.w	ip, r0, #2
 801173c:	2b00      	cmp	r3, #0
 801173e:	d05e      	beq.n	80117fe <_strtoul_l.isra.0+0xea>
 8011740:	2b10      	cmp	r3, #16
 8011742:	d10c      	bne.n	801175e <_strtoul_l.isra.0+0x4a>
 8011744:	2c30      	cmp	r4, #48	; 0x30
 8011746:	d10a      	bne.n	801175e <_strtoul_l.isra.0+0x4a>
 8011748:	f89c 0000 	ldrb.w	r0, [ip]
 801174c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011750:	2858      	cmp	r0, #88	; 0x58
 8011752:	d14f      	bne.n	80117f4 <_strtoul_l.isra.0+0xe0>
 8011754:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8011758:	2310      	movs	r3, #16
 801175a:	f10c 0c02 	add.w	ip, ip, #2
 801175e:	f04f 37ff 	mov.w	r7, #4294967295
 8011762:	2500      	movs	r5, #0
 8011764:	fbb7 f7f3 	udiv	r7, r7, r3
 8011768:	fb03 f907 	mul.w	r9, r3, r7
 801176c:	ea6f 0909 	mvn.w	r9, r9
 8011770:	4628      	mov	r0, r5
 8011772:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8011776:	2e09      	cmp	r6, #9
 8011778:	d818      	bhi.n	80117ac <_strtoul_l.isra.0+0x98>
 801177a:	4634      	mov	r4, r6
 801177c:	42a3      	cmp	r3, r4
 801177e:	dd24      	ble.n	80117ca <_strtoul_l.isra.0+0xb6>
 8011780:	2d00      	cmp	r5, #0
 8011782:	db1f      	blt.n	80117c4 <_strtoul_l.isra.0+0xb0>
 8011784:	4287      	cmp	r7, r0
 8011786:	d31d      	bcc.n	80117c4 <_strtoul_l.isra.0+0xb0>
 8011788:	d101      	bne.n	801178e <_strtoul_l.isra.0+0x7a>
 801178a:	45a1      	cmp	r9, r4
 801178c:	db1a      	blt.n	80117c4 <_strtoul_l.isra.0+0xb0>
 801178e:	fb00 4003 	mla	r0, r0, r3, r4
 8011792:	2501      	movs	r5, #1
 8011794:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011798:	e7eb      	b.n	8011772 <_strtoul_l.isra.0+0x5e>
 801179a:	2c2b      	cmp	r4, #43	; 0x2b
 801179c:	bf08      	it	eq
 801179e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80117a2:	46a8      	mov	r8, r5
 80117a4:	bf08      	it	eq
 80117a6:	f100 0c02 	addeq.w	ip, r0, #2
 80117aa:	e7c7      	b.n	801173c <_strtoul_l.isra.0+0x28>
 80117ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80117b0:	2e19      	cmp	r6, #25
 80117b2:	d801      	bhi.n	80117b8 <_strtoul_l.isra.0+0xa4>
 80117b4:	3c37      	subs	r4, #55	; 0x37
 80117b6:	e7e1      	b.n	801177c <_strtoul_l.isra.0+0x68>
 80117b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80117bc:	2e19      	cmp	r6, #25
 80117be:	d804      	bhi.n	80117ca <_strtoul_l.isra.0+0xb6>
 80117c0:	3c57      	subs	r4, #87	; 0x57
 80117c2:	e7db      	b.n	801177c <_strtoul_l.isra.0+0x68>
 80117c4:	f04f 35ff 	mov.w	r5, #4294967295
 80117c8:	e7e4      	b.n	8011794 <_strtoul_l.isra.0+0x80>
 80117ca:	2d00      	cmp	r5, #0
 80117cc:	da07      	bge.n	80117de <_strtoul_l.isra.0+0xca>
 80117ce:	2322      	movs	r3, #34	; 0x22
 80117d0:	f8ce 3000 	str.w	r3, [lr]
 80117d4:	f04f 30ff 	mov.w	r0, #4294967295
 80117d8:	b942      	cbnz	r2, 80117ec <_strtoul_l.isra.0+0xd8>
 80117da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117de:	f1b8 0f00 	cmp.w	r8, #0
 80117e2:	d000      	beq.n	80117e6 <_strtoul_l.isra.0+0xd2>
 80117e4:	4240      	negs	r0, r0
 80117e6:	2a00      	cmp	r2, #0
 80117e8:	d0f7      	beq.n	80117da <_strtoul_l.isra.0+0xc6>
 80117ea:	b10d      	cbz	r5, 80117f0 <_strtoul_l.isra.0+0xdc>
 80117ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80117f0:	6011      	str	r1, [r2, #0]
 80117f2:	e7f2      	b.n	80117da <_strtoul_l.isra.0+0xc6>
 80117f4:	2430      	movs	r4, #48	; 0x30
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d1b1      	bne.n	801175e <_strtoul_l.isra.0+0x4a>
 80117fa:	2308      	movs	r3, #8
 80117fc:	e7af      	b.n	801175e <_strtoul_l.isra.0+0x4a>
 80117fe:	2c30      	cmp	r4, #48	; 0x30
 8011800:	d0a2      	beq.n	8011748 <_strtoul_l.isra.0+0x34>
 8011802:	230a      	movs	r3, #10
 8011804:	e7ab      	b.n	801175e <_strtoul_l.isra.0+0x4a>
 8011806:	bf00      	nop
 8011808:	080128d1 	.word	0x080128d1

0801180c <_strtoul_r>:
 801180c:	f7ff bf82 	b.w	8011714 <_strtoul_l.isra.0>

08011810 <__submore>:
 8011810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011814:	460c      	mov	r4, r1
 8011816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801181c:	4299      	cmp	r1, r3
 801181e:	d11d      	bne.n	801185c <__submore+0x4c>
 8011820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011824:	f7fb fd22 	bl	800d26c <_malloc_r>
 8011828:	b918      	cbnz	r0, 8011832 <__submore+0x22>
 801182a:	f04f 30ff 	mov.w	r0, #4294967295
 801182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011836:	63a3      	str	r3, [r4, #56]	; 0x38
 8011838:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801183c:	6360      	str	r0, [r4, #52]	; 0x34
 801183e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011842:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011846:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801184a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801184e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011852:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011856:	6020      	str	r0, [r4, #0]
 8011858:	2000      	movs	r0, #0
 801185a:	e7e8      	b.n	801182e <__submore+0x1e>
 801185c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801185e:	0077      	lsls	r7, r6, #1
 8011860:	463a      	mov	r2, r7
 8011862:	f000 fa07 	bl	8011c74 <_realloc_r>
 8011866:	4605      	mov	r5, r0
 8011868:	2800      	cmp	r0, #0
 801186a:	d0de      	beq.n	801182a <__submore+0x1a>
 801186c:	eb00 0806 	add.w	r8, r0, r6
 8011870:	4601      	mov	r1, r0
 8011872:	4632      	mov	r2, r6
 8011874:	4640      	mov	r0, r8
 8011876:	f7fb fc79 	bl	800d16c <memcpy>
 801187a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801187e:	f8c4 8000 	str.w	r8, [r4]
 8011882:	e7e9      	b.n	8011858 <__submore+0x48>

08011884 <__ascii_wctomb>:
 8011884:	b149      	cbz	r1, 801189a <__ascii_wctomb+0x16>
 8011886:	2aff      	cmp	r2, #255	; 0xff
 8011888:	bf85      	ittet	hi
 801188a:	238a      	movhi	r3, #138	; 0x8a
 801188c:	6003      	strhi	r3, [r0, #0]
 801188e:	700a      	strbls	r2, [r1, #0]
 8011890:	f04f 30ff 	movhi.w	r0, #4294967295
 8011894:	bf98      	it	ls
 8011896:	2001      	movls	r0, #1
 8011898:	4770      	bx	lr
 801189a:	4608      	mov	r0, r1
 801189c:	4770      	bx	lr
	...

080118a0 <__assert_func>:
 80118a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118a2:	4614      	mov	r4, r2
 80118a4:	461a      	mov	r2, r3
 80118a6:	4b09      	ldr	r3, [pc, #36]	; (80118cc <__assert_func+0x2c>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4605      	mov	r5, r0
 80118ac:	68d8      	ldr	r0, [r3, #12]
 80118ae:	b14c      	cbz	r4, 80118c4 <__assert_func+0x24>
 80118b0:	4b07      	ldr	r3, [pc, #28]	; (80118d0 <__assert_func+0x30>)
 80118b2:	9100      	str	r1, [sp, #0]
 80118b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118b8:	4906      	ldr	r1, [pc, #24]	; (80118d4 <__assert_func+0x34>)
 80118ba:	462b      	mov	r3, r5
 80118bc:	f000 f9a6 	bl	8011c0c <fiprintf>
 80118c0:	f7fb fc12 	bl	800d0e8 <abort>
 80118c4:	4b04      	ldr	r3, [pc, #16]	; (80118d8 <__assert_func+0x38>)
 80118c6:	461c      	mov	r4, r3
 80118c8:	e7f3      	b.n	80118b2 <__assert_func+0x12>
 80118ca:	bf00      	nop
 80118cc:	2000000c 	.word	0x2000000c
 80118d0:	08012c70 	.word	0x08012c70
 80118d4:	08012c7d 	.word	0x08012c7d
 80118d8:	08012cab 	.word	0x08012cab

080118dc <__sflush_r>:
 80118dc:	898a      	ldrh	r2, [r1, #12]
 80118de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e2:	4605      	mov	r5, r0
 80118e4:	0710      	lsls	r0, r2, #28
 80118e6:	460c      	mov	r4, r1
 80118e8:	d458      	bmi.n	801199c <__sflush_r+0xc0>
 80118ea:	684b      	ldr	r3, [r1, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dc05      	bgt.n	80118fc <__sflush_r+0x20>
 80118f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dc02      	bgt.n	80118fc <__sflush_r+0x20>
 80118f6:	2000      	movs	r0, #0
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118fe:	2e00      	cmp	r6, #0
 8011900:	d0f9      	beq.n	80118f6 <__sflush_r+0x1a>
 8011902:	2300      	movs	r3, #0
 8011904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011908:	682f      	ldr	r7, [r5, #0]
 801190a:	602b      	str	r3, [r5, #0]
 801190c:	d032      	beq.n	8011974 <__sflush_r+0x98>
 801190e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011910:	89a3      	ldrh	r3, [r4, #12]
 8011912:	075a      	lsls	r2, r3, #29
 8011914:	d505      	bpl.n	8011922 <__sflush_r+0x46>
 8011916:	6863      	ldr	r3, [r4, #4]
 8011918:	1ac0      	subs	r0, r0, r3
 801191a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801191c:	b10b      	cbz	r3, 8011922 <__sflush_r+0x46>
 801191e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011920:	1ac0      	subs	r0, r0, r3
 8011922:	2300      	movs	r3, #0
 8011924:	4602      	mov	r2, r0
 8011926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011928:	6a21      	ldr	r1, [r4, #32]
 801192a:	4628      	mov	r0, r5
 801192c:	47b0      	blx	r6
 801192e:	1c43      	adds	r3, r0, #1
 8011930:	89a3      	ldrh	r3, [r4, #12]
 8011932:	d106      	bne.n	8011942 <__sflush_r+0x66>
 8011934:	6829      	ldr	r1, [r5, #0]
 8011936:	291d      	cmp	r1, #29
 8011938:	d82c      	bhi.n	8011994 <__sflush_r+0xb8>
 801193a:	4a2a      	ldr	r2, [pc, #168]	; (80119e4 <__sflush_r+0x108>)
 801193c:	40ca      	lsrs	r2, r1
 801193e:	07d6      	lsls	r6, r2, #31
 8011940:	d528      	bpl.n	8011994 <__sflush_r+0xb8>
 8011942:	2200      	movs	r2, #0
 8011944:	6062      	str	r2, [r4, #4]
 8011946:	04d9      	lsls	r1, r3, #19
 8011948:	6922      	ldr	r2, [r4, #16]
 801194a:	6022      	str	r2, [r4, #0]
 801194c:	d504      	bpl.n	8011958 <__sflush_r+0x7c>
 801194e:	1c42      	adds	r2, r0, #1
 8011950:	d101      	bne.n	8011956 <__sflush_r+0x7a>
 8011952:	682b      	ldr	r3, [r5, #0]
 8011954:	b903      	cbnz	r3, 8011958 <__sflush_r+0x7c>
 8011956:	6560      	str	r0, [r4, #84]	; 0x54
 8011958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801195a:	602f      	str	r7, [r5, #0]
 801195c:	2900      	cmp	r1, #0
 801195e:	d0ca      	beq.n	80118f6 <__sflush_r+0x1a>
 8011960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011964:	4299      	cmp	r1, r3
 8011966:	d002      	beq.n	801196e <__sflush_r+0x92>
 8011968:	4628      	mov	r0, r5
 801196a:	f7fb fc2f 	bl	800d1cc <_free_r>
 801196e:	2000      	movs	r0, #0
 8011970:	6360      	str	r0, [r4, #52]	; 0x34
 8011972:	e7c1      	b.n	80118f8 <__sflush_r+0x1c>
 8011974:	6a21      	ldr	r1, [r4, #32]
 8011976:	2301      	movs	r3, #1
 8011978:	4628      	mov	r0, r5
 801197a:	47b0      	blx	r6
 801197c:	1c41      	adds	r1, r0, #1
 801197e:	d1c7      	bne.n	8011910 <__sflush_r+0x34>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d0c4      	beq.n	8011910 <__sflush_r+0x34>
 8011986:	2b1d      	cmp	r3, #29
 8011988:	d001      	beq.n	801198e <__sflush_r+0xb2>
 801198a:	2b16      	cmp	r3, #22
 801198c:	d101      	bne.n	8011992 <__sflush_r+0xb6>
 801198e:	602f      	str	r7, [r5, #0]
 8011990:	e7b1      	b.n	80118f6 <__sflush_r+0x1a>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011998:	81a3      	strh	r3, [r4, #12]
 801199a:	e7ad      	b.n	80118f8 <__sflush_r+0x1c>
 801199c:	690f      	ldr	r7, [r1, #16]
 801199e:	2f00      	cmp	r7, #0
 80119a0:	d0a9      	beq.n	80118f6 <__sflush_r+0x1a>
 80119a2:	0793      	lsls	r3, r2, #30
 80119a4:	680e      	ldr	r6, [r1, #0]
 80119a6:	bf08      	it	eq
 80119a8:	694b      	ldreq	r3, [r1, #20]
 80119aa:	600f      	str	r7, [r1, #0]
 80119ac:	bf18      	it	ne
 80119ae:	2300      	movne	r3, #0
 80119b0:	eba6 0807 	sub.w	r8, r6, r7
 80119b4:	608b      	str	r3, [r1, #8]
 80119b6:	f1b8 0f00 	cmp.w	r8, #0
 80119ba:	dd9c      	ble.n	80118f6 <__sflush_r+0x1a>
 80119bc:	6a21      	ldr	r1, [r4, #32]
 80119be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119c0:	4643      	mov	r3, r8
 80119c2:	463a      	mov	r2, r7
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b0      	blx	r6
 80119c8:	2800      	cmp	r0, #0
 80119ca:	dc06      	bgt.n	80119da <__sflush_r+0xfe>
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d2:	81a3      	strh	r3, [r4, #12]
 80119d4:	f04f 30ff 	mov.w	r0, #4294967295
 80119d8:	e78e      	b.n	80118f8 <__sflush_r+0x1c>
 80119da:	4407      	add	r7, r0
 80119dc:	eba8 0800 	sub.w	r8, r8, r0
 80119e0:	e7e9      	b.n	80119b6 <__sflush_r+0xda>
 80119e2:	bf00      	nop
 80119e4:	20400001 	.word	0x20400001

080119e8 <_fflush_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	690b      	ldr	r3, [r1, #16]
 80119ec:	4605      	mov	r5, r0
 80119ee:	460c      	mov	r4, r1
 80119f0:	b913      	cbnz	r3, 80119f8 <_fflush_r+0x10>
 80119f2:	2500      	movs	r5, #0
 80119f4:	4628      	mov	r0, r5
 80119f6:	bd38      	pop	{r3, r4, r5, pc}
 80119f8:	b118      	cbz	r0, 8011a02 <_fflush_r+0x1a>
 80119fa:	6983      	ldr	r3, [r0, #24]
 80119fc:	b90b      	cbnz	r3, 8011a02 <_fflush_r+0x1a>
 80119fe:	f000 f887 	bl	8011b10 <__sinit>
 8011a02:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <_fflush_r+0x6c>)
 8011a04:	429c      	cmp	r4, r3
 8011a06:	d11b      	bne.n	8011a40 <_fflush_r+0x58>
 8011a08:	686c      	ldr	r4, [r5, #4]
 8011a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d0ef      	beq.n	80119f2 <_fflush_r+0xa>
 8011a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a14:	07d0      	lsls	r0, r2, #31
 8011a16:	d404      	bmi.n	8011a22 <_fflush_r+0x3a>
 8011a18:	0599      	lsls	r1, r3, #22
 8011a1a:	d402      	bmi.n	8011a22 <_fflush_r+0x3a>
 8011a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a1e:	f000 f927 	bl	8011c70 <__retarget_lock_acquire_recursive>
 8011a22:	4628      	mov	r0, r5
 8011a24:	4621      	mov	r1, r4
 8011a26:	f7ff ff59 	bl	80118dc <__sflush_r>
 8011a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a2c:	07da      	lsls	r2, r3, #31
 8011a2e:	4605      	mov	r5, r0
 8011a30:	d4e0      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	059b      	lsls	r3, r3, #22
 8011a36:	d4dd      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a3a:	f000 f91a 	bl	8011c72 <__retarget_lock_release_recursive>
 8011a3e:	e7d9      	b.n	80119f4 <_fflush_r+0xc>
 8011a40:	4b05      	ldr	r3, [pc, #20]	; (8011a58 <_fflush_r+0x70>)
 8011a42:	429c      	cmp	r4, r3
 8011a44:	d101      	bne.n	8011a4a <_fflush_r+0x62>
 8011a46:	68ac      	ldr	r4, [r5, #8]
 8011a48:	e7df      	b.n	8011a0a <_fflush_r+0x22>
 8011a4a:	4b04      	ldr	r3, [pc, #16]	; (8011a5c <_fflush_r+0x74>)
 8011a4c:	429c      	cmp	r4, r3
 8011a4e:	bf08      	it	eq
 8011a50:	68ec      	ldreq	r4, [r5, #12]
 8011a52:	e7da      	b.n	8011a0a <_fflush_r+0x22>
 8011a54:	08012ccc 	.word	0x08012ccc
 8011a58:	08012cec 	.word	0x08012cec
 8011a5c:	08012cac 	.word	0x08012cac

08011a60 <std>:
 8011a60:	2300      	movs	r3, #0
 8011a62:	b510      	push	{r4, lr}
 8011a64:	4604      	mov	r4, r0
 8011a66:	e9c0 3300 	strd	r3, r3, [r0]
 8011a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a6e:	6083      	str	r3, [r0, #8]
 8011a70:	8181      	strh	r1, [r0, #12]
 8011a72:	6643      	str	r3, [r0, #100]	; 0x64
 8011a74:	81c2      	strh	r2, [r0, #14]
 8011a76:	6183      	str	r3, [r0, #24]
 8011a78:	4619      	mov	r1, r3
 8011a7a:	2208      	movs	r2, #8
 8011a7c:	305c      	adds	r0, #92	; 0x5c
 8011a7e:	f7fb fb9d 	bl	800d1bc <memset>
 8011a82:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <std+0x38>)
 8011a84:	6263      	str	r3, [r4, #36]	; 0x24
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <std+0x3c>)
 8011a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a8a:	4b05      	ldr	r3, [pc, #20]	; (8011aa0 <std+0x40>)
 8011a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a8e:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <std+0x44>)
 8011a90:	6224      	str	r4, [r4, #32]
 8011a92:	6323      	str	r3, [r4, #48]	; 0x30
 8011a94:	bd10      	pop	{r4, pc}
 8011a96:	bf00      	nop
 8011a98:	0800e161 	.word	0x0800e161
 8011a9c:	0800e187 	.word	0x0800e187
 8011aa0:	0800e1bf 	.word	0x0800e1bf
 8011aa4:	0800e1e3 	.word	0x0800e1e3

08011aa8 <_cleanup_r>:
 8011aa8:	4901      	ldr	r1, [pc, #4]	; (8011ab0 <_cleanup_r+0x8>)
 8011aaa:	f000 b8c1 	b.w	8011c30 <_fwalk_reent>
 8011aae:	bf00      	nop
 8011ab0:	080119e9 	.word	0x080119e9

08011ab4 <__sfmoreglue>:
 8011ab4:	b570      	push	{r4, r5, r6, lr}
 8011ab6:	1e4a      	subs	r2, r1, #1
 8011ab8:	2568      	movs	r5, #104	; 0x68
 8011aba:	4355      	muls	r5, r2
 8011abc:	460e      	mov	r6, r1
 8011abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ac2:	f7fb fbd3 	bl	800d26c <_malloc_r>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	b140      	cbz	r0, 8011adc <__sfmoreglue+0x28>
 8011aca:	2100      	movs	r1, #0
 8011acc:	e9c0 1600 	strd	r1, r6, [r0]
 8011ad0:	300c      	adds	r0, #12
 8011ad2:	60a0      	str	r0, [r4, #8]
 8011ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ad8:	f7fb fb70 	bl	800d1bc <memset>
 8011adc:	4620      	mov	r0, r4
 8011ade:	bd70      	pop	{r4, r5, r6, pc}

08011ae0 <__sfp_lock_acquire>:
 8011ae0:	4801      	ldr	r0, [pc, #4]	; (8011ae8 <__sfp_lock_acquire+0x8>)
 8011ae2:	f000 b8c5 	b.w	8011c70 <__retarget_lock_acquire_recursive>
 8011ae6:	bf00      	nop
 8011ae8:	20000630 	.word	0x20000630

08011aec <__sfp_lock_release>:
 8011aec:	4801      	ldr	r0, [pc, #4]	; (8011af4 <__sfp_lock_release+0x8>)
 8011aee:	f000 b8c0 	b.w	8011c72 <__retarget_lock_release_recursive>
 8011af2:	bf00      	nop
 8011af4:	20000630 	.word	0x20000630

08011af8 <__sinit_lock_acquire>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__sinit_lock_acquire+0x8>)
 8011afa:	f000 b8b9 	b.w	8011c70 <__retarget_lock_acquire_recursive>
 8011afe:	bf00      	nop
 8011b00:	2000062b 	.word	0x2000062b

08011b04 <__sinit_lock_release>:
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <__sinit_lock_release+0x8>)
 8011b06:	f000 b8b4 	b.w	8011c72 <__retarget_lock_release_recursive>
 8011b0a:	bf00      	nop
 8011b0c:	2000062b 	.word	0x2000062b

08011b10 <__sinit>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	4604      	mov	r4, r0
 8011b14:	f7ff fff0 	bl	8011af8 <__sinit_lock_acquire>
 8011b18:	69a3      	ldr	r3, [r4, #24]
 8011b1a:	b11b      	cbz	r3, 8011b24 <__sinit+0x14>
 8011b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b20:	f7ff bff0 	b.w	8011b04 <__sinit_lock_release>
 8011b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b28:	6523      	str	r3, [r4, #80]	; 0x50
 8011b2a:	4b13      	ldr	r3, [pc, #76]	; (8011b78 <__sinit+0x68>)
 8011b2c:	4a13      	ldr	r2, [pc, #76]	; (8011b7c <__sinit+0x6c>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b32:	42a3      	cmp	r3, r4
 8011b34:	bf04      	itt	eq
 8011b36:	2301      	moveq	r3, #1
 8011b38:	61a3      	streq	r3, [r4, #24]
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f000 f820 	bl	8011b80 <__sfp>
 8011b40:	6060      	str	r0, [r4, #4]
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 f81c 	bl	8011b80 <__sfp>
 8011b48:	60a0      	str	r0, [r4, #8]
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f000 f818 	bl	8011b80 <__sfp>
 8011b50:	2200      	movs	r2, #0
 8011b52:	60e0      	str	r0, [r4, #12]
 8011b54:	2104      	movs	r1, #4
 8011b56:	6860      	ldr	r0, [r4, #4]
 8011b58:	f7ff ff82 	bl	8011a60 <std>
 8011b5c:	68a0      	ldr	r0, [r4, #8]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	2109      	movs	r1, #9
 8011b62:	f7ff ff7d 	bl	8011a60 <std>
 8011b66:	68e0      	ldr	r0, [r4, #12]
 8011b68:	2202      	movs	r2, #2
 8011b6a:	2112      	movs	r1, #18
 8011b6c:	f7ff ff78 	bl	8011a60 <std>
 8011b70:	2301      	movs	r3, #1
 8011b72:	61a3      	str	r3, [r4, #24]
 8011b74:	e7d2      	b.n	8011b1c <__sinit+0xc>
 8011b76:	bf00      	nop
 8011b78:	08012840 	.word	0x08012840
 8011b7c:	08011aa9 	.word	0x08011aa9

08011b80 <__sfp>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	4607      	mov	r7, r0
 8011b84:	f7ff ffac 	bl	8011ae0 <__sfp_lock_acquire>
 8011b88:	4b1e      	ldr	r3, [pc, #120]	; (8011c04 <__sfp+0x84>)
 8011b8a:	681e      	ldr	r6, [r3, #0]
 8011b8c:	69b3      	ldr	r3, [r6, #24]
 8011b8e:	b913      	cbnz	r3, 8011b96 <__sfp+0x16>
 8011b90:	4630      	mov	r0, r6
 8011b92:	f7ff ffbd 	bl	8011b10 <__sinit>
 8011b96:	3648      	adds	r6, #72	; 0x48
 8011b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	d503      	bpl.n	8011ba8 <__sfp+0x28>
 8011ba0:	6833      	ldr	r3, [r6, #0]
 8011ba2:	b30b      	cbz	r3, 8011be8 <__sfp+0x68>
 8011ba4:	6836      	ldr	r6, [r6, #0]
 8011ba6:	e7f7      	b.n	8011b98 <__sfp+0x18>
 8011ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011bac:	b9d5      	cbnz	r5, 8011be4 <__sfp+0x64>
 8011bae:	4b16      	ldr	r3, [pc, #88]	; (8011c08 <__sfp+0x88>)
 8011bb0:	60e3      	str	r3, [r4, #12]
 8011bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8011bb8:	f000 f859 	bl	8011c6e <__retarget_lock_init_recursive>
 8011bbc:	f7ff ff96 	bl	8011aec <__sfp_lock_release>
 8011bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011bc8:	6025      	str	r5, [r4, #0]
 8011bca:	61a5      	str	r5, [r4, #24]
 8011bcc:	2208      	movs	r2, #8
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011bd4:	f7fb faf2 	bl	800d1bc <memset>
 8011bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011be0:	4620      	mov	r0, r4
 8011be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011be4:	3468      	adds	r4, #104	; 0x68
 8011be6:	e7d9      	b.n	8011b9c <__sfp+0x1c>
 8011be8:	2104      	movs	r1, #4
 8011bea:	4638      	mov	r0, r7
 8011bec:	f7ff ff62 	bl	8011ab4 <__sfmoreglue>
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	6030      	str	r0, [r6, #0]
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d1d5      	bne.n	8011ba4 <__sfp+0x24>
 8011bf8:	f7ff ff78 	bl	8011aec <__sfp_lock_release>
 8011bfc:	230c      	movs	r3, #12
 8011bfe:	603b      	str	r3, [r7, #0]
 8011c00:	e7ee      	b.n	8011be0 <__sfp+0x60>
 8011c02:	bf00      	nop
 8011c04:	08012840 	.word	0x08012840
 8011c08:	ffff0001 	.word	0xffff0001

08011c0c <fiprintf>:
 8011c0c:	b40e      	push	{r1, r2, r3}
 8011c0e:	b503      	push	{r0, r1, lr}
 8011c10:	4601      	mov	r1, r0
 8011c12:	ab03      	add	r3, sp, #12
 8011c14:	4805      	ldr	r0, [pc, #20]	; (8011c2c <fiprintf+0x20>)
 8011c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c1a:	6800      	ldr	r0, [r0, #0]
 8011c1c:	9301      	str	r3, [sp, #4]
 8011c1e:	f000 f879 	bl	8011d14 <_vfiprintf_r>
 8011c22:	b002      	add	sp, #8
 8011c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c28:	b003      	add	sp, #12
 8011c2a:	4770      	bx	lr
 8011c2c:	2000000c 	.word	0x2000000c

08011c30 <_fwalk_reent>:
 8011c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c34:	4606      	mov	r6, r0
 8011c36:	4688      	mov	r8, r1
 8011c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c3c:	2700      	movs	r7, #0
 8011c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c42:	f1b9 0901 	subs.w	r9, r9, #1
 8011c46:	d505      	bpl.n	8011c54 <_fwalk_reent+0x24>
 8011c48:	6824      	ldr	r4, [r4, #0]
 8011c4a:	2c00      	cmp	r4, #0
 8011c4c:	d1f7      	bne.n	8011c3e <_fwalk_reent+0xe>
 8011c4e:	4638      	mov	r0, r7
 8011c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c54:	89ab      	ldrh	r3, [r5, #12]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d907      	bls.n	8011c6a <_fwalk_reent+0x3a>
 8011c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	d003      	beq.n	8011c6a <_fwalk_reent+0x3a>
 8011c62:	4629      	mov	r1, r5
 8011c64:	4630      	mov	r0, r6
 8011c66:	47c0      	blx	r8
 8011c68:	4307      	orrs	r7, r0
 8011c6a:	3568      	adds	r5, #104	; 0x68
 8011c6c:	e7e9      	b.n	8011c42 <_fwalk_reent+0x12>

08011c6e <__retarget_lock_init_recursive>:
 8011c6e:	4770      	bx	lr

08011c70 <__retarget_lock_acquire_recursive>:
 8011c70:	4770      	bx	lr

08011c72 <__retarget_lock_release_recursive>:
 8011c72:	4770      	bx	lr

08011c74 <_realloc_r>:
 8011c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c76:	4607      	mov	r7, r0
 8011c78:	4614      	mov	r4, r2
 8011c7a:	460e      	mov	r6, r1
 8011c7c:	b921      	cbnz	r1, 8011c88 <_realloc_r+0x14>
 8011c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c82:	4611      	mov	r1, r2
 8011c84:	f7fb baf2 	b.w	800d26c <_malloc_r>
 8011c88:	b922      	cbnz	r2, 8011c94 <_realloc_r+0x20>
 8011c8a:	f7fb fa9f 	bl	800d1cc <_free_r>
 8011c8e:	4625      	mov	r5, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c94:	f000 fa92 	bl	80121bc <_malloc_usable_size_r>
 8011c98:	42a0      	cmp	r0, r4
 8011c9a:	d20f      	bcs.n	8011cbc <_realloc_r+0x48>
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	f7fb fae4 	bl	800d26c <_malloc_r>
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d0f2      	beq.n	8011c90 <_realloc_r+0x1c>
 8011caa:	4631      	mov	r1, r6
 8011cac:	4622      	mov	r2, r4
 8011cae:	f7fb fa5d 	bl	800d16c <memcpy>
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	f7fb fa89 	bl	800d1cc <_free_r>
 8011cba:	e7e9      	b.n	8011c90 <_realloc_r+0x1c>
 8011cbc:	4635      	mov	r5, r6
 8011cbe:	e7e7      	b.n	8011c90 <_realloc_r+0x1c>

08011cc0 <__sfputc_r>:
 8011cc0:	6893      	ldr	r3, [r2, #8]
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	b410      	push	{r4}
 8011cc8:	6093      	str	r3, [r2, #8]
 8011cca:	da08      	bge.n	8011cde <__sfputc_r+0x1e>
 8011ccc:	6994      	ldr	r4, [r2, #24]
 8011cce:	42a3      	cmp	r3, r4
 8011cd0:	db01      	blt.n	8011cd6 <__sfputc_r+0x16>
 8011cd2:	290a      	cmp	r1, #10
 8011cd4:	d103      	bne.n	8011cde <__sfputc_r+0x1e>
 8011cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cda:	f000 b94b 	b.w	8011f74 <__swbuf_r>
 8011cde:	6813      	ldr	r3, [r2, #0]
 8011ce0:	1c58      	adds	r0, r3, #1
 8011ce2:	6010      	str	r0, [r2, #0]
 8011ce4:	7019      	strb	r1, [r3, #0]
 8011ce6:	4608      	mov	r0, r1
 8011ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <__sfputs_r>:
 8011cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	460f      	mov	r7, r1
 8011cf4:	4614      	mov	r4, r2
 8011cf6:	18d5      	adds	r5, r2, r3
 8011cf8:	42ac      	cmp	r4, r5
 8011cfa:	d101      	bne.n	8011d00 <__sfputs_r+0x12>
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	e007      	b.n	8011d10 <__sfputs_r+0x22>
 8011d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d04:	463a      	mov	r2, r7
 8011d06:	4630      	mov	r0, r6
 8011d08:	f7ff ffda 	bl	8011cc0 <__sfputc_r>
 8011d0c:	1c43      	adds	r3, r0, #1
 8011d0e:	d1f3      	bne.n	8011cf8 <__sfputs_r+0xa>
 8011d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d14 <_vfiprintf_r>:
 8011d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d18:	460d      	mov	r5, r1
 8011d1a:	b09d      	sub	sp, #116	; 0x74
 8011d1c:	4614      	mov	r4, r2
 8011d1e:	4698      	mov	r8, r3
 8011d20:	4606      	mov	r6, r0
 8011d22:	b118      	cbz	r0, 8011d2c <_vfiprintf_r+0x18>
 8011d24:	6983      	ldr	r3, [r0, #24]
 8011d26:	b90b      	cbnz	r3, 8011d2c <_vfiprintf_r+0x18>
 8011d28:	f7ff fef2 	bl	8011b10 <__sinit>
 8011d2c:	4b89      	ldr	r3, [pc, #548]	; (8011f54 <_vfiprintf_r+0x240>)
 8011d2e:	429d      	cmp	r5, r3
 8011d30:	d11b      	bne.n	8011d6a <_vfiprintf_r+0x56>
 8011d32:	6875      	ldr	r5, [r6, #4]
 8011d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d36:	07d9      	lsls	r1, r3, #31
 8011d38:	d405      	bmi.n	8011d46 <_vfiprintf_r+0x32>
 8011d3a:	89ab      	ldrh	r3, [r5, #12]
 8011d3c:	059a      	lsls	r2, r3, #22
 8011d3e:	d402      	bmi.n	8011d46 <_vfiprintf_r+0x32>
 8011d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d42:	f7ff ff95 	bl	8011c70 <__retarget_lock_acquire_recursive>
 8011d46:	89ab      	ldrh	r3, [r5, #12]
 8011d48:	071b      	lsls	r3, r3, #28
 8011d4a:	d501      	bpl.n	8011d50 <_vfiprintf_r+0x3c>
 8011d4c:	692b      	ldr	r3, [r5, #16]
 8011d4e:	b9eb      	cbnz	r3, 8011d8c <_vfiprintf_r+0x78>
 8011d50:	4629      	mov	r1, r5
 8011d52:	4630      	mov	r0, r6
 8011d54:	f000 f960 	bl	8012018 <__swsetup_r>
 8011d58:	b1c0      	cbz	r0, 8011d8c <_vfiprintf_r+0x78>
 8011d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d5c:	07dc      	lsls	r4, r3, #31
 8011d5e:	d50e      	bpl.n	8011d7e <_vfiprintf_r+0x6a>
 8011d60:	f04f 30ff 	mov.w	r0, #4294967295
 8011d64:	b01d      	add	sp, #116	; 0x74
 8011d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6a:	4b7b      	ldr	r3, [pc, #492]	; (8011f58 <_vfiprintf_r+0x244>)
 8011d6c:	429d      	cmp	r5, r3
 8011d6e:	d101      	bne.n	8011d74 <_vfiprintf_r+0x60>
 8011d70:	68b5      	ldr	r5, [r6, #8]
 8011d72:	e7df      	b.n	8011d34 <_vfiprintf_r+0x20>
 8011d74:	4b79      	ldr	r3, [pc, #484]	; (8011f5c <_vfiprintf_r+0x248>)
 8011d76:	429d      	cmp	r5, r3
 8011d78:	bf08      	it	eq
 8011d7a:	68f5      	ldreq	r5, [r6, #12]
 8011d7c:	e7da      	b.n	8011d34 <_vfiprintf_r+0x20>
 8011d7e:	89ab      	ldrh	r3, [r5, #12]
 8011d80:	0598      	lsls	r0, r3, #22
 8011d82:	d4ed      	bmi.n	8011d60 <_vfiprintf_r+0x4c>
 8011d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d86:	f7ff ff74 	bl	8011c72 <__retarget_lock_release_recursive>
 8011d8a:	e7e9      	b.n	8011d60 <_vfiprintf_r+0x4c>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d90:	2320      	movs	r3, #32
 8011d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d9a:	2330      	movs	r3, #48	; 0x30
 8011d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f60 <_vfiprintf_r+0x24c>
 8011da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011da4:	f04f 0901 	mov.w	r9, #1
 8011da8:	4623      	mov	r3, r4
 8011daa:	469a      	mov	sl, r3
 8011dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011db0:	b10a      	cbz	r2, 8011db6 <_vfiprintf_r+0xa2>
 8011db2:	2a25      	cmp	r2, #37	; 0x25
 8011db4:	d1f9      	bne.n	8011daa <_vfiprintf_r+0x96>
 8011db6:	ebba 0b04 	subs.w	fp, sl, r4
 8011dba:	d00b      	beq.n	8011dd4 <_vfiprintf_r+0xc0>
 8011dbc:	465b      	mov	r3, fp
 8011dbe:	4622      	mov	r2, r4
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	f7ff ff93 	bl	8011cee <__sfputs_r>
 8011dc8:	3001      	adds	r0, #1
 8011dca:	f000 80aa 	beq.w	8011f22 <_vfiprintf_r+0x20e>
 8011dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dd0:	445a      	add	r2, fp
 8011dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8011dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 80a2 	beq.w	8011f22 <_vfiprintf_r+0x20e>
 8011dde:	2300      	movs	r3, #0
 8011de0:	f04f 32ff 	mov.w	r2, #4294967295
 8011de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011de8:	f10a 0a01 	add.w	sl, sl, #1
 8011dec:	9304      	str	r3, [sp, #16]
 8011dee:	9307      	str	r3, [sp, #28]
 8011df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011df4:	931a      	str	r3, [sp, #104]	; 0x68
 8011df6:	4654      	mov	r4, sl
 8011df8:	2205      	movs	r2, #5
 8011dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dfe:	4858      	ldr	r0, [pc, #352]	; (8011f60 <_vfiprintf_r+0x24c>)
 8011e00:	f7ee fa06 	bl	8000210 <memchr>
 8011e04:	9a04      	ldr	r2, [sp, #16]
 8011e06:	b9d8      	cbnz	r0, 8011e40 <_vfiprintf_r+0x12c>
 8011e08:	06d1      	lsls	r1, r2, #27
 8011e0a:	bf44      	itt	mi
 8011e0c:	2320      	movmi	r3, #32
 8011e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e12:	0713      	lsls	r3, r2, #28
 8011e14:	bf44      	itt	mi
 8011e16:	232b      	movmi	r3, #43	; 0x2b
 8011e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e20:	2b2a      	cmp	r3, #42	; 0x2a
 8011e22:	d015      	beq.n	8011e50 <_vfiprintf_r+0x13c>
 8011e24:	9a07      	ldr	r2, [sp, #28]
 8011e26:	4654      	mov	r4, sl
 8011e28:	2000      	movs	r0, #0
 8011e2a:	f04f 0c0a 	mov.w	ip, #10
 8011e2e:	4621      	mov	r1, r4
 8011e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e34:	3b30      	subs	r3, #48	; 0x30
 8011e36:	2b09      	cmp	r3, #9
 8011e38:	d94e      	bls.n	8011ed8 <_vfiprintf_r+0x1c4>
 8011e3a:	b1b0      	cbz	r0, 8011e6a <_vfiprintf_r+0x156>
 8011e3c:	9207      	str	r2, [sp, #28]
 8011e3e:	e014      	b.n	8011e6a <_vfiprintf_r+0x156>
 8011e40:	eba0 0308 	sub.w	r3, r0, r8
 8011e44:	fa09 f303 	lsl.w	r3, r9, r3
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	9304      	str	r3, [sp, #16]
 8011e4c:	46a2      	mov	sl, r4
 8011e4e:	e7d2      	b.n	8011df6 <_vfiprintf_r+0xe2>
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	1d19      	adds	r1, r3, #4
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	9103      	str	r1, [sp, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	bfbb      	ittet	lt
 8011e5c:	425b      	neglt	r3, r3
 8011e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e62:	9307      	strge	r3, [sp, #28]
 8011e64:	9307      	strlt	r3, [sp, #28]
 8011e66:	bfb8      	it	lt
 8011e68:	9204      	strlt	r2, [sp, #16]
 8011e6a:	7823      	ldrb	r3, [r4, #0]
 8011e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e6e:	d10c      	bne.n	8011e8a <_vfiprintf_r+0x176>
 8011e70:	7863      	ldrb	r3, [r4, #1]
 8011e72:	2b2a      	cmp	r3, #42	; 0x2a
 8011e74:	d135      	bne.n	8011ee2 <_vfiprintf_r+0x1ce>
 8011e76:	9b03      	ldr	r3, [sp, #12]
 8011e78:	1d1a      	adds	r2, r3, #4
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	9203      	str	r2, [sp, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	bfb8      	it	lt
 8011e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e86:	3402      	adds	r4, #2
 8011e88:	9305      	str	r3, [sp, #20]
 8011e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f70 <_vfiprintf_r+0x25c>
 8011e8e:	7821      	ldrb	r1, [r4, #0]
 8011e90:	2203      	movs	r2, #3
 8011e92:	4650      	mov	r0, sl
 8011e94:	f7ee f9bc 	bl	8000210 <memchr>
 8011e98:	b140      	cbz	r0, 8011eac <_vfiprintf_r+0x198>
 8011e9a:	2340      	movs	r3, #64	; 0x40
 8011e9c:	eba0 000a 	sub.w	r0, r0, sl
 8011ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8011ea4:	9b04      	ldr	r3, [sp, #16]
 8011ea6:	4303      	orrs	r3, r0
 8011ea8:	3401      	adds	r4, #1
 8011eaa:	9304      	str	r3, [sp, #16]
 8011eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb0:	482c      	ldr	r0, [pc, #176]	; (8011f64 <_vfiprintf_r+0x250>)
 8011eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011eb6:	2206      	movs	r2, #6
 8011eb8:	f7ee f9aa 	bl	8000210 <memchr>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	d03f      	beq.n	8011f40 <_vfiprintf_r+0x22c>
 8011ec0:	4b29      	ldr	r3, [pc, #164]	; (8011f68 <_vfiprintf_r+0x254>)
 8011ec2:	bb1b      	cbnz	r3, 8011f0c <_vfiprintf_r+0x1f8>
 8011ec4:	9b03      	ldr	r3, [sp, #12]
 8011ec6:	3307      	adds	r3, #7
 8011ec8:	f023 0307 	bic.w	r3, r3, #7
 8011ecc:	3308      	adds	r3, #8
 8011ece:	9303      	str	r3, [sp, #12]
 8011ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed2:	443b      	add	r3, r7
 8011ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed6:	e767      	b.n	8011da8 <_vfiprintf_r+0x94>
 8011ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011edc:	460c      	mov	r4, r1
 8011ede:	2001      	movs	r0, #1
 8011ee0:	e7a5      	b.n	8011e2e <_vfiprintf_r+0x11a>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	3401      	adds	r4, #1
 8011ee6:	9305      	str	r3, [sp, #20]
 8011ee8:	4619      	mov	r1, r3
 8011eea:	f04f 0c0a 	mov.w	ip, #10
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ef4:	3a30      	subs	r2, #48	; 0x30
 8011ef6:	2a09      	cmp	r2, #9
 8011ef8:	d903      	bls.n	8011f02 <_vfiprintf_r+0x1ee>
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d0c5      	beq.n	8011e8a <_vfiprintf_r+0x176>
 8011efe:	9105      	str	r1, [sp, #20]
 8011f00:	e7c3      	b.n	8011e8a <_vfiprintf_r+0x176>
 8011f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f06:	4604      	mov	r4, r0
 8011f08:	2301      	movs	r3, #1
 8011f0a:	e7f0      	b.n	8011eee <_vfiprintf_r+0x1da>
 8011f0c:	ab03      	add	r3, sp, #12
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	462a      	mov	r2, r5
 8011f12:	4b16      	ldr	r3, [pc, #88]	; (8011f6c <_vfiprintf_r+0x258>)
 8011f14:	a904      	add	r1, sp, #16
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7fb faa2 	bl	800d460 <_printf_float>
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	1c78      	adds	r0, r7, #1
 8011f20:	d1d6      	bne.n	8011ed0 <_vfiprintf_r+0x1bc>
 8011f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f24:	07d9      	lsls	r1, r3, #31
 8011f26:	d405      	bmi.n	8011f34 <_vfiprintf_r+0x220>
 8011f28:	89ab      	ldrh	r3, [r5, #12]
 8011f2a:	059a      	lsls	r2, r3, #22
 8011f2c:	d402      	bmi.n	8011f34 <_vfiprintf_r+0x220>
 8011f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f30:	f7ff fe9f 	bl	8011c72 <__retarget_lock_release_recursive>
 8011f34:	89ab      	ldrh	r3, [r5, #12]
 8011f36:	065b      	lsls	r3, r3, #25
 8011f38:	f53f af12 	bmi.w	8011d60 <_vfiprintf_r+0x4c>
 8011f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f3e:	e711      	b.n	8011d64 <_vfiprintf_r+0x50>
 8011f40:	ab03      	add	r3, sp, #12
 8011f42:	9300      	str	r3, [sp, #0]
 8011f44:	462a      	mov	r2, r5
 8011f46:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <_vfiprintf_r+0x258>)
 8011f48:	a904      	add	r1, sp, #16
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f7fb fd2c 	bl	800d9a8 <_printf_i>
 8011f50:	e7e4      	b.n	8011f1c <_vfiprintf_r+0x208>
 8011f52:	bf00      	nop
 8011f54:	08012ccc 	.word	0x08012ccc
 8011f58:	08012cec 	.word	0x08012cec
 8011f5c:	08012cac 	.word	0x08012cac
 8011f60:	08012c44 	.word	0x08012c44
 8011f64:	08012c4e 	.word	0x08012c4e
 8011f68:	0800d461 	.word	0x0800d461
 8011f6c:	08011cef 	.word	0x08011cef
 8011f70:	08012c4a 	.word	0x08012c4a

08011f74 <__swbuf_r>:
 8011f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f76:	460e      	mov	r6, r1
 8011f78:	4614      	mov	r4, r2
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	b118      	cbz	r0, 8011f86 <__swbuf_r+0x12>
 8011f7e:	6983      	ldr	r3, [r0, #24]
 8011f80:	b90b      	cbnz	r3, 8011f86 <__swbuf_r+0x12>
 8011f82:	f7ff fdc5 	bl	8011b10 <__sinit>
 8011f86:	4b21      	ldr	r3, [pc, #132]	; (801200c <__swbuf_r+0x98>)
 8011f88:	429c      	cmp	r4, r3
 8011f8a:	d12b      	bne.n	8011fe4 <__swbuf_r+0x70>
 8011f8c:	686c      	ldr	r4, [r5, #4]
 8011f8e:	69a3      	ldr	r3, [r4, #24]
 8011f90:	60a3      	str	r3, [r4, #8]
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	071a      	lsls	r2, r3, #28
 8011f96:	d52f      	bpl.n	8011ff8 <__swbuf_r+0x84>
 8011f98:	6923      	ldr	r3, [r4, #16]
 8011f9a:	b36b      	cbz	r3, 8011ff8 <__swbuf_r+0x84>
 8011f9c:	6923      	ldr	r3, [r4, #16]
 8011f9e:	6820      	ldr	r0, [r4, #0]
 8011fa0:	1ac0      	subs	r0, r0, r3
 8011fa2:	6963      	ldr	r3, [r4, #20]
 8011fa4:	b2f6      	uxtb	r6, r6
 8011fa6:	4283      	cmp	r3, r0
 8011fa8:	4637      	mov	r7, r6
 8011faa:	dc04      	bgt.n	8011fb6 <__swbuf_r+0x42>
 8011fac:	4621      	mov	r1, r4
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f7ff fd1a 	bl	80119e8 <_fflush_r>
 8011fb4:	bb30      	cbnz	r0, 8012004 <__swbuf_r+0x90>
 8011fb6:	68a3      	ldr	r3, [r4, #8]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	60a3      	str	r3, [r4, #8]
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	1c5a      	adds	r2, r3, #1
 8011fc0:	6022      	str	r2, [r4, #0]
 8011fc2:	701e      	strb	r6, [r3, #0]
 8011fc4:	6963      	ldr	r3, [r4, #20]
 8011fc6:	3001      	adds	r0, #1
 8011fc8:	4283      	cmp	r3, r0
 8011fca:	d004      	beq.n	8011fd6 <__swbuf_r+0x62>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	07db      	lsls	r3, r3, #31
 8011fd0:	d506      	bpl.n	8011fe0 <__swbuf_r+0x6c>
 8011fd2:	2e0a      	cmp	r6, #10
 8011fd4:	d104      	bne.n	8011fe0 <__swbuf_r+0x6c>
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f7ff fd05 	bl	80119e8 <_fflush_r>
 8011fde:	b988      	cbnz	r0, 8012004 <__swbuf_r+0x90>
 8011fe0:	4638      	mov	r0, r7
 8011fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe4:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <__swbuf_r+0x9c>)
 8011fe6:	429c      	cmp	r4, r3
 8011fe8:	d101      	bne.n	8011fee <__swbuf_r+0x7a>
 8011fea:	68ac      	ldr	r4, [r5, #8]
 8011fec:	e7cf      	b.n	8011f8e <__swbuf_r+0x1a>
 8011fee:	4b09      	ldr	r3, [pc, #36]	; (8012014 <__swbuf_r+0xa0>)
 8011ff0:	429c      	cmp	r4, r3
 8011ff2:	bf08      	it	eq
 8011ff4:	68ec      	ldreq	r4, [r5, #12]
 8011ff6:	e7ca      	b.n	8011f8e <__swbuf_r+0x1a>
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f000 f80c 	bl	8012018 <__swsetup_r>
 8012000:	2800      	cmp	r0, #0
 8012002:	d0cb      	beq.n	8011f9c <__swbuf_r+0x28>
 8012004:	f04f 37ff 	mov.w	r7, #4294967295
 8012008:	e7ea      	b.n	8011fe0 <__swbuf_r+0x6c>
 801200a:	bf00      	nop
 801200c:	08012ccc 	.word	0x08012ccc
 8012010:	08012cec 	.word	0x08012cec
 8012014:	08012cac 	.word	0x08012cac

08012018 <__swsetup_r>:
 8012018:	4b32      	ldr	r3, [pc, #200]	; (80120e4 <__swsetup_r+0xcc>)
 801201a:	b570      	push	{r4, r5, r6, lr}
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	4606      	mov	r6, r0
 8012020:	460c      	mov	r4, r1
 8012022:	b125      	cbz	r5, 801202e <__swsetup_r+0x16>
 8012024:	69ab      	ldr	r3, [r5, #24]
 8012026:	b913      	cbnz	r3, 801202e <__swsetup_r+0x16>
 8012028:	4628      	mov	r0, r5
 801202a:	f7ff fd71 	bl	8011b10 <__sinit>
 801202e:	4b2e      	ldr	r3, [pc, #184]	; (80120e8 <__swsetup_r+0xd0>)
 8012030:	429c      	cmp	r4, r3
 8012032:	d10f      	bne.n	8012054 <__swsetup_r+0x3c>
 8012034:	686c      	ldr	r4, [r5, #4]
 8012036:	89a3      	ldrh	r3, [r4, #12]
 8012038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801203c:	0719      	lsls	r1, r3, #28
 801203e:	d42c      	bmi.n	801209a <__swsetup_r+0x82>
 8012040:	06dd      	lsls	r5, r3, #27
 8012042:	d411      	bmi.n	8012068 <__swsetup_r+0x50>
 8012044:	2309      	movs	r3, #9
 8012046:	6033      	str	r3, [r6, #0]
 8012048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	f04f 30ff 	mov.w	r0, #4294967295
 8012052:	e03e      	b.n	80120d2 <__swsetup_r+0xba>
 8012054:	4b25      	ldr	r3, [pc, #148]	; (80120ec <__swsetup_r+0xd4>)
 8012056:	429c      	cmp	r4, r3
 8012058:	d101      	bne.n	801205e <__swsetup_r+0x46>
 801205a:	68ac      	ldr	r4, [r5, #8]
 801205c:	e7eb      	b.n	8012036 <__swsetup_r+0x1e>
 801205e:	4b24      	ldr	r3, [pc, #144]	; (80120f0 <__swsetup_r+0xd8>)
 8012060:	429c      	cmp	r4, r3
 8012062:	bf08      	it	eq
 8012064:	68ec      	ldreq	r4, [r5, #12]
 8012066:	e7e6      	b.n	8012036 <__swsetup_r+0x1e>
 8012068:	0758      	lsls	r0, r3, #29
 801206a:	d512      	bpl.n	8012092 <__swsetup_r+0x7a>
 801206c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801206e:	b141      	cbz	r1, 8012082 <__swsetup_r+0x6a>
 8012070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012074:	4299      	cmp	r1, r3
 8012076:	d002      	beq.n	801207e <__swsetup_r+0x66>
 8012078:	4630      	mov	r0, r6
 801207a:	f7fb f8a7 	bl	800d1cc <_free_r>
 801207e:	2300      	movs	r3, #0
 8012080:	6363      	str	r3, [r4, #52]	; 0x34
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012088:	81a3      	strh	r3, [r4, #12]
 801208a:	2300      	movs	r3, #0
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	6923      	ldr	r3, [r4, #16]
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	89a3      	ldrh	r3, [r4, #12]
 8012094:	f043 0308 	orr.w	r3, r3, #8
 8012098:	81a3      	strh	r3, [r4, #12]
 801209a:	6923      	ldr	r3, [r4, #16]
 801209c:	b94b      	cbnz	r3, 80120b2 <__swsetup_r+0x9a>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120a8:	d003      	beq.n	80120b2 <__swsetup_r+0x9a>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4630      	mov	r0, r6
 80120ae:	f000 f845 	bl	801213c <__smakebuf_r>
 80120b2:	89a0      	ldrh	r0, [r4, #12]
 80120b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120b8:	f010 0301 	ands.w	r3, r0, #1
 80120bc:	d00a      	beq.n	80120d4 <__swsetup_r+0xbc>
 80120be:	2300      	movs	r3, #0
 80120c0:	60a3      	str	r3, [r4, #8]
 80120c2:	6963      	ldr	r3, [r4, #20]
 80120c4:	425b      	negs	r3, r3
 80120c6:	61a3      	str	r3, [r4, #24]
 80120c8:	6923      	ldr	r3, [r4, #16]
 80120ca:	b943      	cbnz	r3, 80120de <__swsetup_r+0xc6>
 80120cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120d0:	d1ba      	bne.n	8012048 <__swsetup_r+0x30>
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	0781      	lsls	r1, r0, #30
 80120d6:	bf58      	it	pl
 80120d8:	6963      	ldrpl	r3, [r4, #20]
 80120da:	60a3      	str	r3, [r4, #8]
 80120dc:	e7f4      	b.n	80120c8 <__swsetup_r+0xb0>
 80120de:	2000      	movs	r0, #0
 80120e0:	e7f7      	b.n	80120d2 <__swsetup_r+0xba>
 80120e2:	bf00      	nop
 80120e4:	2000000c 	.word	0x2000000c
 80120e8:	08012ccc 	.word	0x08012ccc
 80120ec:	08012cec 	.word	0x08012cec
 80120f0:	08012cac 	.word	0x08012cac

080120f4 <__swhatbuf_r>:
 80120f4:	b570      	push	{r4, r5, r6, lr}
 80120f6:	460e      	mov	r6, r1
 80120f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fc:	2900      	cmp	r1, #0
 80120fe:	b096      	sub	sp, #88	; 0x58
 8012100:	4614      	mov	r4, r2
 8012102:	461d      	mov	r5, r3
 8012104:	da07      	bge.n	8012116 <__swhatbuf_r+0x22>
 8012106:	2300      	movs	r3, #0
 8012108:	602b      	str	r3, [r5, #0]
 801210a:	89b3      	ldrh	r3, [r6, #12]
 801210c:	061a      	lsls	r2, r3, #24
 801210e:	d410      	bmi.n	8012132 <__swhatbuf_r+0x3e>
 8012110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012114:	e00e      	b.n	8012134 <__swhatbuf_r+0x40>
 8012116:	466a      	mov	r2, sp
 8012118:	f000 f858 	bl	80121cc <_fstat_r>
 801211c:	2800      	cmp	r0, #0
 801211e:	dbf2      	blt.n	8012106 <__swhatbuf_r+0x12>
 8012120:	9a01      	ldr	r2, [sp, #4]
 8012122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801212a:	425a      	negs	r2, r3
 801212c:	415a      	adcs	r2, r3
 801212e:	602a      	str	r2, [r5, #0]
 8012130:	e7ee      	b.n	8012110 <__swhatbuf_r+0x1c>
 8012132:	2340      	movs	r3, #64	; 0x40
 8012134:	2000      	movs	r0, #0
 8012136:	6023      	str	r3, [r4, #0]
 8012138:	b016      	add	sp, #88	; 0x58
 801213a:	bd70      	pop	{r4, r5, r6, pc}

0801213c <__smakebuf_r>:
 801213c:	898b      	ldrh	r3, [r1, #12]
 801213e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012140:	079d      	lsls	r5, r3, #30
 8012142:	4606      	mov	r6, r0
 8012144:	460c      	mov	r4, r1
 8012146:	d507      	bpl.n	8012158 <__smakebuf_r+0x1c>
 8012148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	6123      	str	r3, [r4, #16]
 8012150:	2301      	movs	r3, #1
 8012152:	6163      	str	r3, [r4, #20]
 8012154:	b002      	add	sp, #8
 8012156:	bd70      	pop	{r4, r5, r6, pc}
 8012158:	ab01      	add	r3, sp, #4
 801215a:	466a      	mov	r2, sp
 801215c:	f7ff ffca 	bl	80120f4 <__swhatbuf_r>
 8012160:	9900      	ldr	r1, [sp, #0]
 8012162:	4605      	mov	r5, r0
 8012164:	4630      	mov	r0, r6
 8012166:	f7fb f881 	bl	800d26c <_malloc_r>
 801216a:	b948      	cbnz	r0, 8012180 <__smakebuf_r+0x44>
 801216c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012170:	059a      	lsls	r2, r3, #22
 8012172:	d4ef      	bmi.n	8012154 <__smakebuf_r+0x18>
 8012174:	f023 0303 	bic.w	r3, r3, #3
 8012178:	f043 0302 	orr.w	r3, r3, #2
 801217c:	81a3      	strh	r3, [r4, #12]
 801217e:	e7e3      	b.n	8012148 <__smakebuf_r+0xc>
 8012180:	4b0d      	ldr	r3, [pc, #52]	; (80121b8 <__smakebuf_r+0x7c>)
 8012182:	62b3      	str	r3, [r6, #40]	; 0x28
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	6020      	str	r0, [r4, #0]
 8012188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801218c:	81a3      	strh	r3, [r4, #12]
 801218e:	9b00      	ldr	r3, [sp, #0]
 8012190:	6163      	str	r3, [r4, #20]
 8012192:	9b01      	ldr	r3, [sp, #4]
 8012194:	6120      	str	r0, [r4, #16]
 8012196:	b15b      	cbz	r3, 80121b0 <__smakebuf_r+0x74>
 8012198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801219c:	4630      	mov	r0, r6
 801219e:	f000 f827 	bl	80121f0 <_isatty_r>
 80121a2:	b128      	cbz	r0, 80121b0 <__smakebuf_r+0x74>
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	f023 0303 	bic.w	r3, r3, #3
 80121aa:	f043 0301 	orr.w	r3, r3, #1
 80121ae:	81a3      	strh	r3, [r4, #12]
 80121b0:	89a0      	ldrh	r0, [r4, #12]
 80121b2:	4305      	orrs	r5, r0
 80121b4:	81a5      	strh	r5, [r4, #12]
 80121b6:	e7cd      	b.n	8012154 <__smakebuf_r+0x18>
 80121b8:	08011aa9 	.word	0x08011aa9

080121bc <_malloc_usable_size_r>:
 80121bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121c0:	1f18      	subs	r0, r3, #4
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	bfbc      	itt	lt
 80121c6:	580b      	ldrlt	r3, [r1, r0]
 80121c8:	18c0      	addlt	r0, r0, r3
 80121ca:	4770      	bx	lr

080121cc <_fstat_r>:
 80121cc:	b538      	push	{r3, r4, r5, lr}
 80121ce:	4d07      	ldr	r5, [pc, #28]	; (80121ec <_fstat_r+0x20>)
 80121d0:	2300      	movs	r3, #0
 80121d2:	4604      	mov	r4, r0
 80121d4:	4608      	mov	r0, r1
 80121d6:	4611      	mov	r1, r2
 80121d8:	602b      	str	r3, [r5, #0]
 80121da:	f7f3 fb40 	bl	800585e <_fstat>
 80121de:	1c43      	adds	r3, r0, #1
 80121e0:	d102      	bne.n	80121e8 <_fstat_r+0x1c>
 80121e2:	682b      	ldr	r3, [r5, #0]
 80121e4:	b103      	cbz	r3, 80121e8 <_fstat_r+0x1c>
 80121e6:	6023      	str	r3, [r4, #0]
 80121e8:	bd38      	pop	{r3, r4, r5, pc}
 80121ea:	bf00      	nop
 80121ec:	20000624 	.word	0x20000624

080121f0 <_isatty_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4d06      	ldr	r5, [pc, #24]	; (801220c <_isatty_r+0x1c>)
 80121f4:	2300      	movs	r3, #0
 80121f6:	4604      	mov	r4, r0
 80121f8:	4608      	mov	r0, r1
 80121fa:	602b      	str	r3, [r5, #0]
 80121fc:	f7f3 fb3f 	bl	800587e <_isatty>
 8012200:	1c43      	adds	r3, r0, #1
 8012202:	d102      	bne.n	801220a <_isatty_r+0x1a>
 8012204:	682b      	ldr	r3, [r5, #0]
 8012206:	b103      	cbz	r3, 801220a <_isatty_r+0x1a>
 8012208:	6023      	str	r3, [r4, #0]
 801220a:	bd38      	pop	{r3, r4, r5, pc}
 801220c:	20000624 	.word	0x20000624

08012210 <_init>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	bf00      	nop
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr

0801221c <_fini>:
 801221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221e:	bf00      	nop
 8012220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012222:	bc08      	pop	{r3}
 8012224:	469e      	mov	lr, r3
 8012226:	4770      	bx	lr
