/*
 * PID.cpp
 *
 *  Created on: 2021/02/11
 *      Author: reo nagai
 */

// 問題点 2021/02/15
// u_sumがfloat型で加算すると10万くらいでオーバーフローする




//---------------------------------------------------------------------------------------------------------------------
// @brief	:
// @date	: 2021/02/11
//
// @param1[in]	: []
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------


#include "PID.h"




SpeedTypePIDController::SpeedTypePIDController()
{
	vel_diff_integral = 0;
	u_sum = 0;
	pre_diff_vel = 0;

	//Kp = 0.0; // 0.025[mm]
	Kp = 0.600; // 0.025[mm]
	//Kp = 2.5;
	Ki = 0;
	//Kd = 0.000000001;
	Kd = 0.06;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: ゲインを設定する
// @date	: 2021/02/12
//
// @param1[in]	: 比例ゲイン
// @param1[in]	: 積分ゲイン
// @param1[in]	: 微分ゲイン
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void SpeedTypePIDController::SetGain(float kp, float ki, float kd)
{
	Kp = kp;
	Ki  = ki;
	Kd = kd;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: コントローラの目標値を設定する
// @date	: 2021/02/12
//
// @param1[in]	: 目標値
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void SpeedTypePIDController::SetTarget(float p_target_velocity)
{
	target_velocity = p_target_velocity;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: 制御量を取得する
// @date	: 2021/02/12
//
// @return			: 制御量
//---------------------------------------------------------------------------------------------------------------------
float SpeedTypePIDController::GetControlValue()
{
	return u_sum;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: 状態を更新してPIDの制御量を計算する
// @date	: 2021/02/12
//
// @param1[in]	: 現在値
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void SpeedTypePIDController::Update(float p_now_velocity)
{
	// 誤差を計算する
	float vel_diff = target_velocity - p_now_velocity;
	vel_diff_integral += vel_diff;

	// 制御量を計算する
	float u =  Kp * vel_diff + Kd * (vel_diff - pre_diff_vel);// + Ki * vel_diff_integral;

	// 制御量を加算する
	u_sum += u;

	// 今回の観測値を格納する
	pre_diff_vel = vel_diff;
}




PositionTypePIDController::PositionTypePIDController()
{
	diff_integral = 0;
	u = 0;
	pre_diff = 0;

	//Kp = 0.125; // 0.075
	Kp = 5.0;
	Ki = 0;
	//Kd = 0.01;//0.075;
	Kd = 0.12;//0.075;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: ゲインを設定する
// @date	: 2021/02/12
//
// @param1[in]	: 比例ゲイン
// @param1[in]	: 積分ゲイン
// @param1[in]	: 微分ゲイン
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void PositionTypePIDController::SetGain(float kp, float ki, float kd)
{
	Kp = kp;
	Ki  = ki;
	Kd = kd;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: コントローラの目標値を設定する
// @date	: 2021/02/12
//
// @param1[in]	: 目標値
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void PositionTypePIDController::SetTarget(float p_target)
{
	target= p_target;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: 制御量を取得する
// @date	: 2021/02/12
//
// @return			: 制御量
//---------------------------------------------------------------------------------------------------------------------
float PositionTypePIDController::GetControlValue()
{
	return u;
}

//---------------------------------------------------------------------------------------------------------------------
// @brief	: 状態を更新してPIDの制御量を計算する
// @date	: 2021/02/12
//
// @param1[in]	: 現在値
// @return			: なし
//---------------------------------------------------------------------------------------------------------------------
void PositionTypePIDController::Update(float p_now)
{
	// 偏差を計算する
	float diff = target - p_now;
	diff_integral += diff;

	// 制御量を計算する（PD制御）
	u = Kp * diff + Kd * (diff - pre_diff);// + Ki * vel_diff_integral;

	// 今回の観測値を格納する
	pre_diff = diff;
}
